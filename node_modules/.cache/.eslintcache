[{"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\index.js":"1","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\reportWebVitals.js":"2","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\App.js":"3","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Root of equation\\Bisection.js":"4","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Root of equation\\False-position.js":"5","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Root of equation\\Secant.js":"6","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\Cholesky.js":"7","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Root of equation\\One-pointIteration.js":"8","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\LU.js":"9","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Root of equation\\Newtonraphson.js":"10","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\GuassElimination.js":"11","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\Cramerrule.js":"12","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\Conjugate.js":"13","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Interpolation\\Spline.js":"14","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Interpolation\\Lagrange.js":"15","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Leastsqaures\\LinearRegression.js":"16","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Leastsqaures\\PolynomialRegression.js":"17","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\GuassJordan.js":"18","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Leastsqaures\\Multiple_LinearRegression.js":"19","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\Jacobi.js":"20"},{"size":517,"mtime":1620461214902,"results":"21","hashOfConfig":"22"},{"size":375,"mtime":1620461215012,"results":"23","hashOfConfig":"22"},{"size":5320,"mtime":1621069181636,"results":"24","hashOfConfig":"22"},{"size":7530,"mtime":1621084638491,"results":"25","hashOfConfig":"22"},{"size":6505,"mtime":1621067337116,"results":"26","hashOfConfig":"22"},{"size":5959,"mtime":1620461214891,"results":"27","hashOfConfig":"22"},{"size":8097,"mtime":1620461214799,"results":"28","hashOfConfig":"22"},{"size":5563,"mtime":1621067350211,"results":"29","hashOfConfig":"22"},{"size":8597,"mtime":1620461214855,"results":"30","hashOfConfig":"22"},{"size":5740,"mtime":1621086475978,"results":"31","hashOfConfig":"22"},{"size":10083,"mtime":1620461214841,"results":"32","hashOfConfig":"22"},{"size":9174,"mtime":1620461214833,"results":"33","hashOfConfig":"22"},{"size":10658,"mtime":1620461214832,"results":"34","hashOfConfig":"22"},{"size":9163,"mtime":1621067619418,"results":"35","hashOfConfig":"22"},{"size":6436,"mtime":1620461214796,"results":"36","hashOfConfig":"22"},{"size":6671,"mtime":1621067305951,"results":"37","hashOfConfig":"22"},{"size":7360,"mtime":1621067268804,"results":"38","hashOfConfig":"22"},{"size":10684,"mtime":1620461214843,"results":"39","hashOfConfig":"22"},{"size":366,"mtime":1620461214798,"results":"40","hashOfConfig":"22"},{"size":11424,"mtime":1620461214853,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"t0e3zb",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"44"},"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\index.js",[],["92","93"],"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\reportWebVitals.js",[],"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\App.js",["94","95","96"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport { Menu } from 'antd';\r\nimport { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Sider from 'antd/lib/layout/Sider';\r\nimport Layout, { Content } from 'antd/lib/layout/layout';\r\nimport Bisection from './code/Root of equation/Bisection';\r\nimport Falseposition from './code/Root of equation/False-position';\r\nimport Onepoint from './code/Root of equation/One-pointIteration';\r\nimport Newton from './code/Root of equation/Newtonraphson';\r\n// import Secant from './code/Root of equation/Secant';\r\n\r\nimport Cramerrule from './code/Linear/Cramerrule';\r\nimport GuassElimination from './code/Linear/GuassElimination';\r\nimport GuassJordan from './code/Linear/GuassJordan';\r\nimport LU from './code/Linear/LU';\r\nimport Cholesky from './code/Linear/Cholesky';\r\nimport Jacobi from './code/Linear/Jacobi';\r\nimport Conjugate from './code/Linear/Conjugate';\r\n\r\nimport Lagrange from './code/Interpolation/Lagrange';\r\nimport Spline from './code/Interpolation/Spline';\r\n\r\nimport LinearRegression from './code/Leastsqaures/LinearRegression';\r\nimport Multiple_LinearRegression from './code/Leastsqaures/Multiple_LinearRegression';\r\nimport PolynomialRegression from './code/Leastsqaures/PolynomialRegression';\r\n\r\n\r\n\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nclass App extends React.Component {\r\n  handleClick = e => {\r\n    console.log('click ', e);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <Layout>\r\n      <Sider width={250}>\r\n      <Menu\r\n        onClick={this.handleClick}\r\n        style={{ width: 256 }}\r\n        defaultSelectedKeys={['1']}\r\n        defaultOpenKeys={['sub1']}\r\n        mode=\"inline\"\r\n      >\r\n      <SubMenu key=\"sub2\" icon={<AppstoreOutlined />} title=\"Root of Eqaution\">\r\n          <Menu.Item key=\"5\">Bisection <Link to=\"/bisection\"></Link></Menu.Item>\r\n          <Menu.Item key=\"6\">False-position<Link to=\"/false-position\"></Link></Menu.Item>\r\n          <Menu.Item key=\"7\">One-point Iteration<Link to=\"/onepoint\"></Link></Menu.Item>\r\n          <Menu.Item key=\"8\">Newtonraphson<Link to=\"/Newton\"></Link></Menu.Item>\r\n          {/* <Menu.Item key=\"9\">Secant<Link to=\"/Secant\"></Link></Menu.Item> */}\r\n\r\n        </SubMenu>\r\n        <SubMenu key=\"sub4\" icon={<SettingOutlined />} title=\"Linear Equation\">\r\n          <Menu.Item key=\"10\">Cramer's Rule<Link to=\"/Cramerrule\"></Link></Menu.Item>\r\n          <Menu.Item key=\"11\">Guass Elimination<Link to=\"/GuassElimination\"></Link></Menu.Item>\r\n          <Menu.Item key=\"12\">GuassJordan<Link to=\"/GuassJordan\"></Link></Menu.Item>\r\n          <Menu.Item key=\"13\">LU<Link to=\"/LU\"></Link></Menu.Item>\r\n          <Menu.Item key=\"14\">Cholesky<Link to=\"/Cholesky\"></Link></Menu.Item>\r\n          <Menu.Item key=\"15\">Jacobi<Link to=\"/Jacobi\"></Link></Menu.Item>\r\n          <Menu.Item key=\"16\">Conjugate<Link to=\"/Conjugate\"></Link></Menu.Item>\r\n          \r\n        </SubMenu>\r\n\r\n        <SubMenu key=\"sub3\" icon={<AppstoreOutlined />} title=\"Interpolation\">\r\n          <Menu.Item key=\"17\">Newton divided-differences<Link to=\"/bisection=\"></Link></Menu.Item>\r\n          <Menu.Item key=\"18\">Lagrange polynomials<Link to=\"/Lagrange\"></Link></Menu.Item>\r\n          <Menu.Item key=\"19\">Spline interpolation<Link to=\"/Spline\"></Link></Menu.Item>\r\n        \r\n        </SubMenu>\r\n\r\n        <SubMenu key=\"sub5\" icon={<AppstoreOutlined />} title=\"Least sqaures Regresstion\">\r\n          <Menu.Item key=\"20\">Linear Regression<Link to=\"/LinearRegression\"></Link></Menu.Item>\r\n          <Menu.Item key=\"21\">polynomials Regresstion<Link to=\"/PolynomialRegression\"></Link></Menu.Item>\r\n          <Menu.Item key=\"22\">Multiple Linear Regression<Link to=\"/Multiple_LinearRegression\"></Link></Menu.Item>\r\n        \r\n        </SubMenu>\r\n      </Menu>\r\n      </Sider>\r\n      <Layout>\r\n        <Content>\r\n          <Route path=\"/bisection\" component={Bisection}></Route>  \r\n          <Route path=\"/False-position\" component={Falseposition}></Route>  \r\n          <Route path=\"/onepoint\" component={Onepoint}></Route>  \r\n          <Route path=\"/Newton\" component={Newton}></Route>  \r\n          {/* <Route path=\"/Secant\" component={Secant}></Route>   */}\r\n          <Route path=\"/Cramerrule\" component={Cramerrule}></Route>  \r\n          <Route path=\"/GuassElimination\" component={GuassElimination}></Route>  \r\n          <Route path=\"/GuassJordan\" component={GuassJordan}></Route>  \r\n          <Route path=\"/LU\" component={LU}></Route>  \r\n          <Route path=\"/Cholesky\" component={Cholesky}></Route>  \r\n          <Route path=\"/Jacobi\" component={Jacobi}></Route>  \r\n          <Route path=\"/Conjugate\" component={Conjugate}></Route>  \r\n          <Route path=\"/Lagrange\" component={Lagrange}></Route>  \r\n          <Route path=\"/Spline\" component={Spline}></Route>  \r\n          <Route path=\"/LinearRegression\" component={LinearRegression}></Route>  \r\n          <Route path=\"/Multiple_LinearRegression\" component={Multiple_LinearRegression}></Route>  \r\n          <Route path=\"/PolynomialRegression\" component={PolynomialRegression}></Route>  \r\n        </Content>\r\n      </Layout>\r\n      </Layout>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Root of equation\\Bisection.js",["97"],"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Root of equation\\False-position.js",[],"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Root of equation\\Secant.js",[],"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\Cholesky.js",["98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119"],"import React, { Component } from 'react'\r\n\r\nimport { Menu, Input, Row, Col, Button, Card, Table } from 'antd';\r\nimport { Carousel } from 'antd';\r\nimport { Layout, Breadcrumb } from 'antd';\r\nimport { range, compile, lusolve, format ,det} from 'mathjs';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst InputColor = {\r\n    background: \"\",\r\n    color: \"#003a8c\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\",\r\n    width: 300 ,\r\n    height:50\r\n    \r\n\r\n};\r\nvar A = [], B = [], matrixA = [], matrixB = [], output = [], decompose;\r\nclass Cholesky extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            row: 0,\r\n            column: 0,\r\n            showDimentionForm : true,\r\n            showDimentionButton: true,\r\n            showMatrixForm: false,\r\n            showMatrixButton: false,\r\n            showOutputCard: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.Lu = this.Lu.bind(this);\r\n    \r\n    }\r\n\r\n    Lu(n) {\r\n        this.initMatrix();\r\n        decompose = lusolve(A, B)\r\n        for (var i=0 ; i<decompose.length ; i++) {\r\n            output.push(Math.round(decompose[i]));\r\n            output.push(<br/>)\r\n        }\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n    }\r\n    \r\n    printFraction (value) {\r\n        return format(value, { fraction: 'ratio' })\r\n    }\r\n    Lu2(n) {\r\n        decompose = lusolve(A, B)\r\n        for (var i=0 ; i<decompose.length ; i++) {\r\n            output.push(Math.round(decompose[i]));\r\n            output.push(<br/>)\r\n        }\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n    }\r\n    \r\n    printFraction (value) {\r\n        return format(value, { fraction: 'ratio' })\r\n    }\r\n\r\n    createMatrix(row, column) {\r\n        for (var i=1 ; i<=row ; i++) {\r\n            for (var j=1 ; j<=column ; j++) {\r\n                matrixA.push(<Input style={{\r\n                    width: \"18%\",\r\n                    height: \"50%\", \r\n                    marginInlineEnd: \"5%\", \r\n                    marginBlockEnd: \"5%\",\r\n                    color: \"black\",\r\n                    fontSize: \"18px\",\r\n                    fontWeight: \"bold\"\r\n                }} \r\n                id={\"a\"+i+\"\"+j} key={\"a\"+i+\"\"+j} placeholder={\"a\"+i+\"\"+j} />)  \r\n            }\r\n            matrixA.push(<br/>)\r\n            matrixB.push(<Input style={{\r\n                width: \"18%\",\r\n                height: \"50%\", \r\n                marginInlineEnd: \"5%\", \r\n                marginBlockEnd: \"5%\",\r\n                color: \"black\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }} \r\n            id={\"b\"+i} key={\"b\"+i} placeholder={\"b\"+i} />)\r\n                \r\n            \r\n        }\r\n\r\n        this.setState({\r\n            showDimentionForm: false,\r\n            showDimentionButton: false,\r\n            showMatrixForm: true,\r\n            showMatrixButton: true\r\n        })\r\n        \r\n\r\n    }\r\n    initMatrix() {\r\n        for(var i=0 ; i<this.state.row ; i++) {\r\n            A[i] = []\r\n            for(var j=0 ; j<this.state.column ; j++) {\r\n                A[i][j] = (parseFloat(document.getElementById(\"a\"+(i+1)+\"\"+(j+1)).value));\r\n            }\r\n            B.push(parseFloat(document.getElementById(\"b\"+(i+1)).value));\r\n        }\r\n    }\r\n\r\n    dataapi = async()=>{\r\n        var response = await axios.get('http://localhost:3000/GuassElimination').then(res => {return res.data});\r\n        console.log(response)\r\n        this.setState({\r\n            A:response['A'],\r\n            B:response['B'],\r\n            row:response['row']\r\n        })\r\n        A = this.state.A;\r\n        B = this.state.B;\r\n        this.Lu2(this.state.row);\r\n        \r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Layout>\r\n                <body\r\n                        style={{ background: \"#ebe18d\", padding: \"90px\" , float:\"left\" }}\r\n                        onChange={this.handleChange}\r\n                    >\r\n                        {/*-----------------------------------------ปุ่มINPUTสมการ----------------------------------------------------*/}\r\n                        <Row gutter={[40, 40]}\r\n                            bordered={true}\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <Col span={10} offset={7}>\r\n\r\n                                <div>\r\n                                    <h2>Row</h2><Input size=\"large\" name=\"row\" ></Input>\r\n                                    <h2>Column</h2><Input size=\"large\" name=\"column\" ></Input>\r\n                                </div>\r\n                                <br></br>\r\n                                {this.state.showDimentionButton &&\r\n                                    <Button id=\"dimention_button\" onClick={\r\n                                        ()=>this.createMatrix(this.state.row, this.state.column)\r\n                                    } style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}\r\n                                    >\r\n                                        Submit<br></br>\r\n                                    </Button>\r\n                                }\r\n                                <Button id=\"submit_button\" onClick= {\r\n                                \r\n                                ()=>this.dataapi()\r\n                                 }  \r\n                                 style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>API</Button>\r\n\r\n                                {this.state.showMatrixButton &&\r\n                                    <Button\r\n                                        id=\"matrix_button\"\r\n                                        onClick={()=>this.Lu(this.state.row)} style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>\r\n                                        Submit\r\n                                    </Button>\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        <Row gutter={[40, 40]}>\r\n                            <Col span={8} offset={4}>\r\n                                <Card\r\n                                    title={<h3>Matrix</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixA}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                            <Col span={8}>\r\n                                <Card\r\n                                    title={<h3>Vector</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixB}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        {/*---------------------------------------------------------------------------------------------*/}\r\n                        <Row gutter={[2, 2]}>\r\n                            <Col span={10} offset={7}>\r\n                                <Card\r\n                                    title={<h3>Outpot</h3>}\r\n                                    bordered={true}\r\n                                    onChange={this.handleChange} id=\"answerCard\">\r\n                                    <p style={{fontSize: \"24px\", fontWeight: \"bold\"}}>{output}</p>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </body>\r\n                </Layout>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default Cholesky;","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Root of equation\\One-pointIteration.js",[],"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\LU.js",["120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139"],"import React, { Component } from 'react'\r\n\r\nimport { Menu, Input, Row, Col, Button, Card, Table } from 'antd';\r\nimport { Carousel } from 'antd';\r\nimport { Layout, Breadcrumb } from 'antd';\r\nimport { range, compile, lusolve, format } from 'mathjs';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst InputColor = {\r\n    background: \"\",\r\n    color: \"#003a8c\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\",\r\n    width: 300 ,\r\n    height:50\r\n    \r\n\r\n};\r\nvar A = [], B = [], matrixA = [], matrixB = [], output = [], decompose, output2 = [];\r\nclass LU extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            row: 0,\r\n            column: 0,\r\n            showDimentionForm: true,\r\n            showDimentionButton: true,\r\n            showMatrixForm: false,\r\n            showMatrixButton: false,\r\n            showOutputCard: true\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.Lu = this.Lu.bind(this);\r\n\r\n    }\r\n\r\n    Lu(n) {\r\n        this.initMatrix();\r\n        decompose = lusolve(A, B)\r\n        for (var i = 0; i < decompose.length; i++) {\r\n            output.push(<h2>X<sub>{i}</sub>=&nbsp;&nbsp;{Math.round(decompose[i])}</h2>);\r\n            output2.push(<h2>X<sub>{i}</sub>=&nbsp;&nbsp;{Math.round(decompose[i])}</h2>);\r\n            output.push(<br />)\r\n            output2.push(<br />)\r\n        }\r\n        console.log(output);\r\n        this.setState({\r\n            showOutputCard: true,\r\n            showMatrixButton: false\r\n        });\r\n\r\n\r\n    }\r\n    Lu2(n) {\r\n        \r\n        decompose = lusolve(A, B)\r\n        for (var i = 0; i < decompose.length; i++) {\r\n            output.push(<h2>X<sub>{i}</sub>=&nbsp;&nbsp;{Math.round(decompose[i])}</h2>);\r\n            output2.push(<h2>X<sub>{i}</sub>=&nbsp;&nbsp;{Math.round(decompose[i])}</h2>);\r\n            output.push(<br />)\r\n            output2.push(<br />)\r\n        }\r\n        console.log(output);\r\n        this.setState({\r\n            showOutputCard: true,\r\n            showMatrixButton: false\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    printFraction(value) {\r\n        return format(value, { fraction: 'ratio' })\r\n    }\r\n\r\n\r\n    createMatrix(row, column) {\r\n        for (var i = 1; i <= row; i++) {\r\n            for (var j = 1; j <= column; j++) {\r\n                matrixA.push(<Input style={{\r\n                    width: \"18%\",\r\n                    height: \"50%\",\r\n                    marginInlineEnd: \"5%\",\r\n                    marginBlockEnd: \"5%\",\r\n                    color: \"black\",\r\n                    fontSize: \"18px\",\r\n                    fontWeight: \"bold\"\r\n                }}\r\n                    id={\"a\" + i + \"\" + j} key={\"a\" + i + \"\" + j} placeholder={\"a\" + i + \"\" + j} />)\r\n            }\r\n            matrixA.push(<br />)\r\n            matrixB.push(<Input style={{\r\n                width: \"18%\",\r\n                height: \"50%\",\r\n                marginInlineEnd: \"5%\",\r\n                marginBlockEnd: \"5%\",\r\n                color: \"black\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }}\r\n                id={\"b\" + i} key={\"b\" + i} placeholder={\"b\" + i} />)\r\n\r\n\r\n        }\r\n        this.setState({\r\n            showDimentionForm: false,\r\n            showDimentionButton: false,\r\n            showMatrixForm: true,\r\n            showMatrixButton: true,\r\n            showoldMatrixButton: false\r\n        })\r\n\r\n\r\n    }\r\n    initMatrix() {\r\n        var c = [],d = [];\r\n        for (var i = 0; i < this.state.row; i++) {\r\n            c[i] = []\r\n            for (var j = 0; j < this.state.column; j++) {\r\n                c[i][j] = (parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value));\r\n            }\r\n            d.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\r\n        }\r\n        A = c;\r\n        B = d;\r\n    }\r\n    dataapi = async()=>{\r\n        var response = await axios.get('http://localhost:3000/GuassElimination').then(res => {return res.data});\r\n        console.log(response)\r\n        this.setState({\r\n            A:response['A'],\r\n            B:response['B'],\r\n            row:response['row']\r\n        })\r\n        A = this.state.A;\r\n        B = this.state.B;\r\n        this.Lu2(this.state.row);\r\n        \r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Layout>\r\n                <body\r\n                        style={{ background: \"#ebe18d\", padding: \"90px\" , float:\"left\" }}\r\n                        onChange={this.handleChange}\r\n                    >\r\n                        {/*-----------------------------------------ปุ่มINPUTสมการ----------------------------------------------------*/}\r\n                        <Row gutter={[40, 40]}\r\n                            bordered={true}\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <Col span={10} offset={7}>\r\n\r\n                                <div>\r\n                                    <h2>Row</h2><Input size=\"large\" name=\"row\" ></Input>\r\n                                    <h2>Column</h2><Input size=\"large\" name=\"column\" ></Input>\r\n                                </div>\r\n                                <br></br>\r\n                                {this.state.showDimentionButton &&\r\n                                    <Button id=\"dimention_button\" onClick={\r\n                                        ()=>this.createMatrix(this.state.row, this.state.column)\r\n                                    } style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}\r\n                                    >\r\n                                        Submit<br></br>\r\n                                    </Button>\r\n                                }\r\n\r\n\r\n                                {this.state.showMatrixButton &&\r\n                                    <Button\r\n                                        id=\"matrix_button\"\r\n                                        onClick={()=>this.Lu(this.state.row)} style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>\r\n                                        Submit\r\n                                    </Button>\r\n                                }\r\n                                <Button id=\"submit_button\" onClick= {\r\n                                \r\n                                ()=>this.dataapi()\r\n                                 }  \r\n                                 style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>API</Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        <Row gutter={[40, 40]}>\r\n                            <Col span={8} offset={4}>\r\n                                <Card\r\n                                    title={<h3>Matrix</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixA}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                            <Col span={8}>\r\n                                <Card\r\n                                    title={<h3>Vector</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixB}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        {/*---------------------------------------------------------------------------------------------*/}\r\n                        <Row gutter={[2, 2]}>\r\n                            <Col span={10} offset={7}>\r\n                                <Card\r\n                                    title={<h3>Output</h3>}\r\n                                    bordered={true}\r\n                                    onChange={this.handleChange} id=\"answerCard\">\r\n                                    <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{output}</p>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </body>\r\n                </Layout>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default LU;","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Root of equation\\Newtonraphson.js",[],"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\GuassElimination.js",["140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162"],"import React, { Component } from 'react'\r\n\r\nimport { Menu, Input, Row, Col, Button, Card, Table } from 'antd';\r\nimport { Carousel } from 'antd';\r\nimport { Layout, Breadcrumb } from 'antd';\r\nimport { range, compile, lusolve, format ,det} from 'mathjs';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst InputColor = {\r\n    background: \"\",\r\n    color: \"#003a8c\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\",\r\n    width: 300 ,\r\n    height:50\r\n    \r\n\r\n};\r\nvar A = [], B = [], X, matrixA = [], matrixB = [], output = []\r\nclass Appc3 extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            row: 0,\r\n            column: 0,\r\n            showDimentionForm : true,\r\n            showDimentionButton: true,\r\n            showMatrixForm: false,\r\n            showMatrixButton: false,\r\n            showOutputCard: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.gauss = this.gauss.bind(this);\r\n    \r\n    }\r\n\r\n    gauss(n) {\r\n        this.initMatrix()\r\n        if (A[0][0] === 0) { //pivoting\r\n            var tempRow = JSON.parse(JSON.stringify(A[0]));\r\n            var tempColumn = B[0];\r\n            A[0] = A[1];\r\n            A[1] = tempRow;\r\n            B[0] = B[1];\r\n            B[1] = tempColumn;\r\n        }\r\n        //Forward eliminated\r\n        for(var k=0 ; k<n ; k++) {\r\n            for(var i=k+1 ; i<n ; i++) {\r\n                var factor = A[i][k] / A[k][k];\r\n                for (var j=k ; j<n ; j++) {\r\n                    A[i][j] = A[i][j] - factor*A[k][j];\r\n                }\r\n                B[i] = B[i] - factor*B[k];\r\n\r\n            }\r\n        }\r\n        alert(A)\r\n        alert(B)\r\n        //Backward Substitution\r\n        X = new Array(n);\r\n        X[n-1] = B[n-1] / A[n-1][n-1]; //find Xn\r\n        for(i=n-2 ; i>=0 ; i--) { //find Xn-1 to X1\r\n            var sum = B[i];\r\n            for (j=i+1 ; j<n ; j++) {\r\n                sum = sum - A[i][j]*X[j];\r\n            }\r\n            X[i] = Math.round(sum / A[i][i]);\r\n        }    \r\n        for (i=0 ; i<n ; i++) {\r\n            output.push(\"x\"+(i+1)+\" = \"+X[i]);\r\n            output.push(<br/>)\r\n        }\r\n\r\n\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n\r\n      \r\n    }\r\n    gauss2(n) {\r\n        console.log(A)\r\n        if (A[0][0] === 0) { //pivoting\r\n            var tempRow = JSON.parse(JSON.stringify(A[0]));\r\n            var tempColumn = B[0];\r\n            A[0] = A[1];\r\n            A[1] = tempRow;\r\n            B[0] = B[1];\r\n            B[1] = tempColumn;\r\n        }\r\n        //Forward eliminated\r\n        for(var k=0 ; k<n ; k++) {\r\n            for(var i=k+1 ; i<n ; i++) {\r\n                var factor = A[i][k] / A[k][k];\r\n                for (var j=k ; j<n ; j++) {\r\n                    A[i][j] = A[i][j] - factor*A[k][j];\r\n                }\r\n                B[i] = B[i] - factor*B[k];\r\n\r\n            }\r\n        }\r\n        alert(A)\r\n        alert(B)\r\n        //Backward Substitution\r\n        X = new Array(n);\r\n        X[n-1] = B[n-1] / A[n-1][n-1]; //find Xn\r\n        for(i=n-2 ; i>=0 ; i--) { //find Xn-1 to X1\r\n            var sum = B[i];\r\n            for (j=i+1 ; j<n ; j++) {\r\n                sum = sum - A[i][j]*X[j];\r\n            }\r\n            X[i] = Math.round(sum / A[i][i]);\r\n        }    \r\n        for (i=0 ; i<n ; i++) {\r\n            output.push(\"x\"+(i+1)+\" = \"+X[i]);\r\n            output.push(<br/>)\r\n        }\r\n\r\n\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n\r\n      \r\n    }\r\n    createMatrix(row, column) {\r\n        A = []\r\n        B = []\r\n        X = [] \r\n        matrixA = []\r\n        matrixB = []\r\n        output = []\r\n        for (var i=1 ; i<=row ; i++) {\r\n            for (var j=1 ; j<=column ; j++) {\r\n                matrixA.push(<Input style={{\r\n                    width: \"18%\",\r\n                    height: \"50%\", \r\n                    marginInlineEnd: \"5%\", \r\n                    marginBlockEnd: \"5%\",\r\n                    color: \"black\",\r\n                    fontSize: \"18px\",\r\n                    fontWeight: \"bold\"\r\n                }} \r\n                id={\"a\"+i+\"\"+j} key={\"a\"+i+\"\"+j} placeholder={\"a\"+i+\"\"+j} />)  \r\n            }\r\n            matrixA.push(<br/>)\r\n            matrixB.push(<Input style={{\r\n                width: \"18%\",\r\n                height: \"50%\", \r\n                marginInlineEnd: \"5%\", \r\n                marginBlockEnd: \"5%\",\r\n                color: \"black\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }} \r\n            id={\"b\"+i} key={\"b\"+i} placeholder={\"b\"+i} />)\r\n                \r\n            \r\n        }\r\n\r\n        this.setState({\r\n            showDimentionForm: false,\r\n            showDimentionButton: false,\r\n            showMatrixForm: true,\r\n            showMatrixButton: true\r\n        })\r\n        \r\n\r\n    }\r\n    initMatrix() {\r\n        for(var i=0 ; i<this.state.row ; i++) {\r\n            A[i] = []\r\n            for(var j=0 ; j<this.state.column ; j++) {\r\n                A[i][j] = (parseFloat(document.getElementById(\"a\"+(i+1)+\"\"+(j+1)).value));\r\n            }\r\n            B.push(parseFloat(document.getElementById(\"b\"+(i+1)).value));\r\n        }\r\n    }\r\n    dataapi = async()=>{\r\n        var response = await axios.get('http://localhost:3000/GuassElimination').then(res => {return res.data});\r\n        console.log(response)\r\n        this.setState({\r\n            A:response['A'],\r\n            B:response['B'],\r\n            row:response['row']\r\n        })\r\n        A = this.state.A;\r\n        B = this.state.B;\r\n        this.gauss2(this.state.row);\r\n        \r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Layout>\r\n                <body\r\n                        style={{ background: \"#ebe18d\", padding: \"90px\" , float:\"left\" }}\r\n                        onChange={this.handleChange}\r\n                    >\r\n                     <h2 style={{color: \"#003a8c\", fontWeight: \"bold\",fontSize: \"35px\",textAlign:\"center\"}}>Guass Elimination</h2>\r\n                        {/*-----------------------------------------ปุ่มINPUTสมการ----------------------------------------------------*/}\r\n                        <Row gutter={[40, 40]}\r\n                            bordered={true}\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <Col span={10} offset={7}>\r\n\r\n                                <div>\r\n                                    <h2>Row</h2><Input size=\"large\" name=\"row\" ></Input>\r\n                                    <h2>Column</h2><Input size=\"large\" name=\"column\" ></Input>\r\n                                </div>\r\n                                <br></br>\r\n                                {this.state.showDimentionButton &&\r\n                                    <Button id=\"dimention_button\" onClick={\r\n                                        ()=>this.createMatrix(this.state.row, this.state.column)\r\n                                    } style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}\r\n                                    >\r\n                                        Submit<br></br>\r\n                                    </Button>\r\n                                }\r\n                                <Button id=\"submit_button\" onClick= {\r\n                                \r\n                                ()=>this.dataapi()\r\n                                 }  \r\n                                 style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>API</Button>\r\n\r\n                                {this.state.showMatrixButton &&\r\n                                    <Button\r\n                                        id=\"matrix_button\"\r\n                                        onClick={()=>this.gauss(this.state.row)} style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>\r\n                                        Submit\r\n                                    </Button>\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        <Row gutter={[40, 40]}>\r\n                            <Col span={8} offset={4}>\r\n                                <Card\r\n                                    title={<h3>Matrix</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixA}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                            <Col span={8}>\r\n                                <Card\r\n                                    title={<h3>Vector</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixB}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        {/*---------------------------------------------------------------------------------------------*/}\r\n                        <Row gutter={[2, 2]}>\r\n                            <Col span={10} offset={7}>\r\n                                <Card\r\n                                    title={<h3>Outpot</h3>}\r\n                                    bordered={true}\r\n                                    onChange={this.handleChange} id=\"answerCard\">\r\n                                    <p style={{fontSize: \"24px\", fontWeight: \"bold\"}}>{output}</p>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </body>\r\n                </Layout>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default Appc3;","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\Cramerrule.js",["163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184"],"import React, { Component } from 'react'\r\n\r\nimport { Menu, Input, Row, Col, Button, Card, Table } from 'antd';\r\nimport { Carousel } from 'antd';\r\nimport { Layout, Breadcrumb } from 'antd';\r\nimport { range, compile, lusolve, format ,det} from 'mathjs';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst InputColor = {\r\n    background: \"\",\r\n    color: \"#003a8c\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\",\r\n    width: 300 ,\r\n    height:50\r\n    \r\n\r\n};\r\nvar A = [], B = [], answer = [], matrixA = [], matrixB = []\r\nclass Cramerrule extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            row: parseInt(0),\r\n            column: parseInt(0),\r\n            showDimentionForm: true,\r\n            showDimentionButton: true,\r\n            showMatrixForm: false,\r\n            showMatrixButton: false,\r\n            showOutputCard: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.cramer = this.cramer.bind(this);\r\n\r\n    }\r\n\r\n    cramer() {\r\n        this.initMatrix();\r\n        var counter = 0;\r\n        // eslint-disable-next-line eqeqeq\r\n        while (counter != this.state.row) {\r\n            var transformMatrix = JSON.parse(JSON.stringify(A));//Deep copy\r\n            for (var i = 0; i < this.state.row; i++) {\r\n                for (var j = 0; j < this.state.column; j++) {\r\n                    if (j === counter) {\r\n                        transformMatrix[i][j] = B[i]\r\n                        break;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n            counter++;\r\n            answer.push(<h2>X<sub>{counter}</sub>=&nbsp;&nbsp;{Math.round(det(transformMatrix)) / Math.round(det(A))}</h2>)\r\n            answer.push(<br />)\r\n\r\n\r\n\r\n        }\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n\r\n\r\n    }\r\n    cramer2() {\r\n        var counter = 0;\r\n        // eslint-disable-next-line eqeqeq\r\n        while (counter != this.state.row) {\r\n            var transformMatrix = JSON.parse(JSON.stringify(A));//Deep copy\r\n            for (var i = 0; i < this.state.row; i++) {\r\n                for (var j = 0; j < this.state.column; j++) {\r\n                    if (j === counter) {\r\n                        transformMatrix[i][j] = B[i]\r\n                        break;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n            counter++;\r\n            answer.push(<h2>X<sub>{counter}</sub>=&nbsp;&nbsp;{Math.round(det(transformMatrix)) / Math.round(det(A))}</h2>)\r\n            answer.push(<br />)\r\n\r\n\r\n\r\n        }\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n\r\n\r\n    }\r\n    createMatrix(row, column) {\r\n        for (var i = 1; i <= row; i++) {\r\n            for (var j = 1; j <= column; j++) {\r\n                matrixA.push(<Input style={{\r\n                    width: \"18%\",\r\n                    height: \"50%\",\r\n                    marginInlineEnd: \"5%\",\r\n                    marginBlockEnd: \"5%\",\r\n                    color: \"black\",\r\n                    fontSize: \"18px\",\r\n                    fontWeight: \"bold\"\r\n                }}\r\n                    id={\"a\" + i + \"\" + j} key={\"a\" + i + \"\" + j} placeholder={\"a\" + i + \"\" + j} />)\r\n            }\r\n            matrixA.push(<br />)\r\n            matrixB.push(<Input style={{\r\n                width: \"18%\",\r\n                height: \"50%\",\r\n                marginInlineEnd: \"5%\",\r\n                marginBlockEnd: \"5%\",\r\n                color: \"black\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }}\r\n                id={\"b\" + i} key={\"b\" + i} placeholder={\"b\" + i} />)\r\n        }\r\n\r\n        this.setState({\r\n            showDimentionForm: false,\r\n            showDimentionButton: false,\r\n            showMatrixForm: true,\r\n            showMatrixButton: true\r\n        })\r\n\r\n\r\n    }\r\n    initMatrix() {\r\n        for (var i = 0; i < this.state.row; i++) {\r\n            A[i] = []\r\n            for (var j = 0; j < this.state.column; j++) {\r\n                A[i][j] = (parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value));\r\n            }\r\n            B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\r\n        }\r\n    }\r\n    dataapi = async()=>{\r\n        var response = await axios.get('http://localhost:3000/GuassElimination').then(res => {return res.data});\r\n        console.log(response)\r\n        this.setState({\r\n            A:response['A'],\r\n            B:response['B'],\r\n            row:response['row']\r\n        })\r\n        A = this.state.A;\r\n        B = this.state.B;\r\n        this.cramer2(this.state.row);\r\n        \r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Layout>\r\n                    <body\r\n                        style={{ background: \"#ebe18d\", padding: \"90px\" , float:\"left\" }}\r\n                        onChange={this.handleChange}\r\n                    >\r\n                     <h2 style={{color: \"#003a8c\", fontWeight: \"bold\",fontSize: \"35px\",textAlign:\"center\"}}>Cramer's rule</h2>\r\n                        {/*-----------------------------------------ปุ่มINPUTสมการ----------------------------------------------------*/}\r\n                        <Row gutter={[40, 40]}\r\n                            bordered={true}\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <Col span={10} offset={7}>\r\n\r\n                                <div>\r\n                                    <h2>Row</h2><Input size=\"large\" name=\"row\" ></Input>\r\n                                    <h2>Column</h2><Input size=\"large\" name=\"column\" ></Input>\r\n                                </div>\r\n                                <br></br>\r\n                                {this.state.showDimentionButton &&\r\n                                    \r\n                                    <Button id=\"dimention_button\" onClick={\r\n                                        () => this.createMatrix(this.state.row, this.state.column)\r\n                                    }\r\n                                    style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>\r\n                                        Submit<br></br>\r\n                                    </Button>\r\n                                }\r\n\r\n                                {this.state.showMatrixButton &&\r\n                                    <Button\r\n                                        id=\"matrix_button\"\r\n                                        onClick={()=>this.cramer()} style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>\r\n                                        Submit\r\n                                    </Button>\r\n                                }\r\n\r\n                                <Button id=\"submit_button\" onClick= {\r\n                                \r\n                                ()=>this.dataapi()\r\n                                 }  \r\n                                 style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>API</Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        <Row gutter={[40, 40]}>\r\n                            <Col span={8} offset={4}>\r\n                                <Card\r\n                                    title={<h3>Matrix</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixA}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                            <Col span={8}>\r\n                                <Card\r\n                                    title={<h3>Vector</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixB}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        {/*---------------------------------------------------------------------------------------------*/}\r\n                        <Row gutter={[2, 2]}>\r\n                            <Col span={10} offset={7}>\r\n                                <Card\r\n                                    title={<h3>Output</h3>}\r\n                                    bordered={true}\r\n                                    onChange={this.handleChange} id=\"answerCard\">\r\n                                    <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{answer}</p>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </body>\r\n                </Layout>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default Cramerrule;","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\Conjugate.js",["185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],"import React, { Component } from 'react'\r\nimport { Menu, Input, Row, Col, Button, Card, Table } from 'antd';\r\nimport { Carousel } from 'antd';\r\nimport { range, compile, lusolve, format, det ,subtract,multiply,transpose,add} from 'mathjs';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\nimport { Layout, Breadcrumb } from 'antd';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst InputColor = {\r\n    background: \"\",\r\n    color: \"#003a8c\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\",\r\n    width: 300 ,\r\n    height:50\r\n    \r\n\r\n};\r\nvar A = [], B = [], matrixA = [], matrixB = [], matrixX = [], x, epsilon, dataInTable = [], count = 1, output\r\nvar columns = [\r\n    {\r\n        title: \"Iteration\",\r\n        dataIndex: \"iteration\",\r\n        key: \"iteration\"\r\n    },\r\n    {\r\n        title: \"λ\",\r\n        dataIndex: \"lambda\",\r\n        key: \"lambda\"\r\n    },\r\n    {\r\n        title: \"{X}\",\r\n        dataIndex: \"X\",\r\n        key: \"X\"\r\n    },\r\n    {\r\n        title: \"Error\",\r\n        dataIndex: \"error\",\r\n        key: \"error\"\r\n    }\r\n];\r\n\r\nclass Conjugate extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            row: 0,\r\n            column: 0,\r\n            showDimentionForm: true,\r\n            showDimentionButton: true,\r\n            showMatrixForm: false,\r\n            showMatrixButton: false,\r\n            showOutputCard: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.conjugate_gradient = this.conjugate_gradient.bind(this);\r\n\r\n    }\r\n    positive_definite(dimention) {\r\n        var tempMatrix = []\r\n        for (var i = 0; i < dimention; i++) {\r\n            tempMatrix[i] = []\r\n            for (var j = 0; j < dimention; j++) {\r\n                tempMatrix[i][j] = A[i][j];\r\n            }\r\n        }\r\n        if (det(tempMatrix) <= 0) {\r\n            return false;\r\n        }\r\n        if (dimention !== this.state.row - 1) {\r\n            return this.positive_definite(++dimention);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    conjugate_gradient(row) {\r\n        this.initMatrix();\r\n        // if (!this.positive_definite(row)) {\r\n        //     output = \"This matrix doesn't positive definite\"\r\n        //     console.log(\"b\");\r\n        //     this.setState({\r\n        //         showOutputCard: true\r\n        //     });\r\n        //     return false;\r\n        // }\r\n        //find {R0}\r\n        var R = subtract(multiply(A, x), B);\r\n        console.log(R)\r\n        //find D0\r\n        var D = multiply(R, -1);\r\n        console.log(D)\r\n        do {\r\n            //find λ\r\n            var λ = (multiply(multiply(transpose(D), R), -1)) /\r\n                (multiply(multiply(transpose(D), A), D))\r\n            console.log(λ)\r\n            /*------------------------------------------------------------------*/\r\n\r\n            //find new {X}\r\n            x = add(x, multiply(λ, D));\r\n            console.log(x)\r\n            //find new {R}\r\n            R = subtract(multiply(A, x), B);\r\n            console.log(R)\r\n            //find epsilon\r\n            epsilon = Math.sqrt(multiply(transpose(R), R)).toFixed(8);\r\n            this.appendTable(λ, JSON.stringify(x).split(',').join(\",\\n\"), epsilon);\r\n            console.log(epsilon)\r\n            var α = (multiply(multiply(transpose(R), A), D)) /\r\n                multiply(transpose(D), multiply(A, D)).toFixed(8);\r\n            console.log(α)\r\n            D = add(multiply(R, -1),multiply(α, D))\r\n            console.log(D)\r\n        } while (epsilon > 0.000001);\r\n\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n\r\n\r\n    }\r\n    createMatrix(row, column) {\r\n        A = []\r\n        B = []\r\n        matrixA = []\r\n        matrixB = []\r\n        matrixX = []\r\n        x = []\r\n        for (var i = 1; i <= row; i++) {\r\n            for (var j = 1; j <= column; j++) {\r\n                matrixA.push(<Input style={{\r\n                    width: \"18%\",\r\n                    height: \"50%\",\r\n                    marginInlineEnd: \"5%\",\r\n                    marginBlockEnd: \"5%\",\r\n                    color: \"black\",\r\n                    fontSize: \"18px\",\r\n                    fontWeight: \"bold\"\r\n                }}\r\n                    id={\"a\" + i + \"\" + j} key={\"a\" + i + \"\" + j} placeholder={\"a\" + i + \"\" + j} />)\r\n            }\r\n            matrixA.push(<br />)\r\n            matrixB.push(<Input style={{\r\n                width: \"18%\",\r\n                height: \"50%\",\r\n                marginInlineEnd: \"5%\",\r\n                marginBlockEnd: \"5%\",\r\n                color: \"black\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }}\r\n                id={\"b\" + i} key={\"b\" + i} placeholder={\"b\" + i} />)\r\n            matrixX.push(<Input style={{\r\n                width: \"18%\",\r\n                height: \"50%\",\r\n                marginInlineEnd: \"5%\",\r\n                marginBlockEnd: \"5%\",\r\n                color: \"black\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }}\r\n                id={\"x\" + i} key={\"x\" + i} placeholder={\"x\" + i} />)\r\n\r\n\r\n        }\r\n\r\n        this.setState({\r\n            showDimentionForm: false,\r\n            showDimentionButton: false,\r\n            showMatrixForm: true,\r\n            showMatrixButton: true\r\n        })\r\n        console.log(matrixA);\r\n\r\n\r\n\r\n    }\r\n    initMatrix() {\r\n        for (var i = 0; i < this.state.row; i++) {\r\n            A[i] = []\r\n            \r\n            for (var j = 0; j < this.state.column; j++) {\r\n                // console.log(parseFloat(document.getElementById(\"x\" + (i + 1)).value))\r\n                A[i][j] = parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value)\r\n            }\r\n            B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\r\n            x.push(parseFloat(document.getElementById(\"x\" + (i + 1)).value));\r\n        }\r\n    }\r\n    appendTable(lambda, x, error) {\r\n        console.log(dataInTable)\r\n        dataInTable.push({\r\n            iteration: count++,\r\n            lambda: lambda,\r\n            X: x,\r\n            error: error\r\n        });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Layout>\r\n                <body\r\n                        style={{ background: \"#ebe18d\", padding: \"90px\" , float:\"left\" }}\r\n                        onChange={this.handleChange}\r\n                    >\r\n\r\n                        {/*-----------------------------------------ปุ่มINPUTสมการ----------------------------------------------------*/}\r\n                        <Row gutter={[40, 40]}\r\n                            bordered={true}\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <Col span={10} offset={7}>\r\n\r\n                                <div>\r\n                                    <h2>Row</h2><Input size=\"large\" name=\"row\" ></Input>\r\n                                    <h2>Column</h2><Input size=\"large\" name=\"column\" ></Input>\r\n                                </div>\r\n                                <br></br>\r\n                                {this.state.showDimentionButton &&\r\n                                    <Button id=\"dimention_button\" onClick={\r\n                                        () => { this.createMatrix(this.state.row, this.state.column) }\r\n                                    } style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}\r\n                                    >\r\n                                        Submit<br></br>\r\n                                    </Button>\r\n                                }\r\n\r\n                                {this.state.showMatrixButton &&\r\n                                    <Button\r\n                                        id=\"matrix_button\"\r\n                                        onClick={()=>this.conjugate_gradient(parseInt(this.state.row))} style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>\r\n                                        Submit\r\n                                    </Button>\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        <Row gutter={[40, 40]}>\r\n                            <Col span={8} offset={4}>\r\n                                <Card\r\n                                    title={<h3>Matrix</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixA}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                            <Col span={8}>\r\n                                <Card\r\n                                    title={<h3>Vector</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixB}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                            <Col span={8}>\r\n                                <Card\r\n                                    title={<h3>Vector</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixX}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n\r\n                        {/*---------------------------------------------------------------------------------------------*/}\r\n                        <Row gutter={[2, 2]}>\r\n                            <Col span={10} offset={7}>\r\n                            {this.state.showOutputCard &&\r\n                                <Card\r\n                                    title={<h3>Outpot</h3>}\r\n                                    bordered={true}\r\n                                    onChange={this.handleChange} id=\"answerCard\">\r\n                                    <Table columns={columns} dataSource={dataInTable} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\", overflowX: \"scroll\" }}\r\n                                    ></Table>\r\n                                </Card>\r\n                            }\r\n                            </Col>\r\n                        </Row>\r\n                    </body>\r\n                </Layout>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default Conjugate;","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Interpolation\\Spline.js",["207","208","209","210","211","212","213","214"],"import React, { Component } from 'react';\r\nimport { Card, Input, Button, Row, Col, Table } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { compile } from 'mathjs';\r\nimport { Layout, Breadcrumb } from 'antd';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst InputStyle = {\r\n    background: \"#1890ff\",\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"24px\"\r\n\r\n};\r\nvar columns = [\r\n    {\r\n        title: \"No.\",\r\n        dataIndex: \"no\",\r\n        key: \"no\"\r\n    },\r\n    {\r\n        title: \"X\",\r\n        dataIndex: \"x\",\r\n        key: \"x\"\r\n    },\r\n    {\r\n        title: \"Y\",\r\n        dataIndex: \"y\",\r\n        key: \"y\"\r\n    }\r\n];\r\nvar x = [], y = [], tableTag = [], answer\r\n\r\nclass Appc extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            nPoints: 0,\r\n            X: 0,\r\n            showInputForm: true,\r\n            showInputButton: true,\r\n            showTableInput: false,\r\n            showTableButton: false,\r\n            showOutputCard: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n    }\r\n\r\n\r\n    createTableInput(n) {\r\n        for (var i = 1; i <= n; i++) {\r\n            x.push(<Input style={{\r\n                width: \"100%\",\r\n                height: \"50%\",\r\n                marginInlineEnd: \"5%\",\r\n                marginBlockEnd: \"5%\",\r\n                color: \"black\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }}\r\n                id={\"x\" + i} key={\"x\" + i} placeholder={\"x\" + i} />);\r\n            y.push(<Input style={{\r\n                width: \"100%\",\r\n                height: \"50%\",\r\n                marginInlineEnd: \"5%\",\r\n                marginBlockEnd: \"5%\",\r\n                color: \"black\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }}\r\n                id={\"y\" + i} key={\"y\" + i} placeholder={\"y\" + i} />);\r\n            tableTag.push({\r\n                no: i,\r\n                x: x[i - 1],\r\n                y: y[i - 1]\r\n            });\r\n        }\r\n\r\n\r\n        this.setState({\r\n            showInputForm: false,\r\n            showInputButton: false,\r\n            showTableInput: true,\r\n            showTableButton: true\r\n        })\r\n    }\r\n    initialValue(X) {\r\n        x = []\r\n        y = []\r\n        for (var i = 0; i < this.state.nPoints; i++) {\r\n            x[i] = parseFloat(document.getElementById(\"x\" + (i + 1)).value);\r\n            y[i] = parseFloat(document.getElementById(\"y\" + (i + 1)).value);\r\n        }\r\n        answer = this.spline(X, x, y)\r\n    }\r\n    spline(x, xs, ys) {\r\n        var ks = xs.map(function () { return 0 })\r\n        ks = this.getNaturalKs(xs, ys, ks)\r\n        var i = 1;\r\n        while (xs[i] < x) i++;\r\n        var t = (x - xs[i - 1]) / (xs[i] - xs[i - 1]);\r\n        var a = ks[i - 1] * (xs[i] - xs[i - 1]) - (ys[i] - ys[i - 1]);\r\n        var b = -ks[i] * (xs[i] - xs[i - 1]) + (ys[i] - ys[i - 1]);\r\n        var q = (1 - t) * ys[i - 1] + t * ys[i] + t * (1 - t) * (a * (1 - t) + b * t);\r\n        console.log(q)\r\n        this.setState({\r\n            showOutputCard: true\r\n        })\r\n\r\n        return q;\r\n    }\r\n\r\n    getNaturalKs(xs, ys, ks) {\r\n        var n = xs.length - 1;\r\n        var A = this.zerosMat(n + 1, n + 2);\r\n\r\n        for (var i = 1; i < n; i++)  // rows\r\n        {\r\n            A[i][i - 1] = 1 / (xs[i] - xs[i - 1]);\r\n            A[i][i] = 2 * (1 / (xs[i] - xs[i - 1]) + 1 / (xs[i + 1] - xs[i]));\r\n            A[i][i + 1] = 1 / (xs[i + 1] - xs[i]);\r\n            A[i][n + 1] = 3 * ((ys[i] - ys[i - 1]) / ((xs[i] - xs[i - 1]) * (xs[i] - xs[i - 1])) + (ys[i + 1] - ys[i]) / ((xs[i + 1] - xs[i]) * (xs[i + 1] - xs[i])));\r\n        }\r\n\r\n        A[0][0] = 2 / (xs[1] - xs[0]);\r\n        A[0][1] = 1 / (xs[1] - xs[0]);\r\n        A[0][n + 1] = 3 * (ys[1] - ys[0]) / ((xs[1] - xs[0]) * (xs[1] - xs[0]));\r\n\r\n        A[n][n - 1] = 1 / (xs[n] - xs[n - 1]);\r\n        A[n][n] = 2 / (xs[n] - xs[n - 1]);\r\n        A[n][n + 1] = 3 * (ys[n] - ys[n - 1]) / ((xs[n] - xs[n - 1]) * (xs[n] - xs[n - 1]));\r\n\r\n        return this.solve(A, ks);\r\n    }\r\n\r\n    solve(A, ks) {\r\n        var m = A.length;\r\n        for (var k = 0; k < m; k++)  // column\r\n        {\r\n            // pivot for column\r\n            var i_max = 0; var vali = Number.NEGATIVE_INFINITY;\r\n            for (var i = k; i < m; i++) if (A[i][k] > vali) { i_max = i; vali = A[i][k]; }\r\n            this.swapRows(A, k, i_max);\r\n\r\n            // for all rows below pivot\r\n            for (i = k + 1; i < m; i++) {\r\n                for (var j = k + 1; j < m + 1; j++)\r\n                    A[i][j] = A[i][j] - A[k][j] * (A[i][k] / A[k][k]);\r\n                A[i][k] = 0;\r\n            }\r\n        }\r\n        for (i = m - 1; i >= 0; i--) // rows = columns\r\n        {\r\n            var v = A[i][m] / A[i][i];\r\n            ks[i] = v;\r\n            for (j = i - 1; j >= 0; j--) // rows\r\n            {\r\n                A[j][m] -= A[j][i] * v;\r\n                A[j][i] = 0;\r\n            }\r\n        }\r\n        console.log(A)\r\n        return ks;\r\n    }\r\n\r\n    zerosMat(r, c) {\r\n        var A = [];\r\n        for (var i = 0; i < r; i++) {\r\n            A.push([]);\r\n            for (var j = 0; j < c; j++) A[i].push(0);\r\n        }\r\n        return A;\r\n    }\r\n\r\n    swapRows(m, k, l) {\r\n        var p = m[k]; m[k] = m[l]; m[l] = p;\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Layout>\r\n                    <Content\r\n                        style={{ background: \"#ebe18d\", padding: \"90px\" , float:\"left\"}}\r\n                        onChange={this.handleChange}\r\n                    >\r\n                        <Row gutter={[40, 40]}\r\n                        >\r\n                            \r\n                            <Col span={10} offset={7}>\r\n                                {this.state.showTableInput &&\r\n                                    <div>\r\n                                        <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\", overflowY: \"scroll\", minWidth: 120, maxHeight: 300 }}>\r\n\r\n                                        </Table>\r\n                                    </div>}\r\n\r\n                                {this.state.showInputForm &&\r\n                                    <div>\r\n                                        <h2 style={{color: \"#003a8c\", fontWeight: \"bold\",fontSize: \"35px\",textAlign:\"center\"}}>Spline</h2>\r\n                                        <h2>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\"></Input>\r\n                                        <h2>X</h2><Input size=\"large\" name=\"X\"></Input>\r\n                                    </div>\r\n                                }\r\n                                <br></br>\r\n                                {this.state.showInputButton &&\r\n                                    <Button id=\"dimention_button\" onClick={\r\n                                        () => { this.createTableInput(parseInt(this.state.nPoints)) }\r\n                                    }\r\n                                    style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>\r\n                                        Submit<br></br>\r\n                                    </Button>\r\n                                }\r\n                                {this.state.showTableButton &&\r\n                                    <Button\r\n                                        id=\"matrix_button\"\r\n                                        style={{ fontSize: \"20px\" }}\r\n                                        onClick={() => this.initialValue(parseFloat(this.state.X))}>\r\n                                        Submit\r\n                            </Button>\r\n                                }\r\n                            </Col>\r\n                                \r\n                        </Row>\r\n                        {/*-----------------------------------------ปุ่มINPUTสมการ----------------------------------------------------*/}\r\n\r\n                        <br></br>\r\n\r\n                        {/*---------------------------------------------------------------------------------------------*/}\r\n                        <Row>\r\n                            <Col span={10} offset={7}>\r\n                                <Card\r\n                                    title={\"Output\"}\r\n                                    bordered={true}\r\n                                    style={{ width: \"100%\", float: \"inline-start\", marginBlockStart: \"2%\" }}\r\n                                    id=\"outputCard\"\r\n                                >\r\n                                    <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>X = {answer}</p>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </Content>\r\n                </Layout>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default Appc;","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Interpolation\\Lagrange.js",[],"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Leastsqaures\\LinearRegression.js",[],"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Leastsqaures\\PolynomialRegression.js",[],"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\GuassJordan.js",["215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243"],"import React, { Component } from 'react'\r\n\r\nimport { Menu, Input, Row, Col, Button, Card, Table } from 'antd';\r\nimport { Carousel } from 'antd';\r\nimport { Layout, Breadcrumb } from 'antd';\r\nimport { range, compile, lusolve, format, det, subtract, multiply, transpose, add,inv,fraction } from 'mathjs';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst InputColor = {\r\n    background: \"\",\r\n    color: \"#003a8c\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\",\r\n    width: 300 ,\r\n    height:50\r\n    \r\n\r\n};\r\nvar A = [], B = [], matrixA = [], matrixB = [], output = []\r\n\r\nclass Appc8 extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            row: 0,\r\n            column: 0,\r\n            showDimentionForm : true,\r\n            showDimentionButton: true,\r\n            showMatrixForm: false,\r\n            showMatrixButton: false,\r\n            showOutputCard: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.jordan = this.jordan.bind(this);\r\n    \r\n    }\r\n\r\n    jordan(n) {\r\n        this.initMatrix();\r\n        if (A[0][0] === 0) { //pivoting\r\n            var tempRow = JSON.parse(JSON.stringify(A[0]));\r\n            var tempColumn = B[0];\r\n            A[0] = A[1];\r\n            A[1] = tempRow;\r\n            B[0] = B[1];\r\n            B[1] = tempColumn;\r\n        }\r\n        //Forward eliminate\r\n        for(var k=0 ; k<n ; k++) {\r\n            for(var i=k+1 ; i<n ; i++) {\r\n                var factor = A[i][k] / A[k][k];\r\n                for (var j=k ; j<n ; j++) {\r\n                    A[i][j] = A[i][j] - factor*A[k][j];\r\n                }\r\n                B[i] = B[i] - factor*B[k];\r\n\r\n            }\r\n        }\r\n        //Backward Substitution\r\n        for (k=n-1 ; k>=0 ; k--) {\r\n            for(i=k ; i>=0 ; i--) {\r\n                \r\n                if (i === k) {//Identity matrix\r\n                    factor = 1 / A[i][k];\r\n            \r\n                    for (j=0 ; j<n ; j++) {\r\n                        A[i][j] = A[i][j] * factor;\r\n                    }\r\n                    B[i] = B[i] * factor;\r\n                \r\n                \r\n                }\r\n                else {\r\n                    factor = A[i][k] / A[k][k];\r\n                    for (j=0 ; j<n ; j++) {\r\n                        A[i][j] = A[i][j] - factor*A[k][j];\r\n                    }\r\n                    B[i] = B[i] - factor*B[k];\r\n                }\r\n            } \r\n        }\r\n        for (i=0 ; i<n ; i++) {\r\n            output.push(B[i]);\r\n            output.push(<br/>)\r\n        }\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n\r\n      \r\n    }\r\n    jordan2(n) {\r\n        if (A[0][0] === 0) { //pivoting\r\n            var tempRow = JSON.parse(JSON.stringify(A[0]));\r\n            var tempColumn = B[0];\r\n            A[0] = A[1];\r\n            A[1] = tempRow;\r\n            B[0] = B[1];\r\n            B[1] = tempColumn;\r\n        }\r\n        //Forward eliminate\r\n        for(var k=0 ; k<n ; k++) {\r\n            for(var i=k+1 ; i<n ; i++) {\r\n                var factor = A[i][k] / A[k][k];\r\n                for (var j=k ; j<n ; j++) {\r\n                    A[i][j] = A[i][j] - factor*A[k][j];\r\n                }\r\n                B[i] = B[i] - factor*B[k];\r\n\r\n            }\r\n        }\r\n        //Backward Substitution\r\n        for (k=n-1 ; k>=0 ; k--) {\r\n            for(i=k ; i>=0 ; i--) {\r\n                \r\n                if (i === k) {//Identity matrix\r\n                    factor = 1 / A[i][k];\r\n            \r\n                    for (j=0 ; j<n ; j++) {\r\n                        A[i][j] = A[i][j] * factor;\r\n                    }\r\n                    B[i] = B[i] * factor;\r\n                \r\n                \r\n                }\r\n                else {\r\n                    factor = A[i][k] / A[k][k];\r\n                    for (j=0 ; j<n ; j++) {\r\n                        A[i][j] = A[i][j] - factor*A[k][j];\r\n                    }\r\n                    B[i] = B[i] - factor*B[k];\r\n                }\r\n            } \r\n        }\r\n        for (i=0 ; i<n ; i++) {\r\n            output.push(B[i]);\r\n            output.push(<br/>)\r\n        }\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n\r\n      \r\n    }\r\n\r\n    createMatrix(row, column) {\r\n        for (var i=1 ; i<=row ; i++) {\r\n            for (var j=1 ; j<=column ; j++) {\r\n                matrixA.push(<Input style={{\r\n                    width: \"18%\",\r\n                    height: \"50%\", \r\n                    marginInlineEnd: \"5%\", \r\n                    marginBlockEnd: \"5%\",\r\n                    color: \"black\",\r\n                    fontSize: \"18px\",\r\n                    fontWeight: \"bold\"\r\n                }} \r\n                id={\"a\"+i+\"\"+j} key={\"a\"+i+\"\"+j} placeholder={\"a\"+i+\"\"+j} />)  \r\n            }\r\n            matrixA.push(<br/>)\r\n            matrixB.push(<Input style={{\r\n                width: \"18%\",\r\n                height: \"50%\", \r\n                marginInlineEnd: \"5%\", \r\n                marginBlockEnd: \"5%\",\r\n                color: \"black\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }} \r\n            id={\"b\"+i} key={\"b\"+i} placeholder={\"b\"+i} />)\r\n                \r\n            \r\n        }\r\n\r\n        this.setState({\r\n            showDimentionForm: false,\r\n            showDimentionButton: false,\r\n            showMatrixForm: true,\r\n            showMatrixButton: true\r\n        })\r\n        \r\n\r\n    }\r\n    initMatrix() {\r\n        for(var i=0 ; i<this.state.row ; i++) {\r\n            A[i] = []\r\n            for(var j=0 ; j<this.state.column ; j++) {\r\n                A[i][j] = (parseFloat(document.getElementById(\"a\"+(i+1)+\"\"+(j+1)).value));\r\n            }\r\n            B.push(parseFloat(document.getElementById(\"b\"+(i+1)).value));\r\n        }\r\n    }\r\n    dataapi = async()=>{\r\n        var response = await axios.get('http://localhost:3000/GuassElimination').then(res => {return res.data});\r\n        console.log(response)\r\n        this.setState({\r\n            A:response['A'],\r\n            B:response['B'],\r\n            row:response['row']\r\n        })\r\n        A = this.state.A;\r\n        B = this.state.B;\r\n        this.jordan2(this.state.row);\r\n        \r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Layout>\r\n                <body\r\n                        style={{ background: \"#ebe18d\", padding: \"90px\" , float:\"left\" }}\r\n                        onChange={this.handleChange}\r\n                    >\r\n                         <h2 style={{color: \"#003a8c\", fontWeight: \"bold\",fontSize: \"35px\",textAlign:\"center\"}}>Guass Jordan</h2>\r\n\r\n                        {/*-----------------------------------------ปุ่มINPUTสมการ----------------------------------------------------*/}\r\n                        <Row gutter={[40, 40]}\r\n                            bordered={true}\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <Col span={10} offset={7}>\r\n\r\n                                <div>\r\n                                    <h2>Row</h2><Input size=\"large\" name=\"row\" ></Input>\r\n                                    <h2>Column</h2><Input size=\"large\" name=\"column\" ></Input>\r\n                                </div>\r\n                                <br></br>\r\n                                {this.state.showDimentionButton &&\r\n                                    <Button id=\"dimention_button\" onClick={\r\n                                        ()=>this.createMatrix(this.state.row, this.state.column)\r\n                                    } style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}\r\n                                    >\r\n                                        Submit<br></br>\r\n                                    </Button>\r\n                                }\r\n\r\n                                {this.state.showMatrixButton &&\r\n                                    <Button\r\n                                        id=\"matrix_button\"\r\n                                        onClick={()=>this.jordan(this.state.row)} style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>\r\n                                        Submit\r\n                                    </Button>\r\n                                }\r\n                                <Button id=\"submit_button\" onClick= {\r\n                                \r\n                                ()=>this.dataapi()\r\n                                 }  \r\n                                 style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>API</Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        <Row gutter={[40, 40]}>\r\n                            <Col span={8} offset={4}>\r\n                                <Card\r\n                                    title={<h3>Matrix</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixA}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                            <Col span={8}>\r\n                                <Card\r\n                                    title={<h3>Vector</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixB}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n\r\n                        {/*---------------------------------------------------------------------------------------------*/}\r\n                        <Row gutter={[2, 2]}>\r\n                            <Col span={10} offset={7}>\r\n                                <Card\r\n                                    title={<h3>Outpot</h3>}\r\n                                    bordered={true}\r\n                                    onChange={this.handleChange} id=\"answerCard\">\r\n                                    <p style={{fontSize: \"24px\", fontWeight: \"bold\"}}>{output}</p>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </body>\r\n                </Layout>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default Appc8;","C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Leastsqaures\\Multiple_LinearRegression.js",[],"C:\\Users\\first\\Desktop\\numer\\Numerpj\\src\\code\\Linear\\Jacobi.js",["244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272"],"import React, { Component } from 'react'\r\n\r\nimport { Menu, Input, Row, Col, Button, Card, Table } from 'antd';\r\nimport { Carousel } from 'antd';\r\nimport { Layout, Breadcrumb,Empty } from 'antd';\r\nimport { range, compile, lusolve, format, det, subtract, multiply, transpose, add,inv,fraction } from 'mathjs';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst InputColor = {\r\n    background: \"\",\r\n    color: \"#003a8c\", \r\n    fontWeight: \"bold\", \r\n    fontSize: \"24px\",\r\n    width: 300 ,\r\n    height:50\r\n    \r\n\r\n};\r\nvar A = [], B = [], matrixA = [], matrixB = [], x , epsilon, dataInTable = [], count=1;\r\nvar columns = [\r\n    {\r\n      title: \"Iteration\",\r\n      dataIndex: \"iteration\",\r\n      key: \"iteration\"\r\n    }\r\n];\r\n\r\nclass Jacobi extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            row: 0,\r\n            column: 0,\r\n            showDimentionForm : true,\r\n            showDimentionButton: true,\r\n            showMatrixForm: false,\r\n            showMatrixButton: false,\r\n            showOutputCard: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.jacobi = this.jacobi.bind(this);\r\n    \r\n    }\r\n\r\n  \r\n    jacobi(n) {\r\n        this.initMatrix();\r\n        x = new Array(n);\r\n        var temp;\r\n        var stop = 0;\r\n        var xold = new Array(n);\r\n        epsilon = new Array(n);\r\n        x.fill(0)\r\n        xold.fill(0);\r\n        do {\r\n            temp = [];\r\n            xold = x;\r\n            for (var i=0 ; i<n ; i++) {\r\n                var sum = 0;\r\n                for (var j=0 ; j<n ; j++) {\r\n                    if (i !== j) { //else i == j That is a divide number\r\n                        sum = sum + A[i][j]*x[j];\r\n                    }\r\n                }\r\n                temp[i] = (B[i] - sum)/A[i][i]; //update x[i]\r\n                \r\n            }        \r\n            x = temp;\r\n            stop++;\r\n        } while(this.error(x, xold) && stop<100); //if true , continue next iteration\r\n        /*\r\n        \r\n        for (i=0 ; i<x.length ; i++) {\r\n                output.push(x[i]);\r\n                output.push(<br/>);\r\n        }*/\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n\r\n      \r\n    }\r\n    jacobi2(n) {\r\n        x = new Array(n);\r\n        var temp;\r\n        var stop = 0;\r\n        var xold = new Array(n);\r\n        epsilon = new Array(n);\r\n        x.fill(0)\r\n        xold.fill(0);\r\n        do {\r\n            temp = [];\r\n            xold = x;\r\n            for (var i=0 ; i<n ; i++) {\r\n                var sum = 0;\r\n                for (var j=0 ; j<n ; j++) {\r\n                    if (i !== j) { //else i == j That is a divide number\r\n                        sum = sum + A[i][j]*x[j];\r\n                    }\r\n                }\r\n                temp[i] = (B[i] - sum)/A[i][i]; //update x[i]\r\n                \r\n            }        \r\n            x = temp;\r\n            stop++;\r\n        } while(this.error(x, xold) && stop<100); //if true , continue next iteration\r\n        /*\r\n        \r\n        for (i=0 ; i<x.length ; i++) {\r\n                output.push(x[i]);\r\n                output.push(<br/>);\r\n        }*/\r\n        this.setState({\r\n            showOutputCard: true\r\n        });\r\n\r\n      \r\n    }\r\n    error(xnew, xold) {\r\n        for (var i=0 ; i<xnew.length ; i++) {\r\n            console.log(Math.abs((xnew[i]-xold[i]) / xnew[i]))\r\n            if(isNaN(Math.abs((xnew[i]-xold[i]) / xnew[i]))){\r\n                epsilon[i] = 0\r\n            }\r\n            else{\r\n                epsilon[i] = Math.abs((xnew[i]-xold[i]) / xnew[i])\r\n            }\r\n        }\r\n        console.log(\"a\")\r\n        this.appendTable(x, epsilon);\r\n\r\n        for (i=0 ; i<epsilon.length ; i++) {\r\n            \r\n            if (epsilon[i] > 0.000001) {\r\n                return true;\r\n            }    \r\n        }\r\n        return false;  \r\n    }   \r\n    createMatrix(row, column) {\r\n        for (var i=1 ; i<=row ; i++) {\r\n            for (var j=1 ; j<=column ; j++) {\r\n                matrixA.push(<Input style={{\r\n                    width: \"18%\",\r\n                    height: \"50%\", \r\n\r\n                    marginInlineEnd: \"5%\", \r\n                    marginBlockEnd: \"5%\",\r\n                    color: \"black\",\r\n                    fontSize: \"18px\",\r\n                    fontWeight: \"bold\"\r\n                }} \r\n                id={\"a\"+i+\"\"+j} key={\"a\"+i+\"\"+j} placeholder={\"a\"+i+\"\"+j} />)  \r\n            }\r\n            matrixA.push(<br/>)\r\n            matrixB.push(<Input style={{\r\n                width: \"18%\",\r\n                height: \"50%\", \r\n                marginInlineEnd: \"5%\", \r\n                marginBlockEnd: \"5%\",\r\n                color: \"black\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"bold\"\r\n            }} \r\n            id={\"b\"+i} key={\"b\"+i} placeholder={\"b\"+i} />)\r\n                \r\n            \r\n        }\r\n\r\n        this.setState({\r\n            showDimentionForm: false,\r\n            showDimentionButton: false,\r\n            showMatrixForm: true,\r\n            showMatrixButton: true\r\n        })\r\n\r\n        \r\n\r\n    }\r\n    initMatrix() {\r\n        for(var i=0 ; i<this.state.row ; i++) {\r\n            A[i] = []\r\n            for(var j=0 ; j<this.state.column ; j++) {\r\n                A[i][j] = (parseFloat(document.getElementById(\"a\"+(i+1)+\"\"+(j+1)).value));\r\n            }\r\n            B.push(parseFloat(document.getElementById(\"b\"+(i+1)).value));\r\n        }\r\n    }\r\n    dataapi = async()=>{\r\n        var response = await axios.get('http://localhost:3000/GuassElimination').then(res => {return res.data});\r\n        console.log(response)\r\n        this.setState({\r\n            A:response['A'],\r\n            B:response['B'],\r\n            row:response['row']\r\n        })\r\n        A = this.state.A;\r\n        B = this.state.B;\r\n        this.jacobi2(this.state.row);\r\n        \r\n    }\r\n    initialSchema(n) {\r\n        for (var i=1 ; i<=n ; i++) {\r\n            columns.push({\r\n                title: \"X\"+i,\r\n                dataIndex: \"x\"+i,\r\n                key: \"x\"+i\r\n            },)\r\n        }\r\n        for (i=1 ; i<=n ; i++) {\r\n            columns.push({\r\n                title: \"Error\"+i,\r\n                dataIndex: \"error\"+i,\r\n                key: \"error\"+i\r\n            },)\r\n        }\r\n    }\r\n    appendTable(x, error) {\r\n        var tag = ''\r\n        tag += '{\"iteration\": ' + (count++) + ',';\r\n        for (var i=0 ; i<x.length ; i++) {\r\n            tag += '\"x'+(i+1)+'\": '+x[i].toFixed(8)+', \"error'+(i+1)+'\": ' + error[i].toFixed(8);\r\n            if (i !== x.length-1) {\r\n                tag += ','\r\n            }\r\n        }\r\n        tag += '}';\r\n        console.log(tag)\r\n        dataInTable.push(JSON.parse(tag));\r\n        console.log(dataInTable)\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Layout>\r\n                <body\r\n                        style={{ background: \"#ebe18d\", padding: \"90px\" , float:\"left\" }}\r\n                        onChange={this.handleChange}\r\n                    >\r\n\r\n                        {/*-----------------------------------------ปุ่มINPUTสมการ----------------------------------------------------*/}\r\n                        <Row gutter={[40, 40]}\r\n                            \r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <Col span={10} offset={7}>\r\n\r\n                                <div>\r\n                                    <h2>Row</h2><Input size=\"large\" name=\"row\" ></Input>\r\n                                    <h2>Column</h2><Input size=\"large\" name=\"column\" ></Input>\r\n                                </div>\r\n                                <br></br>\r\n                                {this.state.showDimentionButton &&\r\n                                    <Button id=\"dimention_button\" onClick={\r\n                                        ()=>{this.createMatrix(this.state.row, this.state.column);this.initialSchema(this.state.row)}\r\n                                    } style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}\r\n                                    >\r\n                                        Submit<br></br>\r\n                                    </Button>\r\n                                }\r\n\r\n                                {this.state.showMatrixButton &&\r\n                                    <Button\r\n                                        id=\"matrix_button\"\r\n                                        onClick={()=>this.jacobi(parseInt(this.state.row))} style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>\r\n                                        Submit\r\n                                    </Button>\r\n                                }\r\n\r\n                                <Button id=\"submit_button\" onClick= {\r\n                                \r\n                                ()=>this.dataapi()\r\n                                 }  \r\n                                 style={{width: 100 , height:50,background: \"#003a8c\", color: \"white\", fontSize: \"25px\"}}>API</Button>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <br></br>\r\n                        <Row gutter={[40, 40]}>\r\n                            <Col span={8} offset={4}>\r\n                                <Card\r\n                                    title={<h3>Matrix</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixA}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                            <Col span={8}>\r\n                                <Card\r\n                                    title={<h3>Vector</h3>}\r\n                                >\r\n                                    {this.state.showMatrixForm && <div>{matrixB}</div>}\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n\r\n                        {/*---------------------------------------------------------------------------------------------*/}\r\n                        \r\n                        <Row gutter={[2, 2]}>\r\n                            <Col span={10} offset={2}>\r\n                            {this.state.showOutputCard &&\r\n                                <Card\r\n                                    title={<h3>Output</h3>}\r\n                                    bordered={true}\r\n                                    style={{overflowX: \"scroll\" ,width: \"200%\"}}\r\n                                    onChange={this.handleChange} id=\"answerCard\">\r\n                                    <Table columns={columns} dataSource={dataInTable} bodyStyle={{fontWeight: \"bold\", fontSize: \"18px\", color: \"black\", border:\"2px solid white\"}}></Table>\r\n                                </Card>\r\n                            }\r\n                            </Col>\r\n                        </Row>\r\n                    </body>\r\n                </Layout>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default Jacobi;",{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","severity":1,"message":"278","line":2,"column":8,"nodeType":"279","messageId":"280","endLine":2,"endColumn":16},{"ruleId":"277","severity":1,"message":"281","line":6,"column":28,"nodeType":"279","messageId":"280","endLine":6,"endColumn":40},{"ruleId":"277","severity":1,"message":"282","line":9,"column":3,"nodeType":"279","messageId":"280","endLine":9,"endColumn":9},{"ruleId":"277","severity":1,"message":"283","line":2,"column":37,"nodeType":"279","messageId":"280","endLine":2,"endColumn":49},{"ruleId":"277","severity":1,"message":"284","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":14},{"ruleId":"277","severity":1,"message":"285","line":3,"column":47,"nodeType":"279","messageId":"280","endLine":3,"endColumn":52},{"ruleId":"277","severity":1,"message":"286","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":18},{"ruleId":"277","severity":1,"message":"287","line":5,"column":18,"nodeType":"279","messageId":"280","endLine":5,"endColumn":28},{"ruleId":"277","severity":1,"message":"288","line":6,"column":10,"nodeType":"279","messageId":"280","endLine":6,"endColumn":15},{"ruleId":"277","severity":1,"message":"289","line":6,"column":17,"nodeType":"279","messageId":"280","endLine":6,"endColumn":24},{"ruleId":"277","severity":1,"message":"290","line":6,"column":43,"nodeType":"279","messageId":"280","endLine":6,"endColumn":46},{"ruleId":"277","severity":1,"message":"291","line":7,"column":10,"nodeType":"279","messageId":"280","endLine":7,"endColumn":19},{"ruleId":"277","severity":1,"message":"292","line":7,"column":21,"nodeType":"279","messageId":"280","endLine":7,"endColumn":25},{"ruleId":"277","severity":1,"message":"293","line":7,"column":27,"nodeType":"279","messageId":"280","endLine":7,"endColumn":40},{"ruleId":"277","severity":1,"message":"294","line":7,"column":42,"nodeType":"279","messageId":"280","endLine":7,"endColumn":47},{"ruleId":"277","severity":1,"message":"295","line":7,"column":49,"nodeType":"279","messageId":"280","endLine":7,"endColumn":54},{"ruleId":"277","severity":1,"message":"296","line":7,"column":56,"nodeType":"279","messageId":"280","endLine":7,"endColumn":63},{"ruleId":"277","severity":1,"message":"297","line":7,"column":65,"nodeType":"279","messageId":"280","endLine":7,"endColumn":71},{"ruleId":"277","severity":1,"message":"298","line":8,"column":35,"nodeType":"279","messageId":"280","endLine":8,"endColumn":40},{"ruleId":"277","severity":1,"message":"299","line":8,"column":42,"nodeType":"279","messageId":"280","endLine":8,"endColumn":46},{"ruleId":"277","severity":1,"message":"300","line":10,"column":9,"nodeType":"279","messageId":"280","endLine":10,"endColumn":15},{"ruleId":"277","severity":1,"message":"301","line":10,"column":17,"nodeType":"279","messageId":"280","endLine":10,"endColumn":24},{"ruleId":"277","severity":1,"message":"302","line":10,"column":26,"nodeType":"279","messageId":"280","endLine":10,"endColumn":32},{"ruleId":"277","severity":1,"message":"303","line":10,"column":34,"nodeType":"279","messageId":"280","endLine":10,"endColumn":39},{"ruleId":"277","severity":1,"message":"304","line":11,"column":7,"nodeType":"279","messageId":"280","endLine":11,"endColumn":17},{"ruleId":"305","severity":1,"message":"306","line":65,"column":5,"nodeType":"307","messageId":"308","endLine":67,"endColumn":6},{"ruleId":"277","severity":1,"message":"284","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":14},{"ruleId":"277","severity":1,"message":"285","line":3,"column":47,"nodeType":"279","messageId":"280","endLine":3,"endColumn":52},{"ruleId":"277","severity":1,"message":"286","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":18},{"ruleId":"277","severity":1,"message":"287","line":5,"column":18,"nodeType":"279","messageId":"280","endLine":5,"endColumn":28},{"ruleId":"277","severity":1,"message":"288","line":6,"column":10,"nodeType":"279","messageId":"280","endLine":6,"endColumn":15},{"ruleId":"277","severity":1,"message":"289","line":6,"column":17,"nodeType":"279","messageId":"280","endLine":6,"endColumn":24},{"ruleId":"277","severity":1,"message":"291","line":7,"column":10,"nodeType":"279","messageId":"280","endLine":7,"endColumn":19},{"ruleId":"277","severity":1,"message":"292","line":7,"column":21,"nodeType":"279","messageId":"280","endLine":7,"endColumn":25},{"ruleId":"277","severity":1,"message":"293","line":7,"column":27,"nodeType":"279","messageId":"280","endLine":7,"endColumn":40},{"ruleId":"277","severity":1,"message":"294","line":7,"column":42,"nodeType":"279","messageId":"280","endLine":7,"endColumn":47},{"ruleId":"277","severity":1,"message":"295","line":7,"column":49,"nodeType":"279","messageId":"280","endLine":7,"endColumn":54},{"ruleId":"277","severity":1,"message":"296","line":7,"column":56,"nodeType":"279","messageId":"280","endLine":7,"endColumn":63},{"ruleId":"277","severity":1,"message":"297","line":7,"column":65,"nodeType":"279","messageId":"280","endLine":7,"endColumn":71},{"ruleId":"277","severity":1,"message":"298","line":8,"column":35,"nodeType":"279","messageId":"280","endLine":8,"endColumn":40},{"ruleId":"277","severity":1,"message":"299","line":8,"column":42,"nodeType":"279","messageId":"280","endLine":8,"endColumn":46},{"ruleId":"277","severity":1,"message":"300","line":10,"column":9,"nodeType":"279","messageId":"280","endLine":10,"endColumn":15},{"ruleId":"277","severity":1,"message":"301","line":10,"column":17,"nodeType":"279","messageId":"280","endLine":10,"endColumn":24},{"ruleId":"277","severity":1,"message":"302","line":10,"column":26,"nodeType":"279","messageId":"280","endLine":10,"endColumn":32},{"ruleId":"277","severity":1,"message":"303","line":10,"column":34,"nodeType":"279","messageId":"280","endLine":10,"endColumn":39},{"ruleId":"277","severity":1,"message":"304","line":11,"column":7,"nodeType":"279","messageId":"280","endLine":11,"endColumn":17},{"ruleId":"277","severity":1,"message":"284","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":14},{"ruleId":"277","severity":1,"message":"285","line":3,"column":47,"nodeType":"279","messageId":"280","endLine":3,"endColumn":52},{"ruleId":"277","severity":1,"message":"286","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":18},{"ruleId":"277","severity":1,"message":"287","line":5,"column":18,"nodeType":"279","messageId":"280","endLine":5,"endColumn":28},{"ruleId":"277","severity":1,"message":"288","line":6,"column":10,"nodeType":"279","messageId":"280","endLine":6,"endColumn":15},{"ruleId":"277","severity":1,"message":"289","line":6,"column":17,"nodeType":"279","messageId":"280","endLine":6,"endColumn":24},{"ruleId":"277","severity":1,"message":"309","line":6,"column":26,"nodeType":"279","messageId":"280","endLine":6,"endColumn":33},{"ruleId":"277","severity":1,"message":"310","line":6,"column":35,"nodeType":"279","messageId":"280","endLine":6,"endColumn":41},{"ruleId":"277","severity":1,"message":"290","line":6,"column":43,"nodeType":"279","messageId":"280","endLine":6,"endColumn":46},{"ruleId":"277","severity":1,"message":"291","line":7,"column":10,"nodeType":"279","messageId":"280","endLine":7,"endColumn":19},{"ruleId":"277","severity":1,"message":"292","line":7,"column":21,"nodeType":"279","messageId":"280","endLine":7,"endColumn":25},{"ruleId":"277","severity":1,"message":"293","line":7,"column":27,"nodeType":"279","messageId":"280","endLine":7,"endColumn":40},{"ruleId":"277","severity":1,"message":"294","line":7,"column":42,"nodeType":"279","messageId":"280","endLine":7,"endColumn":47},{"ruleId":"277","severity":1,"message":"295","line":7,"column":49,"nodeType":"279","messageId":"280","endLine":7,"endColumn":54},{"ruleId":"277","severity":1,"message":"296","line":7,"column":56,"nodeType":"279","messageId":"280","endLine":7,"endColumn":63},{"ruleId":"277","severity":1,"message":"297","line":7,"column":65,"nodeType":"279","messageId":"280","endLine":7,"endColumn":71},{"ruleId":"277","severity":1,"message":"298","line":8,"column":35,"nodeType":"279","messageId":"280","endLine":8,"endColumn":40},{"ruleId":"277","severity":1,"message":"299","line":8,"column":42,"nodeType":"279","messageId":"280","endLine":8,"endColumn":46},{"ruleId":"277","severity":1,"message":"300","line":10,"column":9,"nodeType":"279","messageId":"280","endLine":10,"endColumn":15},{"ruleId":"277","severity":1,"message":"301","line":10,"column":17,"nodeType":"279","messageId":"280","endLine":10,"endColumn":24},{"ruleId":"277","severity":1,"message":"302","line":10,"column":26,"nodeType":"279","messageId":"280","endLine":10,"endColumn":32},{"ruleId":"277","severity":1,"message":"303","line":10,"column":34,"nodeType":"279","messageId":"280","endLine":10,"endColumn":39},{"ruleId":"277","severity":1,"message":"304","line":11,"column":7,"nodeType":"279","messageId":"280","endLine":11,"endColumn":17},{"ruleId":"277","severity":1,"message":"284","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":14},{"ruleId":"277","severity":1,"message":"285","line":3,"column":47,"nodeType":"279","messageId":"280","endLine":3,"endColumn":52},{"ruleId":"277","severity":1,"message":"286","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":18},{"ruleId":"277","severity":1,"message":"287","line":5,"column":18,"nodeType":"279","messageId":"280","endLine":5,"endColumn":28},{"ruleId":"277","severity":1,"message":"288","line":6,"column":10,"nodeType":"279","messageId":"280","endLine":6,"endColumn":15},{"ruleId":"277","severity":1,"message":"289","line":6,"column":17,"nodeType":"279","messageId":"280","endLine":6,"endColumn":24},{"ruleId":"277","severity":1,"message":"309","line":6,"column":26,"nodeType":"279","messageId":"280","endLine":6,"endColumn":33},{"ruleId":"277","severity":1,"message":"310","line":6,"column":35,"nodeType":"279","messageId":"280","endLine":6,"endColumn":41},{"ruleId":"277","severity":1,"message":"291","line":7,"column":10,"nodeType":"279","messageId":"280","endLine":7,"endColumn":19},{"ruleId":"277","severity":1,"message":"292","line":7,"column":21,"nodeType":"279","messageId":"280","endLine":7,"endColumn":25},{"ruleId":"277","severity":1,"message":"293","line":7,"column":27,"nodeType":"279","messageId":"280","endLine":7,"endColumn":40},{"ruleId":"277","severity":1,"message":"294","line":7,"column":42,"nodeType":"279","messageId":"280","endLine":7,"endColumn":47},{"ruleId":"277","severity":1,"message":"295","line":7,"column":49,"nodeType":"279","messageId":"280","endLine":7,"endColumn":54},{"ruleId":"277","severity":1,"message":"296","line":7,"column":56,"nodeType":"279","messageId":"280","endLine":7,"endColumn":63},{"ruleId":"277","severity":1,"message":"297","line":7,"column":65,"nodeType":"279","messageId":"280","endLine":7,"endColumn":71},{"ruleId":"277","severity":1,"message":"298","line":8,"column":35,"nodeType":"279","messageId":"280","endLine":8,"endColumn":40},{"ruleId":"277","severity":1,"message":"299","line":8,"column":42,"nodeType":"279","messageId":"280","endLine":8,"endColumn":46},{"ruleId":"277","severity":1,"message":"300","line":10,"column":9,"nodeType":"279","messageId":"280","endLine":10,"endColumn":15},{"ruleId":"277","severity":1,"message":"301","line":10,"column":17,"nodeType":"279","messageId":"280","endLine":10,"endColumn":24},{"ruleId":"277","severity":1,"message":"302","line":10,"column":26,"nodeType":"279","messageId":"280","endLine":10,"endColumn":32},{"ruleId":"277","severity":1,"message":"303","line":10,"column":34,"nodeType":"279","messageId":"280","endLine":10,"endColumn":39},{"ruleId":"277","severity":1,"message":"304","line":11,"column":7,"nodeType":"279","messageId":"280","endLine":11,"endColumn":17},{"ruleId":"277","severity":1,"message":"284","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":14},{"ruleId":"277","severity":1,"message":"286","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":18},{"ruleId":"277","severity":1,"message":"288","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":15},{"ruleId":"277","severity":1,"message":"289","line":4,"column":17,"nodeType":"279","messageId":"280","endLine":4,"endColumn":24},{"ruleId":"277","severity":1,"message":"309","line":4,"column":26,"nodeType":"279","messageId":"280","endLine":4,"endColumn":33},{"ruleId":"277","severity":1,"message":"310","line":4,"column":35,"nodeType":"279","messageId":"280","endLine":4,"endColumn":41},{"ruleId":"277","severity":1,"message":"291","line":5,"column":10,"nodeType":"279","messageId":"280","endLine":5,"endColumn":19},{"ruleId":"277","severity":1,"message":"292","line":5,"column":21,"nodeType":"279","messageId":"280","endLine":5,"endColumn":25},{"ruleId":"277","severity":1,"message":"293","line":5,"column":27,"nodeType":"279","messageId":"280","endLine":5,"endColumn":40},{"ruleId":"277","severity":1,"message":"294","line":5,"column":42,"nodeType":"279","messageId":"280","endLine":5,"endColumn":47},{"ruleId":"277","severity":1,"message":"295","line":5,"column":49,"nodeType":"279","messageId":"280","endLine":5,"endColumn":54},{"ruleId":"277","severity":1,"message":"296","line":5,"column":56,"nodeType":"279","messageId":"280","endLine":5,"endColumn":63},{"ruleId":"277","severity":1,"message":"297","line":5,"column":65,"nodeType":"279","messageId":"280","endLine":5,"endColumn":71},{"ruleId":"277","severity":1,"message":"287","line":6,"column":18,"nodeType":"279","messageId":"280","endLine":6,"endColumn":28},{"ruleId":"277","severity":1,"message":"298","line":7,"column":35,"nodeType":"279","messageId":"280","endLine":7,"endColumn":40},{"ruleId":"277","severity":1,"message":"299","line":7,"column":42,"nodeType":"279","messageId":"280","endLine":7,"endColumn":46},{"ruleId":"277","severity":1,"message":"300","line":8,"column":9,"nodeType":"279","messageId":"280","endLine":8,"endColumn":15},{"ruleId":"277","severity":1,"message":"301","line":8,"column":17,"nodeType":"279","messageId":"280","endLine":8,"endColumn":24},{"ruleId":"277","severity":1,"message":"302","line":8,"column":26,"nodeType":"279","messageId":"280","endLine":8,"endColumn":32},{"ruleId":"277","severity":1,"message":"303","line":8,"column":34,"nodeType":"279","messageId":"280","endLine":8,"endColumn":39},{"ruleId":"277","severity":1,"message":"304","line":9,"column":7,"nodeType":"279","messageId":"280","endLine":9,"endColumn":17},{"ruleId":"277","severity":1,"message":"311","line":19,"column":104,"nodeType":"279","messageId":"280","endLine":19,"endColumn":110},{"ruleId":"277","severity":1,"message":"289","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":17},{"ruleId":"277","severity":1,"message":"287","line":5,"column":18,"nodeType":"279","messageId":"280","endLine":5,"endColumn":28},{"ruleId":"277","severity":1,"message":"298","line":6,"column":35,"nodeType":"279","messageId":"280","endLine":6,"endColumn":40},{"ruleId":"277","severity":1,"message":"299","line":6,"column":42,"nodeType":"279","messageId":"280","endLine":6,"endColumn":46},{"ruleId":"277","severity":1,"message":"300","line":7,"column":9,"nodeType":"279","messageId":"280","endLine":7,"endColumn":15},{"ruleId":"277","severity":1,"message":"302","line":7,"column":26,"nodeType":"279","messageId":"280","endLine":7,"endColumn":32},{"ruleId":"277","severity":1,"message":"303","line":7,"column":34,"nodeType":"279","messageId":"280","endLine":7,"endColumn":39},{"ruleId":"277","severity":1,"message":"312","line":8,"column":7,"nodeType":"279","messageId":"280","endLine":8,"endColumn":17},{"ruleId":"277","severity":1,"message":"284","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":14},{"ruleId":"277","severity":1,"message":"285","line":3,"column":47,"nodeType":"279","messageId":"280","endLine":3,"endColumn":52},{"ruleId":"277","severity":1,"message":"286","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":18},{"ruleId":"277","severity":1,"message":"287","line":5,"column":18,"nodeType":"279","messageId":"280","endLine":5,"endColumn":28},{"ruleId":"277","severity":1,"message":"288","line":6,"column":10,"nodeType":"279","messageId":"280","endLine":6,"endColumn":15},{"ruleId":"277","severity":1,"message":"289","line":6,"column":17,"nodeType":"279","messageId":"280","endLine":6,"endColumn":24},{"ruleId":"277","severity":1,"message":"309","line":6,"column":26,"nodeType":"279","messageId":"280","endLine":6,"endColumn":33},{"ruleId":"277","severity":1,"message":"310","line":6,"column":35,"nodeType":"279","messageId":"280","endLine":6,"endColumn":41},{"ruleId":"277","severity":1,"message":"290","line":6,"column":43,"nodeType":"279","messageId":"280","endLine":6,"endColumn":46},{"ruleId":"277","severity":1,"message":"313","line":6,"column":48,"nodeType":"279","messageId":"280","endLine":6,"endColumn":56},{"ruleId":"277","severity":1,"message":"314","line":6,"column":58,"nodeType":"279","messageId":"280","endLine":6,"endColumn":66},{"ruleId":"277","severity":1,"message":"315","line":6,"column":68,"nodeType":"279","messageId":"280","endLine":6,"endColumn":77},{"ruleId":"277","severity":1,"message":"316","line":6,"column":79,"nodeType":"279","messageId":"280","endLine":6,"endColumn":82},{"ruleId":"277","severity":1,"message":"317","line":6,"column":83,"nodeType":"279","messageId":"280","endLine":6,"endColumn":86},{"ruleId":"277","severity":1,"message":"318","line":6,"column":87,"nodeType":"279","messageId":"280","endLine":6,"endColumn":95},{"ruleId":"277","severity":1,"message":"291","line":7,"column":10,"nodeType":"279","messageId":"280","endLine":7,"endColumn":19},{"ruleId":"277","severity":1,"message":"292","line":7,"column":21,"nodeType":"279","messageId":"280","endLine":7,"endColumn":25},{"ruleId":"277","severity":1,"message":"293","line":7,"column":27,"nodeType":"279","messageId":"280","endLine":7,"endColumn":40},{"ruleId":"277","severity":1,"message":"294","line":7,"column":42,"nodeType":"279","messageId":"280","endLine":7,"endColumn":47},{"ruleId":"277","severity":1,"message":"295","line":7,"column":49,"nodeType":"279","messageId":"280","endLine":7,"endColumn":54},{"ruleId":"277","severity":1,"message":"296","line":7,"column":56,"nodeType":"279","messageId":"280","endLine":7,"endColumn":63},{"ruleId":"277","severity":1,"message":"297","line":7,"column":65,"nodeType":"279","messageId":"280","endLine":7,"endColumn":71},{"ruleId":"277","severity":1,"message":"298","line":8,"column":35,"nodeType":"279","messageId":"280","endLine":8,"endColumn":40},{"ruleId":"277","severity":1,"message":"299","line":8,"column":42,"nodeType":"279","messageId":"280","endLine":8,"endColumn":46},{"ruleId":"277","severity":1,"message":"300","line":10,"column":9,"nodeType":"279","messageId":"280","endLine":10,"endColumn":15},{"ruleId":"277","severity":1,"message":"301","line":10,"column":17,"nodeType":"279","messageId":"280","endLine":10,"endColumn":24},{"ruleId":"277","severity":1,"message":"302","line":10,"column":26,"nodeType":"279","messageId":"280","endLine":10,"endColumn":32},{"ruleId":"277","severity":1,"message":"303","line":10,"column":34,"nodeType":"279","messageId":"280","endLine":10,"endColumn":39},{"ruleId":"277","severity":1,"message":"304","line":11,"column":7,"nodeType":"279","messageId":"280","endLine":11,"endColumn":17},{"ruleId":"277","severity":1,"message":"284","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":14},{"ruleId":"277","severity":1,"message":"286","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":18},{"ruleId":"277","severity":1,"message":"287","line":5,"column":18,"nodeType":"279","messageId":"280","endLine":5,"endColumn":28},{"ruleId":"277","severity":1,"message":"319","line":5,"column":29,"nodeType":"279","messageId":"280","endLine":5,"endColumn":34},{"ruleId":"277","severity":1,"message":"288","line":6,"column":10,"nodeType":"279","messageId":"280","endLine":6,"endColumn":15},{"ruleId":"277","severity":1,"message":"289","line":6,"column":17,"nodeType":"279","messageId":"280","endLine":6,"endColumn":24},{"ruleId":"277","severity":1,"message":"309","line":6,"column":26,"nodeType":"279","messageId":"280","endLine":6,"endColumn":33},{"ruleId":"277","severity":1,"message":"310","line":6,"column":35,"nodeType":"279","messageId":"280","endLine":6,"endColumn":41},{"ruleId":"277","severity":1,"message":"290","line":6,"column":43,"nodeType":"279","messageId":"280","endLine":6,"endColumn":46},{"ruleId":"277","severity":1,"message":"313","line":6,"column":48,"nodeType":"279","messageId":"280","endLine":6,"endColumn":56},{"ruleId":"277","severity":1,"message":"314","line":6,"column":58,"nodeType":"279","messageId":"280","endLine":6,"endColumn":66},{"ruleId":"277","severity":1,"message":"315","line":6,"column":68,"nodeType":"279","messageId":"280","endLine":6,"endColumn":77},{"ruleId":"277","severity":1,"message":"316","line":6,"column":79,"nodeType":"279","messageId":"280","endLine":6,"endColumn":82},{"ruleId":"277","severity":1,"message":"317","line":6,"column":83,"nodeType":"279","messageId":"280","endLine":6,"endColumn":86},{"ruleId":"277","severity":1,"message":"318","line":6,"column":87,"nodeType":"279","messageId":"280","endLine":6,"endColumn":95},{"ruleId":"277","severity":1,"message":"291","line":7,"column":10,"nodeType":"279","messageId":"280","endLine":7,"endColumn":19},{"ruleId":"277","severity":1,"message":"292","line":7,"column":21,"nodeType":"279","messageId":"280","endLine":7,"endColumn":25},{"ruleId":"277","severity":1,"message":"293","line":7,"column":27,"nodeType":"279","messageId":"280","endLine":7,"endColumn":40},{"ruleId":"277","severity":1,"message":"294","line":7,"column":42,"nodeType":"279","messageId":"280","endLine":7,"endColumn":47},{"ruleId":"277","severity":1,"message":"295","line":7,"column":49,"nodeType":"279","messageId":"280","endLine":7,"endColumn":54},{"ruleId":"277","severity":1,"message":"296","line":7,"column":56,"nodeType":"279","messageId":"280","endLine":7,"endColumn":63},{"ruleId":"277","severity":1,"message":"297","line":7,"column":65,"nodeType":"279","messageId":"280","endLine":7,"endColumn":71},{"ruleId":"277","severity":1,"message":"298","line":8,"column":35,"nodeType":"279","messageId":"280","endLine":8,"endColumn":40},{"ruleId":"277","severity":1,"message":"299","line":8,"column":42,"nodeType":"279","messageId":"280","endLine":8,"endColumn":46},{"ruleId":"277","severity":1,"message":"300","line":10,"column":9,"nodeType":"279","messageId":"280","endLine":10,"endColumn":15},{"ruleId":"277","severity":1,"message":"301","line":10,"column":17,"nodeType":"279","messageId":"280","endLine":10,"endColumn":24},{"ruleId":"277","severity":1,"message":"302","line":10,"column":26,"nodeType":"279","messageId":"280","endLine":10,"endColumn":32},{"ruleId":"277","severity":1,"message":"303","line":10,"column":34,"nodeType":"279","messageId":"280","endLine":10,"endColumn":39},{"ruleId":"277","severity":1,"message":"304","line":11,"column":7,"nodeType":"279","messageId":"280","endLine":11,"endColumn":17},"no-native-reassign",["320"],"no-negated-in-lhs",["321"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'MailOutlined' is defined but never used.","'Switch' is defined but never used.","'AutoComplete' is defined but never used.","'Menu' is defined but never used.","'Table' is defined but never used.","'Carousel' is defined but never used.","'Breadcrumb' is defined but never used.","'range' is defined but never used.","'compile' is defined but never used.","'det' is defined but never used.","'LineChart' is defined but never used.","'Line' is defined but never used.","'CartesianGrid' is defined but never used.","'XAxis' is defined but never used.","'YAxis' is defined but never used.","'Tooltip' is defined but never used.","'Legend' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Header' is assigned a value but never used.","'Content' is assigned a value but never used.","'Footer' is assigned a value but never used.","'Sider' is assigned a value but never used.","'InputColor' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'printFraction'.","MethodDefinition","unexpected","'lusolve' is defined but never used.","'format' is defined but never used.","'output' is defined but never used.","'InputStyle' is assigned a value but never used.","'subtract' is defined but never used.","'multiply' is defined but never used.","'transpose' is defined but never used.","'add' is defined but never used.","'inv' is defined but never used.","'fraction' is defined but never used.","'Empty' is defined but never used.","no-global-assign","no-unsafe-negation"]