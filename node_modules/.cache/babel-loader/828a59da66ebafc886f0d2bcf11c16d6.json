{"ast":null,"code":"import { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { escape } from '../../utils/string.js';\nimport { forEach, join } from '../../utils/array.js';\nimport { toSymbol } from '../../utils/latex.js';\nimport { getPrecedence } from '../operators.js';\nimport { setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'FunctionAssignmentNode';\nvar dependencies = ['typed', 'Node'];\nexport var createFunctionAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Node\n  } = _ref;\n  /**\r\n   * @constructor FunctionAssignmentNode\r\n   * @extends {Node}\r\n   * Function assignment\r\n   *\r\n   * @param {string} name           Function name\r\n   * @param {string[] | Array.<{name: string, type: string}>} params\r\n   *                                Array with function parameter names, or an\r\n   *                                array with objects containing the name\r\n   *                                and type of the parameter\r\n   * @param {Node} expr             The function expression\r\n   */\n\n  function FunctionAssignmentNode(name, params, expr) {\n    if (!(this instanceof FunctionAssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\n    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n    if (!isNode(expr)) throw new TypeError('Node expected for parameter \"expr\"');\n    if (name in keywords) throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n    this.name = name;\n    this.params = params.map(function (param) {\n      return param && param.name || param;\n    });\n    this.types = params.map(function (param) {\n      return param && param.type || 'any';\n    });\n    this.expr = expr;\n  }\n\n  FunctionAssignmentNode.prototype = new Node();\n  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';\n  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;\n  /**\r\n   * Compile a node into a JavaScript function.\r\n   * This basically pre-calculates as much as possible and only leaves open\r\n   * calculations which depend on a dynamic scope with variables.\r\n   * @param {Object} math     Math.js namespace with functions and constants.\r\n   * @param {Object} argNames An object with argument names as key and `true`\r\n   *                          as value. Used in the SymbolNode to optimize\r\n   *                          for arguments from user assigned functions\r\n   *                          (see FunctionAssignmentNode) or special symbols\r\n   *                          like `end` (see IndexNode).\r\n   * @return {function} Returns a function which can be called like:\r\n   *                        evalNode(scope: Object, args: Object, context: *)\r\n   */\n\n  FunctionAssignmentNode.prototype._compile = function (math, argNames) {\n    var childArgNames = Object.create(argNames);\n    forEach(this.params, function (param) {\n      childArgNames[param] = true;\n    }); // compile the function expression with the child args\n\n    var evalExpr = this.expr._compile(math, childArgNames);\n\n    var name = this.name;\n    var params = this.params;\n    var signature = join(this.types, ',');\n    var syntax = name + '(' + join(this.params, ', ') + ')';\n    return function evalFunctionAssignmentNode(scope, args, context) {\n      var signatures = {};\n\n      signatures[signature] = function () {\n        var childArgs = Object.create(args);\n\n        for (var i = 0; i < params.length; i++) {\n          childArgs[params[i]] = arguments[i];\n        }\n\n        return evalExpr(scope, childArgs, context);\n      };\n\n      var fn = typed(name, signatures);\n      fn.syntax = syntax;\n      setSafeProperty(scope, name, fn);\n      return fn;\n    };\n  };\n  /**\r\n   * Execute a callback for each of the child nodes of this node\r\n   * @param {function(child: Node, path: string, parent: Node)} callback\r\n   */\n\n\n  FunctionAssignmentNode.prototype.forEach = function (callback) {\n    callback(this.expr, 'expr', this);\n  };\n  /**\r\n   * Create a new FunctionAssignmentNode having it's childs be the results of calling\r\n   * the provided callback function for each of the childs of the original node.\r\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\r\n   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\r\n   */\n\n\n  FunctionAssignmentNode.prototype.map = function (callback) {\n    var expr = this._ifNode(callback(this.expr, 'expr', this));\n\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n  };\n  /**\r\n   * Create a clone of this node, a shallow copy\r\n   * @return {FunctionAssignmentNode}\r\n   */\n\n\n  FunctionAssignmentNode.prototype.clone = function () {\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n  };\n  /**\r\n   * Is parenthesis needed?\r\n   * @param {Node} node\r\n   * @param {Object} parenthesis\r\n   * @private\r\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    var precedence = getPrecedence(node, parenthesis);\n    var exprPrecedence = getPrecedence(node.expr, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\r\n   * get string representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   */\n\n\n  FunctionAssignmentNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var expr = this.expr.toString(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = '(' + expr + ')';\n    }\n\n    return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n  };\n  /**\r\n   * Get a JSON representation of the node\r\n   * @returns {Object}\r\n   */\n\n\n  FunctionAssignmentNode.prototype.toJSON = function () {\n    var types = this.types;\n    return {\n      mathjs: 'FunctionAssignmentNode',\n      name: this.name,\n      params: this.params.map(function (param, index) {\n        return {\n          name: param,\n          type: types[index]\n        };\n      }),\n      expr: this.expr\n    };\n  };\n  /**\r\n   * Instantiate an FunctionAssignmentNode from its JSON representation\r\n   * @param {Object} json  An object structured like\r\n   *                       `{\"mathjs\": \"FunctionAssignmentNode\", name: ..., params: ..., expr: ...}`,\r\n   *                       where mathjs is optional\r\n   * @returns {FunctionAssignmentNode}\r\n   */\n\n\n  FunctionAssignmentNode.fromJSON = function (json) {\n    return new FunctionAssignmentNode(json.name, json.params, json.expr);\n  };\n  /**\r\n   * get HTML representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   */\n\n\n  FunctionAssignmentNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var params = [];\n\n    for (var i = 0; i < this.params.length; i++) {\n      params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n    }\n\n    var expr = this.expr.toHTML(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span><span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n  };\n  /**\r\n   * get LaTeX representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   */\n\n\n  FunctionAssignmentNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var expr = this.expr.toTex(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n    }\n\n    return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(toSymbol).join(',') + '\\\\right):=' + expr;\n  };\n\n  return FunctionAssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/expression/node/FunctionAssignmentNode.js"],"names":["isNode","keywords","escape","forEach","join","toSymbol","getPrecedence","setSafeProperty","factory","name","dependencies","createFunctionAssignmentNode","_ref","typed","Node","FunctionAssignmentNode","params","expr","SyntaxError","TypeError","Array","isArray","Error","map","param","types","type","prototype","isFunctionAssignmentNode","_compile","math","argNames","childArgNames","Object","create","evalExpr","signature","syntax","evalFunctionAssignmentNode","scope","args","context","signatures","childArgs","i","length","arguments","fn","callback","_ifNode","slice","clone","needParenthesis","node","parenthesis","precedence","exprPrecedence","_toString","options","toString","toJSON","mathjs","index","fromJSON","json","toHTML","push","_toTex","toTex","concat","isClass"],"mappings":"AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,sBAA9B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,wBAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,CAAnB;AACA,OAAO,IAAIC,4BAA4B,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC7F,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASG,sBAAT,CAAgCN,IAAhC,EAAsCO,MAAtC,EAA8CC,IAA9C,EAAoD;AAClD,QAAI,EAAE,gBAAgBF,sBAAlB,CAAJ,EAA+C;AAC7C,YAAM,IAAIG,WAAJ,CAAgB,kDAAhB,CAAN;AACD,KAHiD,CAGhD;;;AAGF,QAAI,OAAOT,IAAP,KAAgB,QAApB,EAA8B,MAAM,IAAIU,SAAJ,CAAc,sCAAd,CAAN;AAC9B,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcL,MAAd,CAAL,EAA4B,MAAM,IAAIG,SAAJ,CAAc,qEAAd,CAAN;AAC5B,QAAI,CAACnB,MAAM,CAACiB,IAAD,CAAX,EAAmB,MAAM,IAAIE,SAAJ,CAAc,oCAAd,CAAN;AACnB,QAAIV,IAAI,IAAIR,QAAZ,EAAsB,MAAM,IAAIqB,KAAJ,CAAU,6BAA6Bb,IAA7B,GAAoC,yBAA9C,CAAN;AACtB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKO,MAAL,GAAcA,MAAM,CAACO,GAAP,CAAW,UAAUC,KAAV,EAAiB;AACxC,aAAOA,KAAK,IAAIA,KAAK,CAACf,IAAf,IAAuBe,KAA9B;AACD,KAFa,CAAd;AAGA,SAAKC,KAAL,GAAaT,MAAM,CAACO,GAAP,CAAW,UAAUC,KAAV,EAAiB;AACvC,aAAOA,KAAK,IAAIA,KAAK,CAACE,IAAf,IAAuB,KAA9B;AACD,KAFY,CAAb;AAGA,SAAKT,IAAL,GAAYA,IAAZ;AACD;;AAEDF,EAAAA,sBAAsB,CAACY,SAAvB,GAAmC,IAAIb,IAAJ,EAAnC;AACAC,EAAAA,sBAAsB,CAACY,SAAvB,CAAiCD,IAAjC,GAAwC,wBAAxC;AACAX,EAAAA,sBAAsB,CAACY,SAAvB,CAAiCC,wBAAjC,GAA4D,IAA5D;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEEb,EAAAA,sBAAsB,CAACY,SAAvB,CAAiCE,QAAjC,GAA4C,UAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AACpE,QAAIC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAcH,QAAd,CAApB;AACA5B,IAAAA,OAAO,CAAC,KAAKa,MAAN,EAAc,UAAUQ,KAAV,EAAiB;AACpCQ,MAAAA,aAAa,CAACR,KAAD,CAAb,GAAuB,IAAvB;AACD,KAFM,CAAP,CAFoE,CAIhE;;AAEJ,QAAIW,QAAQ,GAAG,KAAKlB,IAAL,CAAUY,QAAV,CAAmBC,IAAnB,EAAyBE,aAAzB,CAAf;;AAEA,QAAIvB,IAAI,GAAG,KAAKA,IAAhB;AACA,QAAIO,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIoB,SAAS,GAAGhC,IAAI,CAAC,KAAKqB,KAAN,EAAa,GAAb,CAApB;AACA,QAAIY,MAAM,GAAG5B,IAAI,GAAG,GAAP,GAAaL,IAAI,CAAC,KAAKY,MAAN,EAAc,IAAd,CAAjB,GAAuC,GAApD;AACA,WAAO,SAASsB,0BAAT,CAAoCC,KAApC,EAA2CC,IAA3C,EAAiDC,OAAjD,EAA0D;AAC/D,UAAIC,UAAU,GAAG,EAAjB;;AAEAA,MAAAA,UAAU,CAACN,SAAD,CAAV,GAAwB,YAAY;AAClC,YAAIO,SAAS,GAAGV,MAAM,CAACC,MAAP,CAAcM,IAAd,CAAhB;;AAEA,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5B,MAAM,CAAC6B,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCD,UAAAA,SAAS,CAAC3B,MAAM,CAAC4B,CAAD,CAAP,CAAT,GAAuBE,SAAS,CAACF,CAAD,CAAhC;AACD;;AAED,eAAOT,QAAQ,CAACI,KAAD,EAAQI,SAAR,EAAmBF,OAAnB,CAAf;AACD,OARD;;AAUA,UAAIM,EAAE,GAAGlC,KAAK,CAACJ,IAAD,EAAOiC,UAAP,CAAd;AACAK,MAAAA,EAAE,CAACV,MAAH,GAAYA,MAAZ;AACA9B,MAAAA,eAAe,CAACgC,KAAD,EAAQ9B,IAAR,EAAcsC,EAAd,CAAf;AACA,aAAOA,EAAP;AACD,KAjBD;AAkBD,GA9BD;AA+BA;AACF;AACA;AACA;;;AAGEhC,EAAAA,sBAAsB,CAACY,SAAvB,CAAiCxB,OAAjC,GAA2C,UAAU6C,QAAV,EAAoB;AAC7DA,IAAAA,QAAQ,CAAC,KAAK/B,IAAN,EAAY,MAAZ,EAAoB,IAApB,CAAR;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;AACA;;;AAGEF,EAAAA,sBAAsB,CAACY,SAAvB,CAAiCJ,GAAjC,GAAuC,UAAUyB,QAAV,EAAoB;AACzD,QAAI/B,IAAI,GAAG,KAAKgC,OAAL,CAAaD,QAAQ,CAAC,KAAK/B,IAAN,EAAY,MAAZ,EAAoB,IAApB,CAArB,CAAX;;AAEA,WAAO,IAAIF,sBAAJ,CAA2B,KAAKN,IAAhC,EAAsC,KAAKO,MAAL,CAAYkC,KAAZ,CAAkB,CAAlB,CAAtC,EAA4DjC,IAA5D,CAAP;AACD,GAJD;AAKA;AACF;AACA;AACA;;;AAGEF,EAAAA,sBAAsB,CAACY,SAAvB,CAAiCwB,KAAjC,GAAyC,YAAY;AACnD,WAAO,IAAIpC,sBAAJ,CAA2B,KAAKN,IAAhC,EAAsC,KAAKO,MAAL,CAAYkC,KAAZ,CAAkB,CAAlB,CAAtC,EAA4D,KAAKjC,IAAjE,CAAP;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;AACA;;;AAGE,WAASmC,eAAT,CAAyBC,IAAzB,EAA+BC,WAA/B,EAA4C;AAC1C,QAAIC,UAAU,GAAGjD,aAAa,CAAC+C,IAAD,EAAOC,WAAP,CAA9B;AACA,QAAIE,cAAc,GAAGlD,aAAa,CAAC+C,IAAI,CAACpC,IAAN,EAAYqC,WAAZ,CAAlC;AACA,WAAOA,WAAW,KAAK,KAAhB,IAAyBE,cAAc,KAAK,IAAnB,IAA2BA,cAAc,IAAID,UAA7E;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGExC,EAAAA,sBAAsB,CAACY,SAAvB,CAAiC8B,SAAjC,GAA6C,UAAUC,OAAV,EAAmB;AAC9D,QAAIJ,WAAW,GAAGI,OAAO,IAAIA,OAAO,CAACJ,WAAnB,GAAiCI,OAAO,CAACJ,WAAzC,GAAuD,MAAzE;AACA,QAAIrC,IAAI,GAAG,KAAKA,IAAL,CAAU0C,QAAV,CAAmBD,OAAnB,CAAX;;AAEA,QAAIN,eAAe,CAAC,IAAD,EAAOE,WAAP,CAAnB,EAAwC;AACtCrC,MAAAA,IAAI,GAAG,MAAMA,IAAN,GAAa,GAApB;AACD;;AAED,WAAO,KAAKR,IAAL,GAAY,GAAZ,GAAkB,KAAKO,MAAL,CAAYZ,IAAZ,CAAiB,IAAjB,CAAlB,GAA2C,MAA3C,GAAoDa,IAA3D;AACD,GATD;AAUA;AACF;AACA;AACA;;;AAGEF,EAAAA,sBAAsB,CAACY,SAAvB,CAAiCiC,MAAjC,GAA0C,YAAY;AACpD,QAAInC,KAAK,GAAG,KAAKA,KAAjB;AACA,WAAO;AACLoC,MAAAA,MAAM,EAAE,wBADH;AAELpD,MAAAA,IAAI,EAAE,KAAKA,IAFN;AAGLO,MAAAA,MAAM,EAAE,KAAKA,MAAL,CAAYO,GAAZ,CAAgB,UAAUC,KAAV,EAAiBsC,KAAjB,EAAwB;AAC9C,eAAO;AACLrD,UAAAA,IAAI,EAAEe,KADD;AAELE,UAAAA,IAAI,EAAED,KAAK,CAACqC,KAAD;AAFN,SAAP;AAID,OALO,CAHH;AASL7C,MAAAA,IAAI,EAAE,KAAKA;AATN,KAAP;AAWD,GAbD;AAcA;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGEF,EAAAA,sBAAsB,CAACgD,QAAvB,GAAkC,UAAUC,IAAV,EAAgB;AAChD,WAAO,IAAIjD,sBAAJ,CAA2BiD,IAAI,CAACvD,IAAhC,EAAsCuD,IAAI,CAAChD,MAA3C,EAAmDgD,IAAI,CAAC/C,IAAxD,CAAP;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;;;AAGEF,EAAAA,sBAAsB,CAACY,SAAvB,CAAiCsC,MAAjC,GAA0C,UAAUP,OAAV,EAAmB;AAC3D,QAAIJ,WAAW,GAAGI,OAAO,IAAIA,OAAO,CAACJ,WAAnB,GAAiCI,OAAO,CAACJ,WAAzC,GAAuD,MAAzE;AACA,QAAItC,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5B,MAAL,CAAY6B,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C5B,MAAAA,MAAM,CAACkD,IAAP,CAAY,8CAA8ChE,MAAM,CAAC,KAAKc,MAAL,CAAY4B,CAAZ,CAAD,CAApD,GAAuE,SAAnF;AACD;;AAED,QAAI3B,IAAI,GAAG,KAAKA,IAAL,CAAUgD,MAAV,CAAiBP,OAAjB,CAAX;;AAEA,QAAIN,eAAe,CAAC,IAAD,EAAOE,WAAP,CAAnB,EAAwC;AACtCrC,MAAAA,IAAI,GAAG,mEAAmEA,IAAnE,GAA0E,gEAAjF;AACD;;AAED,WAAO,iCAAiCf,MAAM,CAAC,KAAKO,IAAN,CAAvC,GAAqD,SAArD,GAAiE,gEAAjE,GAAoIO,MAAM,CAACZ,IAAP,CAAY,uCAAZ,CAApI,GAA2L,oLAA3L,GAAkXa,IAAzX;AACD,GAfD;AAgBA;AACF;AACA;AACA;AACA;;;AAGEF,EAAAA,sBAAsB,CAACY,SAAvB,CAAiCwC,MAAjC,GAA0C,UAAUT,OAAV,EAAmB;AAC3D,QAAIJ,WAAW,GAAGI,OAAO,IAAIA,OAAO,CAACJ,WAAnB,GAAiCI,OAAO,CAACJ,WAAzC,GAAuD,MAAzE;AACA,QAAIrC,IAAI,GAAG,KAAKA,IAAL,CAAUmD,KAAV,CAAgBV,OAAhB,CAAX;;AAEA,QAAIN,eAAe,CAAC,IAAD,EAAOE,WAAP,CAAnB,EAAwC;AACtCrC,MAAAA,IAAI,GAAG,UAAUoD,MAAV,CAAiBpD,IAAjB,EAAuB,UAAvB,CAAP;AACD;;AAED,WAAO,cAAc,KAAKR,IAAnB,GAA0B,UAA1B,GAAuC,KAAKO,MAAL,CAAYO,GAAZ,CAAgBlB,QAAhB,EAA0BD,IAA1B,CAA+B,GAA/B,CAAvC,GAA6E,YAA7E,GAA4Fa,IAAnG;AACD,GATD;;AAWA,SAAOF,sBAAP;AACD,CA7N+D,EA6N7D;AACDuD,EAAAA,OAAO,EAAE,IADR;AAEDtE,EAAAA,MAAM,EAAE;AAFP,CA7N6D,CAAzD","sourcesContent":["import { isNode } from '../../utils/is.js';\r\nimport { keywords } from '../keywords.js';\r\nimport { escape } from '../../utils/string.js';\r\nimport { forEach, join } from '../../utils/array.js';\r\nimport { toSymbol } from '../../utils/latex.js';\r\nimport { getPrecedence } from '../operators.js';\r\nimport { setSafeProperty } from '../../utils/customs.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'FunctionAssignmentNode';\r\nvar dependencies = ['typed', 'Node'];\r\nexport var createFunctionAssignmentNode = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    Node\r\n  } = _ref;\r\n\r\n  /**\r\n   * @constructor FunctionAssignmentNode\r\n   * @extends {Node}\r\n   * Function assignment\r\n   *\r\n   * @param {string} name           Function name\r\n   * @param {string[] | Array.<{name: string, type: string}>} params\r\n   *                                Array with function parameter names, or an\r\n   *                                array with objects containing the name\r\n   *                                and type of the parameter\r\n   * @param {Node} expr             The function expression\r\n   */\r\n  function FunctionAssignmentNode(name, params, expr) {\r\n    if (!(this instanceof FunctionAssignmentNode)) {\r\n      throw new SyntaxError('Constructor must be called with the new operator');\r\n    } // validate input\r\n\r\n\r\n    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\r\n    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\r\n    if (!isNode(expr)) throw new TypeError('Node expected for parameter \"expr\"');\r\n    if (name in keywords) throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\r\n    this.name = name;\r\n    this.params = params.map(function (param) {\r\n      return param && param.name || param;\r\n    });\r\n    this.types = params.map(function (param) {\r\n      return param && param.type || 'any';\r\n    });\r\n    this.expr = expr;\r\n  }\r\n\r\n  FunctionAssignmentNode.prototype = new Node();\r\n  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';\r\n  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;\r\n  /**\r\n   * Compile a node into a JavaScript function.\r\n   * This basically pre-calculates as much as possible and only leaves open\r\n   * calculations which depend on a dynamic scope with variables.\r\n   * @param {Object} math     Math.js namespace with functions and constants.\r\n   * @param {Object} argNames An object with argument names as key and `true`\r\n   *                          as value. Used in the SymbolNode to optimize\r\n   *                          for arguments from user assigned functions\r\n   *                          (see FunctionAssignmentNode) or special symbols\r\n   *                          like `end` (see IndexNode).\r\n   * @return {function} Returns a function which can be called like:\r\n   *                        evalNode(scope: Object, args: Object, context: *)\r\n   */\r\n\r\n  FunctionAssignmentNode.prototype._compile = function (math, argNames) {\r\n    var childArgNames = Object.create(argNames);\r\n    forEach(this.params, function (param) {\r\n      childArgNames[param] = true;\r\n    }); // compile the function expression with the child args\r\n\r\n    var evalExpr = this.expr._compile(math, childArgNames);\r\n\r\n    var name = this.name;\r\n    var params = this.params;\r\n    var signature = join(this.types, ',');\r\n    var syntax = name + '(' + join(this.params, ', ') + ')';\r\n    return function evalFunctionAssignmentNode(scope, args, context) {\r\n      var signatures = {};\r\n\r\n      signatures[signature] = function () {\r\n        var childArgs = Object.create(args);\r\n\r\n        for (var i = 0; i < params.length; i++) {\r\n          childArgs[params[i]] = arguments[i];\r\n        }\r\n\r\n        return evalExpr(scope, childArgs, context);\r\n      };\r\n\r\n      var fn = typed(name, signatures);\r\n      fn.syntax = syntax;\r\n      setSafeProperty(scope, name, fn);\r\n      return fn;\r\n    };\r\n  };\r\n  /**\r\n   * Execute a callback for each of the child nodes of this node\r\n   * @param {function(child: Node, path: string, parent: Node)} callback\r\n   */\r\n\r\n\r\n  FunctionAssignmentNode.prototype.forEach = function (callback) {\r\n    callback(this.expr, 'expr', this);\r\n  };\r\n  /**\r\n   * Create a new FunctionAssignmentNode having it's childs be the results of calling\r\n   * the provided callback function for each of the childs of the original node.\r\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\r\n   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\r\n   */\r\n\r\n\r\n  FunctionAssignmentNode.prototype.map = function (callback) {\r\n    var expr = this._ifNode(callback(this.expr, 'expr', this));\r\n\r\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\r\n  };\r\n  /**\r\n   * Create a clone of this node, a shallow copy\r\n   * @return {FunctionAssignmentNode}\r\n   */\r\n\r\n\r\n  FunctionAssignmentNode.prototype.clone = function () {\r\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\r\n  };\r\n  /**\r\n   * Is parenthesis needed?\r\n   * @param {Node} node\r\n   * @param {Object} parenthesis\r\n   * @private\r\n   */\r\n\r\n\r\n  function needParenthesis(node, parenthesis) {\r\n    var precedence = getPrecedence(node, parenthesis);\r\n    var exprPrecedence = getPrecedence(node.expr, parenthesis);\r\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\r\n  }\r\n  /**\r\n   * get string representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   */\r\n\r\n\r\n  FunctionAssignmentNode.prototype._toString = function (options) {\r\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\r\n    var expr = this.expr.toString(options);\r\n\r\n    if (needParenthesis(this, parenthesis)) {\r\n      expr = '(' + expr + ')';\r\n    }\r\n\r\n    return this.name + '(' + this.params.join(', ') + ') = ' + expr;\r\n  };\r\n  /**\r\n   * Get a JSON representation of the node\r\n   * @returns {Object}\r\n   */\r\n\r\n\r\n  FunctionAssignmentNode.prototype.toJSON = function () {\r\n    var types = this.types;\r\n    return {\r\n      mathjs: 'FunctionAssignmentNode',\r\n      name: this.name,\r\n      params: this.params.map(function (param, index) {\r\n        return {\r\n          name: param,\r\n          type: types[index]\r\n        };\r\n      }),\r\n      expr: this.expr\r\n    };\r\n  };\r\n  /**\r\n   * Instantiate an FunctionAssignmentNode from its JSON representation\r\n   * @param {Object} json  An object structured like\r\n   *                       `{\"mathjs\": \"FunctionAssignmentNode\", name: ..., params: ..., expr: ...}`,\r\n   *                       where mathjs is optional\r\n   * @returns {FunctionAssignmentNode}\r\n   */\r\n\r\n\r\n  FunctionAssignmentNode.fromJSON = function (json) {\r\n    return new FunctionAssignmentNode(json.name, json.params, json.expr);\r\n  };\r\n  /**\r\n   * get HTML representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   */\r\n\r\n\r\n  FunctionAssignmentNode.prototype.toHTML = function (options) {\r\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\r\n    var params = [];\r\n\r\n    for (var i = 0; i < this.params.length; i++) {\r\n      params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\r\n    }\r\n\r\n    var expr = this.expr.toHTML(options);\r\n\r\n    if (needParenthesis(this, parenthesis)) {\r\n      expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\r\n    }\r\n\r\n    return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span><span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\r\n  };\r\n  /**\r\n   * get LaTeX representation\r\n   * @param {Object} options\r\n   * @return {string} str\r\n   */\r\n\r\n\r\n  FunctionAssignmentNode.prototype._toTex = function (options) {\r\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\r\n    var expr = this.expr.toTex(options);\r\n\r\n    if (needParenthesis(this, parenthesis)) {\r\n      expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\r\n    }\r\n\r\n    return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(toSymbol).join(',') + '\\\\right):=' + expr;\r\n  };\r\n\r\n  return FunctionAssignmentNode;\r\n}, {\r\n  isClass: true,\r\n  isNode: true\r\n});"]},"metadata":{},"sourceType":"module"}