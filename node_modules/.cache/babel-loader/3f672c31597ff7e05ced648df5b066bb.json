{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'bin';\nvar dependencies = ['typed', 'format'];\n/**\r\n * Format a number as binary.\r\n *\r\n * Syntax:\r\n *\r\n *    math.bin(value)\r\n *\r\n * Examples:\r\n *\r\n *    //the following outputs \"0b10\"\r\n *    math.bin(2)\r\n *\r\n * See also:\r\n *\r\n *    oct\r\n *    hex\r\n *\r\n * @param {number} value    Value to be stringified\r\n * @param {number} wordSize Optional word size (see `format`)\r\n * @return {string}         The formatted value\r\n */\n\nexport var createBin = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'bin'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'bin',\n        wordSize: wordSize\n      });\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/string/bin.js"],"names":["factory","name","dependencies","createBin","_ref","typed","format","numberBigNumber","n","notation","numberBigNumberNumber","wordSize"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,SAAS,GAAGH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC3D,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAIA,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,0BAAsB,SAASM,eAAT,CAAyBC,CAAzB,EAA4B;AAChD,aAAOF,MAAM,CAACE,CAAD,EAAI;AACfC,QAAAA,QAAQ,EAAE;AADK,OAAJ,CAAb;AAGD,KALgB;AAMjB,kCAA8B,SAASC,qBAAT,CAA+BF,CAA/B,EAAkCG,QAAlC,EAA4C;AACxE,aAAOL,MAAM,CAACE,CAAD,EAAI;AACfC,QAAAA,QAAQ,EAAE,KADK;AAEfE,QAAAA,QAAQ,EAAEA;AAFK,OAAJ,CAAb;AAID;AAXgB,GAAP,CAAZ;AAaD,CAlB6B,CAAvB","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'bin';\r\nvar dependencies = ['typed', 'format'];\r\n/**\r\n * Format a number as binary.\r\n *\r\n * Syntax:\r\n *\r\n *    math.bin(value)\r\n *\r\n * Examples:\r\n *\r\n *    //the following outputs \"0b10\"\r\n *    math.bin(2)\r\n *\r\n * See also:\r\n *\r\n *    oct\r\n *    hex\r\n *\r\n * @param {number} value    Value to be stringified\r\n * @param {number} wordSize Optional word size (see `format`)\r\n * @return {string}         The formatted value\r\n */\r\n\r\nexport var createBin = factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    format\r\n  } = _ref;\r\n  return typed(name, {\r\n    'number | BigNumber': function numberBigNumber(n) {\r\n      return format(n, {\r\n        notation: 'bin'\r\n      });\r\n    },\r\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\r\n      return format(n, {\r\n        notation: 'bin',\r\n        wordSize: wordSize\r\n      });\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}