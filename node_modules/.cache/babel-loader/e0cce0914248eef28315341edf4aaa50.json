{"ast":null,"code":"import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { noMatrix } from '../../utils/noop.js';\nvar name = 'size';\nvar dependencies = ['typed', 'config', '?matrix'];\nexport var createSize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix\n  } = _ref;\n  /**\r\n   * Calculate the size of a matrix or scalar.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.size(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.size(2.3)                  // returns []\r\n   *     math.size('hello world')        // returns [11]\r\n   *\r\n   *     const A = [[1, 2, 3], [4, 5, 6]]\r\n   *     math.size(A)                    // returns [2, 3]\r\n   *     math.size(math.range(1,6))      // returns [5]\r\n   *\r\n   * See also:\r\n   *\r\n   *     count, resize, squeeze, subset\r\n   *\r\n   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\r\n   * @return {Array | Matrix} A vector with size of `x`.\r\n   */\n\n  return typed(name, {\n    Matrix: function Matrix(x) {\n      return x.create(x.size());\n    },\n    Array: arraySize,\n    string: function string(x) {\n      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);\n    },\n    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {\n      // scalar\n      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/matrix/size.js"],"names":["arraySize","factory","noMatrix","name","dependencies","createSize","_ref","typed","config","matrix","Matrix","x","create","size","Array","string","length","numberComplexBigNumberUnitBooleanNull"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC3E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBO,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,aAAOA,CAAC,CAACC,MAAF,CAASD,CAAC,CAACE,IAAF,EAAT,CAAP;AACD,KAHgB;AAIjBC,IAAAA,KAAK,EAAEd,SAJU;AAKjBe,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBJ,CAAhB,EAAmB;AACzB,aAAOH,MAAM,CAACC,MAAP,KAAkB,OAAlB,GAA4B,CAACE,CAAC,CAACK,MAAH,CAA5B,GAAyCP,MAAM,CAAC,CAACE,CAAC,CAACK,MAAH,CAAD,CAAtD;AACD,KAPgB;AAQjB,4DAAwD,SAASC,qCAAT,CAA+CN,CAA/C,EAAkD;AACxG;AACA,aAAOH,MAAM,CAACC,MAAP,KAAkB,OAAlB,GAA4B,EAA5B,GAAiCA,MAAM,GAAGA,MAAM,CAAC,EAAD,CAAT,GAAgBP,QAAQ,EAAtE;AACD;AAXgB,GAAP,CAAZ;AAaD,CA3C6C,CAAvC","sourcesContent":["import { arraySize } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { noMatrix } from '../../utils/noop.js';\r\nvar name = 'size';\r\nvar dependencies = ['typed', 'config', '?matrix'];\r\nexport var createSize = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    config,\r\n    matrix\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the size of a matrix or scalar.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.size(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.size(2.3)                  // returns []\r\n   *     math.size('hello world')        // returns [11]\r\n   *\r\n   *     const A = [[1, 2, 3], [4, 5, 6]]\r\n   *     math.size(A)                    // returns [2, 3]\r\n   *     math.size(math.range(1,6))      // returns [5]\r\n   *\r\n   * See also:\r\n   *\r\n   *     count, resize, squeeze, subset\r\n   *\r\n   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\r\n   * @return {Array | Matrix} A vector with size of `x`.\r\n   */\r\n  return typed(name, {\r\n    Matrix: function Matrix(x) {\r\n      return x.create(x.size());\r\n    },\r\n    Array: arraySize,\r\n    string: function string(x) {\r\n      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);\r\n    },\r\n    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {\r\n      // scalar\r\n      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}