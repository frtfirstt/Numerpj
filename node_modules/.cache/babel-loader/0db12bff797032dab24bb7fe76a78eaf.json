{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { cschNumber } from '../../plain/number/index.js';\nvar name = 'csch';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCsch = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\r\n   * Calculate the hyperbolic cosecant of a value,\r\n   * defined as `csch(x) = 1 / sinh(x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.csch(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // csch(x) = 1/ sinh(x)\r\n   *    math.csch(0.5)       // returns 1.9190347513349437\r\n   *    1 / math.sinh(0.5)   // returns 1.9190347513349437\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, sech, coth\r\n   *\r\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x\r\n   */\n\n  return typed(name, {\n    number: cschNumber,\n    Complex: function Complex(x) {\n      return x.csch();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x.sinh());\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function csch is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/trigonometry/csch.js"],"names":["factory","deepMap","cschNumber","name","dependencies","createCsch","_ref","typed","BigNumber","_BigNumber","number","Complex","x","csch","div","sinh","Unit","hasBase","constructor","BASE_UNITS","ANGLE","TypeError","value","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC3E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,SAAS,EAAEC;AAFT,MAGAH,IAHJ;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBO,IAAAA,MAAM,EAAER,UADS;AAEjBS,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACC,IAAF,EAAP;AACD,KAJgB;AAKjBL,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBI,CAAnB,EAAsB;AAC/B,aAAO,IAAIH,UAAJ,CAAe,CAAf,EAAkBK,GAAlB,CAAsBF,CAAC,CAACG,IAAF,EAAtB,CAAP;AACD,KAPgB;AAQjBC,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcJ,CAAd,EAAiB;AACrB,UAAI,CAACA,CAAC,CAACK,OAAF,CAAUL,CAAC,CAACM,WAAF,CAAcC,UAAd,CAAyBC,KAAnC,CAAL,EAAgD;AAC9C,cAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAED,aAAO,KAAKT,CAAC,CAACU,KAAP,CAAP;AACD,KAdgB;AAejB,sBAAkB,SAASC,WAAT,CAAqBX,CAArB,EAAwB;AACxC,aAAOX,OAAO,CAACW,CAAD,EAAI,IAAJ,CAAd;AACD;AAjBgB,GAAP,CAAZ;AAmBD,CAhD6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { cschNumber } from '../../plain/number/index.js';\r\nvar name = 'csch';\r\nvar dependencies = ['typed', 'BigNumber'];\r\nexport var createCsch = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    BigNumber: _BigNumber\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the hyperbolic cosecant of a value,\r\n   * defined as `csch(x) = 1 / sinh(x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.csch(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // csch(x) = 1/ sinh(x)\r\n   *    math.csch(0.5)       // returns 1.9190347513349437\r\n   *    1 / math.sinh(0.5)   // returns 1.9190347513349437\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, sech, coth\r\n   *\r\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x\r\n   */\r\n  return typed(name, {\r\n    number: cschNumber,\r\n    Complex: function Complex(x) {\r\n      return x.csch();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return new _BigNumber(1).div(x.sinh());\r\n    },\r\n    Unit: function Unit(x) {\r\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError('Unit in function csch is no angle');\r\n      }\r\n\r\n      return this(x.value);\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}