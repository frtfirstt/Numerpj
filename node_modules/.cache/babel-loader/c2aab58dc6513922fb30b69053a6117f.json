{"ast":null,"code":"import { isInteger, log2, log10, cbrt, expm1, sign, toFixed, log1p } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function absNumber(a) {\n  return Math.abs(a);\n}\nabsNumber.signature = n1;\nexport function addNumber(a, b) {\n  return a + b;\n}\naddNumber.signature = n2;\nexport function subtractNumber(a, b) {\n  return a - b;\n}\nsubtractNumber.signature = n2;\nexport function multiplyNumber(a, b) {\n  return a * b;\n}\nmultiplyNumber.signature = n2;\nexport function divideNumber(a, b) {\n  return a / b;\n}\ndivideNumber.signature = n2;\nexport function unaryMinusNumber(x) {\n  return -x;\n}\nunaryMinusNumber.signature = n1;\nexport function unaryPlusNumber(x) {\n  return x;\n}\nunaryPlusNumber.signature = n1;\nexport function cbrtNumber(x) {\n  return cbrt(x);\n}\ncbrtNumber.signature = n1;\nexport function ceilNumber(x) {\n  return Math.ceil(x);\n}\nceilNumber.signature = n1;\nexport function cubeNumber(x) {\n  return x * x * x;\n}\ncubeNumber.signature = n1;\nexport function expNumber(x) {\n  return Math.exp(x);\n}\nexpNumber.signature = n1;\nexport function expm1Number(x) {\n  return expm1(x);\n}\nexpm1Number.signature = n1;\nexport function fixNumber(x) {\n  return x > 0 ? Math.floor(x) : Math.ceil(x);\n}\nfixNumber.signature = n1;\nexport function floorNumber(x) {\n  return Math.floor(x);\n}\nfloorNumber.signature = n1;\n/**\r\n * Calculate gcd for numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number} Returns the greatest common denominator of a and b\r\n */\n\nexport function gcdNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n  var r;\n\n  while (b !== 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n\n  return a < 0 ? -a : a;\n}\ngcdNumber.signature = n2;\n/**\r\n * Calculate lcm for two numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number} Returns the least common multiple of a and b\r\n */\n\nexport function lcmNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function lcm must be integer numbers');\n  }\n\n  if (a === 0 || b === 0) {\n    return 0;\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  // evaluate lcm here inline to reduce overhead\n\n\n  var t;\n  var prod = a * b;\n\n  while (b !== 0) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n\n  return Math.abs(prod / a);\n}\nlcmNumber.signature = n2;\n/**\r\n * Calculate the logarithm of a value.\r\n * @param {number} x\r\n * @return {number}\r\n */\n\nexport function logNumber(x) {\n  return Math.log(x);\n}\nlogNumber.signature = n1;\n/**\r\n * Calculate the 10-base logarithm of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\n\nexport function log10Number(x) {\n  return log10(x);\n}\nlog10Number.signature = n1;\n/**\r\n * Calculate the 2-base logarithm of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\n\nexport function log2Number(x) {\n  return log2(x);\n}\nlog2Number.signature = n1;\n/**\r\n * Calculate the natural logarithm of a `number+1`\r\n * @param {number} x\r\n * @returns {number}\r\n */\n\nexport function log1pNumber(x) {\n  return log1p(x);\n}\nlog1pNumber.signature = n1;\n/**\r\n * Calculate the modulus of two numbers\r\n * @param {number} x\r\n * @param {number} y\r\n * @returns {number} res\r\n * @private\r\n */\n\nexport function modNumber(x, y) {\n  if (y > 0) {\n    // We don't use JavaScript's % operator here as this doesn't work\n    // correctly for x < 0 and x === 0\n    // see https://en.wikipedia.org/wiki/Modulo_operation\n    return x - y * Math.floor(x / y);\n  } else if (y === 0) {\n    return x;\n  } else {\n    // y < 0\n    // TODO: implement mod for a negative divisor\n    throw new Error('Cannot calculate mod for a negative divisor');\n  }\n}\nmodNumber.signature = n2;\n/**\r\n * Calculate the nth root of a, solve x^root == a\r\n * http://rosettacode.org/wiki/Nth_root#JavaScript\r\n * @param {number} a\r\n * @param {number} root\r\n * @private\r\n */\n\nexport function nthRootNumber(a, root) {\n  var inv = root < 0;\n\n  if (inv) {\n    root = -root;\n  }\n\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\n    throw new Error('Root must be odd when a is negative.');\n  } // edge cases zero and infinity\n\n\n  if (a === 0) {\n    return inv ? Infinity : 0;\n  }\n\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n\n  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n\n  /*\r\n  let x = 1 // Initial guess\r\n  let xPrev = 1\r\n  let i = 0\r\n  const iMax = 10000\r\n  do {\r\n    const delta = (a / Math.pow(x, root - 1) - x) / root\r\n    xPrev = x\r\n    x = x + delta\r\n    i++\r\n  }\r\n  while (xPrev !== x && i < iMax)\r\n   if (xPrev !== x) {\r\n    throw new Error('Function nthRoot failed to converge')\r\n  }\r\n   return inv ? 1 / x : x\r\n  */\n}\nnthRootNumber.signature = n2;\nexport function signNumber(x) {\n  return sign(x);\n}\nsignNumber.signature = n1;\nexport function sqrtNumber(x) {\n  return Math.sqrt(x);\n}\nsqrtNumber.signature = n1;\nexport function squareNumber(x) {\n  return x * x;\n}\nsquareNumber.signature = n1;\n/**\r\n * Calculate xgcd for two numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @return {number} result\r\n * @private\r\n */\n\nexport function xgcdNumber(a, b) {\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n  var t; // used to swap two variables\n\n  var q; // quotient\n\n  var r; // remainder\n\n  var x = 0;\n  var lastx = 1;\n  var y = 1;\n  var lasty = 0;\n\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function xgcd must be integer numbers');\n  }\n\n  while (b) {\n    q = Math.floor(a / b);\n    r = a - q * b;\n    t = x;\n    x = lastx - q * x;\n    lastx = t;\n    t = y;\n    y = lasty - q * y;\n    lasty = t;\n    a = b;\n    b = r;\n  }\n\n  var res;\n\n  if (a < 0) {\n    res = [-a, -lastx, -lasty];\n  } else {\n    res = [a, a ? lastx : 0, lasty];\n  }\n\n  return res;\n}\nxgcdNumber.signature = n2;\n/**\r\n * Calculates the power of x to y, x^y, for two numbers.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {number} res\r\n */\n\nexport function powNumber(x, y) {\n  // x^Infinity === 0 if -1 < x < 1\n  // A real number 0 is returned instead of complex(0)\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n    return 0;\n  }\n\n  return Math.pow(x, y);\n}\npowNumber.signature = n2;\n/**\r\n * round a number to the given number of decimals, or to zero if decimals is\r\n * not provided\r\n * @param {number} value\r\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\r\n * @return {number} roundedValue\r\n */\n\nexport function roundNumber(value) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return parseFloat(toFixed(value, decimals));\n}\nroundNumber.signature = n2;\n/**\r\n * Calculate the norm of a number, the absolute value.\r\n * @param {number} x\r\n * @return {number}\r\n */\n\nexport function normNumber(x) {\n  return Math.abs(x);\n}\nnormNumber.signature = n1;","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/plain/number/arithmetic.js"],"names":["isInteger","log2","log10","cbrt","expm1","sign","toFixed","log1p","n1","n2","absNumber","a","Math","abs","signature","addNumber","b","subtractNumber","multiplyNumber","divideNumber","unaryMinusNumber","x","unaryPlusNumber","cbrtNumber","ceilNumber","ceil","cubeNumber","expNumber","exp","expm1Number","fixNumber","floor","floorNumber","gcdNumber","Error","r","lcmNumber","t","prod","logNumber","log","log10Number","log2Number","log1pNumber","modNumber","y","nthRootNumber","root","inv","Infinity","isFinite","pow","signNumber","sqrtNumber","sqrt","squareNumber","xgcdNumber","q","lastx","lasty","res","powNumber","roundNumber","value","decimals","arguments","length","undefined","parseFloat","normNumber"],"mappings":"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","sourcesContent":["import { isInteger, log2, log10, cbrt, expm1, sign, toFixed, log1p } from '../../utils/number.js';\r\nvar n1 = 'number';\r\nvar n2 = 'number, number';\r\nexport function absNumber(a) {\r\n  return Math.abs(a);\r\n}\r\nabsNumber.signature = n1;\r\nexport function addNumber(a, b) {\r\n  return a + b;\r\n}\r\naddNumber.signature = n2;\r\nexport function subtractNumber(a, b) {\r\n  return a - b;\r\n}\r\nsubtractNumber.signature = n2;\r\nexport function multiplyNumber(a, b) {\r\n  return a * b;\r\n}\r\nmultiplyNumber.signature = n2;\r\nexport function divideNumber(a, b) {\r\n  return a / b;\r\n}\r\ndivideNumber.signature = n2;\r\nexport function unaryMinusNumber(x) {\r\n  return -x;\r\n}\r\nunaryMinusNumber.signature = n1;\r\nexport function unaryPlusNumber(x) {\r\n  return x;\r\n}\r\nunaryPlusNumber.signature = n1;\r\nexport function cbrtNumber(x) {\r\n  return cbrt(x);\r\n}\r\ncbrtNumber.signature = n1;\r\nexport function ceilNumber(x) {\r\n  return Math.ceil(x);\r\n}\r\nceilNumber.signature = n1;\r\nexport function cubeNumber(x) {\r\n  return x * x * x;\r\n}\r\ncubeNumber.signature = n1;\r\nexport function expNumber(x) {\r\n  return Math.exp(x);\r\n}\r\nexpNumber.signature = n1;\r\nexport function expm1Number(x) {\r\n  return expm1(x);\r\n}\r\nexpm1Number.signature = n1;\r\nexport function fixNumber(x) {\r\n  return x > 0 ? Math.floor(x) : Math.ceil(x);\r\n}\r\nfixNumber.signature = n1;\r\nexport function floorNumber(x) {\r\n  return Math.floor(x);\r\n}\r\nfloorNumber.signature = n1;\r\n/**\r\n * Calculate gcd for numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number} Returns the greatest common denominator of a and b\r\n */\r\n\r\nexport function gcdNumber(a, b) {\r\n  if (!isInteger(a) || !isInteger(b)) {\r\n    throw new Error('Parameters in function gcd must be integer numbers');\r\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\r\n\r\n\r\n  var r;\r\n\r\n  while (b !== 0) {\r\n    r = a % b;\r\n    a = b;\r\n    b = r;\r\n  }\r\n\r\n  return a < 0 ? -a : a;\r\n}\r\ngcdNumber.signature = n2;\r\n/**\r\n * Calculate lcm for two numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number} Returns the least common multiple of a and b\r\n */\r\n\r\nexport function lcmNumber(a, b) {\r\n  if (!isInteger(a) || !isInteger(b)) {\r\n    throw new Error('Parameters in function lcm must be integer numbers');\r\n  }\r\n\r\n  if (a === 0 || b === 0) {\r\n    return 0;\r\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\r\n  // evaluate lcm here inline to reduce overhead\r\n\r\n\r\n  var t;\r\n  var prod = a * b;\r\n\r\n  while (b !== 0) {\r\n    t = b;\r\n    b = a % t;\r\n    a = t;\r\n  }\r\n\r\n  return Math.abs(prod / a);\r\n}\r\nlcmNumber.signature = n2;\r\n/**\r\n * Calculate the logarithm of a value.\r\n * @param {number} x\r\n * @return {number}\r\n */\r\n\r\nexport function logNumber(x) {\r\n  return Math.log(x);\r\n}\r\nlogNumber.signature = n1;\r\n/**\r\n * Calculate the 10-base logarithm of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\r\n\r\nexport function log10Number(x) {\r\n  return log10(x);\r\n}\r\nlog10Number.signature = n1;\r\n/**\r\n * Calculate the 2-base logarithm of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\r\n\r\nexport function log2Number(x) {\r\n  return log2(x);\r\n}\r\nlog2Number.signature = n1;\r\n/**\r\n * Calculate the natural logarithm of a `number+1`\r\n * @param {number} x\r\n * @returns {number}\r\n */\r\n\r\nexport function log1pNumber(x) {\r\n  return log1p(x);\r\n}\r\nlog1pNumber.signature = n1;\r\n/**\r\n * Calculate the modulus of two numbers\r\n * @param {number} x\r\n * @param {number} y\r\n * @returns {number} res\r\n * @private\r\n */\r\n\r\nexport function modNumber(x, y) {\r\n  if (y > 0) {\r\n    // We don't use JavaScript's % operator here as this doesn't work\r\n    // correctly for x < 0 and x === 0\r\n    // see https://en.wikipedia.org/wiki/Modulo_operation\r\n    return x - y * Math.floor(x / y);\r\n  } else if (y === 0) {\r\n    return x;\r\n  } else {\r\n    // y < 0\r\n    // TODO: implement mod for a negative divisor\r\n    throw new Error('Cannot calculate mod for a negative divisor');\r\n  }\r\n}\r\nmodNumber.signature = n2;\r\n/**\r\n * Calculate the nth root of a, solve x^root == a\r\n * http://rosettacode.org/wiki/Nth_root#JavaScript\r\n * @param {number} a\r\n * @param {number} root\r\n * @private\r\n */\r\n\r\nexport function nthRootNumber(a, root) {\r\n  var inv = root < 0;\r\n\r\n  if (inv) {\r\n    root = -root;\r\n  }\r\n\r\n  if (root === 0) {\r\n    throw new Error('Root must be non-zero');\r\n  }\r\n\r\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\r\n    throw new Error('Root must be odd when a is negative.');\r\n  } // edge cases zero and infinity\r\n\r\n\r\n  if (a === 0) {\r\n    return inv ? Infinity : 0;\r\n  }\r\n\r\n  if (!isFinite(a)) {\r\n    return inv ? 0 : a;\r\n  }\r\n\r\n  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\r\n  // so (-1) ^ (1/root) = -1\r\n\r\n  x = a < 0 ? -x : x;\r\n  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).\r\n  // Newton's method has some well-known problems at times:\r\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\r\n\r\n  /*\r\n  let x = 1 // Initial guess\r\n  let xPrev = 1\r\n  let i = 0\r\n  const iMax = 10000\r\n  do {\r\n    const delta = (a / Math.pow(x, root - 1) - x) / root\r\n    xPrev = x\r\n    x = x + delta\r\n    i++\r\n  }\r\n  while (xPrev !== x && i < iMax)\r\n   if (xPrev !== x) {\r\n    throw new Error('Function nthRoot failed to converge')\r\n  }\r\n   return inv ? 1 / x : x\r\n  */\r\n}\r\nnthRootNumber.signature = n2;\r\nexport function signNumber(x) {\r\n  return sign(x);\r\n}\r\nsignNumber.signature = n1;\r\nexport function sqrtNumber(x) {\r\n  return Math.sqrt(x);\r\n}\r\nsqrtNumber.signature = n1;\r\nexport function squareNumber(x) {\r\n  return x * x;\r\n}\r\nsquareNumber.signature = n1;\r\n/**\r\n * Calculate xgcd for two numbers\r\n * @param {number} a\r\n * @param {number} b\r\n * @return {number} result\r\n * @private\r\n */\r\n\r\nexport function xgcdNumber(a, b) {\r\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\r\n  var t; // used to swap two variables\r\n\r\n  var q; // quotient\r\n\r\n  var r; // remainder\r\n\r\n  var x = 0;\r\n  var lastx = 1;\r\n  var y = 1;\r\n  var lasty = 0;\r\n\r\n  if (!isInteger(a) || !isInteger(b)) {\r\n    throw new Error('Parameters in function xgcd must be integer numbers');\r\n  }\r\n\r\n  while (b) {\r\n    q = Math.floor(a / b);\r\n    r = a - q * b;\r\n    t = x;\r\n    x = lastx - q * x;\r\n    lastx = t;\r\n    t = y;\r\n    y = lasty - q * y;\r\n    lasty = t;\r\n    a = b;\r\n    b = r;\r\n  }\r\n\r\n  var res;\r\n\r\n  if (a < 0) {\r\n    res = [-a, -lastx, -lasty];\r\n  } else {\r\n    res = [a, a ? lastx : 0, lasty];\r\n  }\r\n\r\n  return res;\r\n}\r\nxgcdNumber.signature = n2;\r\n/**\r\n * Calculates the power of x to y, x^y, for two numbers.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {number} res\r\n */\r\n\r\nexport function powNumber(x, y) {\r\n  // x^Infinity === 0 if -1 < x < 1\r\n  // A real number 0 is returned instead of complex(0)\r\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\r\n    return 0;\r\n  }\r\n\r\n  return Math.pow(x, y);\r\n}\r\npowNumber.signature = n2;\r\n/**\r\n * round a number to the given number of decimals, or to zero if decimals is\r\n * not provided\r\n * @param {number} value\r\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\r\n * @return {number} roundedValue\r\n */\r\n\r\nexport function roundNumber(value) {\r\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\r\n  return parseFloat(toFixed(value, decimals));\r\n}\r\nroundNumber.signature = n2;\r\n/**\r\n * Calculate the norm of a number, the absolute value.\r\n * @param {number} x\r\n * @return {number}\r\n */\r\n\r\nexport function normNumber(x) {\r\n  return Math.abs(x);\r\n}\r\nnormNumber.signature = n1;"]},"metadata":{},"sourceType":"module"}