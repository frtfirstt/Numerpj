{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    pow,\n    conj,\n    sqrt,\n    multiply,\n    equalScalar,\n    larger,\n    smaller,\n    matrix,\n    ctranspose,\n    eigs\n  } = _ref;\n  /**\r\n   * Calculate the norm of a number, vector or matrix.\r\n   *\r\n   * The second parameter p is optional. If not provided, it defaults to 2.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.norm(x)\r\n   *    math.norm(x, p)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.abs(-3.5)                         // returns 3.5\r\n   *    math.norm(-3.5)                        // returns 3.5\r\n   *\r\n   *    math.norm(math.complex(3, -4))         // returns 5\r\n   *\r\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\r\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\r\n   *\r\n   *    math.norm([3, 4], 2)                   // returns 5\r\n   *\r\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\r\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\r\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\r\n   *\r\n   * See also:\r\n   *\r\n   *    abs, hypot\r\n   *\r\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the norm\r\n   * @param  {number | BigNumber | string} [p=2]\r\n   *            Vector space.\r\n   *            Supported numbers include Infinity and -Infinity.\r\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\r\n   * @return {number | BigNumber} the p-norm\r\n   */\n\n  return typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    boolean: function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {\n      // ignore second parameter, TODO: remove the option of second parameter for these types\n      return this(x);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n  /**\r\n   * Calculate the plus infinity norm for a vector\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n  function _vectorNormPlusInfinity(x) {\n    // norm(x, Infinity) = max(abs(x))\n    var pinf = 0; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n\n      if (larger(v, pinf)) {\n        pinf = v;\n      }\n    }, true);\n    return pinf;\n  }\n  /**\r\n   * Calculate the minus infinity norm for a vector\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _vectorNormMinusInfinity(x) {\n    // norm(x, -Infinity) = min(abs(x))\n    var ninf; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n\n      if (!ninf || smaller(v, ninf)) {\n        ninf = v;\n      }\n    }, true);\n    return ninf || 0;\n  }\n  /**\r\n   * Calculate the norm for a vector\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _vectorNorm(x, p) {\n    // check p\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _vectorNormPlusInfinity(x);\n    }\n\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n      return _vectorNormMinusInfinity(x);\n    }\n\n    if (p === 'fro') {\n      return _norm(x, 2);\n    }\n\n    if (typeof p === 'number' && !isNaN(p)) {\n      // check p != 0\n      if (!equalScalar(p, 0)) {\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n        var n = 0; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          n = add(pow(abs(value), p), n);\n        }, true);\n        return pow(n, 1 / p);\n      }\n\n      return Number.POSITIVE_INFINITY;\n    } // invalid parameter value\n\n\n    throw new Error('Unsupported parameter value');\n  }\n  /**\r\n   * Calculate the Frobenius norm for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _matrixNormFrobenius(x) {\n    // norm(x) = sqrt(sum(diag(x'x)))\n    var fro = 0;\n    x.forEach(function (value, index) {\n      fro = add(fro, multiply(value, conj(value)));\n    });\n    return abs(sqrt(fro));\n  }\n  /**\r\n   * Calculate the norm L1 for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _matrixNormOne(x) {\n    // norm(x) = the largest column sum\n    var c = []; // result\n\n    var maxc = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var j = index[1];\n      var cj = add(c[j] || 0, abs(value));\n\n      if (larger(cj, maxc)) {\n        maxc = cj;\n      }\n\n      c[j] = cj;\n    }, true);\n    return maxc;\n  }\n  /**\r\n   * Calculate the norm L2 for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _matrixNormTwo(x) {\n    // norm(x) = sqrt( max eigenvalue of A*.A)\n    var sizeX = x.size();\n\n    if (sizeX[0] !== sizeX[1]) {\n      throw new RangeError('Invalid matrix dimensions');\n    }\n\n    var tx = ctranspose(x);\n    var squaredX = multiply(tx, x);\n    var eigenVals = eigs(squaredX).values;\n    var rho = eigenVals.get([eigenVals.size()[0] - 1]);\n    return abs(sqrt(rho));\n  }\n  /**\r\n   * Calculate the infinity norm for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _matrixNormInfinity(x) {\n    // norm(x) = the largest row sum\n    var r = []; // result\n\n    var maxr = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var i = index[0];\n      var ri = add(r[i] || 0, abs(value));\n\n      if (larger(ri, maxr)) {\n        maxr = ri;\n      }\n\n      r[i] = ri;\n    }, true);\n    return maxr;\n  }\n  /**\r\n   * Calculate the norm for a 2D Matrix (M*N)\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _matrixNorm(x, p) {\n    // check p\n    if (p === 1) {\n      return _matrixNormOne(x);\n    }\n\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _matrixNormInfinity(x);\n    }\n\n    if (p === 'fro') {\n      return _matrixNormFrobenius(x);\n    }\n\n    if (p === 2) {\n      return _matrixNormTwo(x);\n    } // invalid parameter value\n\n\n    throw new Error('Unsupported parameter value ' + p);\n  }\n  /**\r\n   * Calculate the norm for an array\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size(); // check if it is a vector\n\n    if (sizeX.length === 1) {\n      return _vectorNorm(x, p);\n    } // MxN matrix\n\n\n    if (sizeX.length === 2) {\n      if (sizeX[0] && sizeX[1]) {\n        return _matrixNorm(x, p);\n      } else {\n        throw new RangeError('Invalid matrix dimensions');\n      }\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/arithmetic/norm.js"],"names":["factory","name","dependencies","createNorm","_ref","typed","abs","add","pow","conj","sqrt","multiply","equalScalar","larger","smaller","matrix","ctranspose","eigs","number","Math","Complex","x","BigNumber","boolean","Array","_norm","Matrix","numberComplexBigNumberBooleanNumberBigNumberString","ArrayNumberBigNumberString","p","MatrixNumberBigNumberString","_vectorNormPlusInfinity","pinf","forEach","value","v","_vectorNormMinusInfinity","ninf","_vectorNorm","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","isNaN","n","Error","_matrixNormFrobenius","fro","index","_matrixNormOne","c","maxc","j","cj","_matrixNormTwo","sizeX","size","RangeError","tx","squaredX","eigenVals","values","rho","get","_matrixNormInfinity","r","maxr","i","ri","_matrixNorm","length"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'norm';\r\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\r\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    abs,\r\n    add,\r\n    pow,\r\n    conj,\r\n    sqrt,\r\n    multiply,\r\n    equalScalar,\r\n    larger,\r\n    smaller,\r\n    matrix,\r\n    ctranspose,\r\n    eigs\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the norm of a number, vector or matrix.\r\n   *\r\n   * The second parameter p is optional. If not provided, it defaults to 2.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.norm(x)\r\n   *    math.norm(x, p)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.abs(-3.5)                         // returns 3.5\r\n   *    math.norm(-3.5)                        // returns 3.5\r\n   *\r\n   *    math.norm(math.complex(3, -4))         // returns 5\r\n   *\r\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\r\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\r\n   *\r\n   *    math.norm([3, 4], 2)                   // returns 5\r\n   *\r\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\r\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\r\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\r\n   *\r\n   * See also:\r\n   *\r\n   *    abs, hypot\r\n   *\r\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the norm\r\n   * @param  {number | BigNumber | string} [p=2]\r\n   *            Vector space.\r\n   *            Supported numbers include Infinity and -Infinity.\r\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\r\n   * @return {number | BigNumber} the p-norm\r\n   */\r\n  return typed(name, {\r\n    number: Math.abs,\r\n    Complex: function Complex(x) {\r\n      return x.abs();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      // norm(x) = abs(x)\r\n      return x.abs();\r\n    },\r\n    boolean: function boolean(x) {\r\n      // norm(x) = abs(x)\r\n      return Math.abs(x);\r\n    },\r\n    Array: function Array(x) {\r\n      return _norm(matrix(x), 2);\r\n    },\r\n    Matrix: function Matrix(x) {\r\n      return _norm(x, 2);\r\n    },\r\n    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {\r\n      // ignore second parameter, TODO: remove the option of second parameter for these types\r\n      return this(x);\r\n    },\r\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\r\n      return _norm(matrix(x), p);\r\n    },\r\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\r\n      return _norm(x, p);\r\n    }\r\n  });\r\n  /**\r\n   * Calculate the plus infinity norm for a vector\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n  function _vectorNormPlusInfinity(x) {\r\n    // norm(x, Infinity) = max(abs(x))\r\n    var pinf = 0; // skip zeros since abs(0) === 0\r\n\r\n    x.forEach(function (value) {\r\n      var v = abs(value);\r\n\r\n      if (larger(v, pinf)) {\r\n        pinf = v;\r\n      }\r\n    }, true);\r\n    return pinf;\r\n  }\r\n  /**\r\n   * Calculate the minus infinity norm for a vector\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _vectorNormMinusInfinity(x) {\r\n    // norm(x, -Infinity) = min(abs(x))\r\n    var ninf; // skip zeros since abs(0) === 0\r\n\r\n    x.forEach(function (value) {\r\n      var v = abs(value);\r\n\r\n      if (!ninf || smaller(v, ninf)) {\r\n        ninf = v;\r\n      }\r\n    }, true);\r\n    return ninf || 0;\r\n  }\r\n  /**\r\n   * Calculate the norm for a vector\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _vectorNorm(x, p) {\r\n    // check p\r\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\r\n      return _vectorNormPlusInfinity(x);\r\n    }\r\n\r\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\r\n      return _vectorNormMinusInfinity(x);\r\n    }\r\n\r\n    if (p === 'fro') {\r\n      return _norm(x, 2);\r\n    }\r\n\r\n    if (typeof p === 'number' && !isNaN(p)) {\r\n      // check p != 0\r\n      if (!equalScalar(p, 0)) {\r\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\r\n        var n = 0; // skip zeros since abs(0) === 0\r\n\r\n        x.forEach(function (value) {\r\n          n = add(pow(abs(value), p), n);\r\n        }, true);\r\n        return pow(n, 1 / p);\r\n      }\r\n\r\n      return Number.POSITIVE_INFINITY;\r\n    } // invalid parameter value\r\n\r\n\r\n    throw new Error('Unsupported parameter value');\r\n  }\r\n  /**\r\n   * Calculate the Frobenius norm for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _matrixNormFrobenius(x) {\r\n    // norm(x) = sqrt(sum(diag(x'x)))\r\n    var fro = 0;\r\n    x.forEach(function (value, index) {\r\n      fro = add(fro, multiply(value, conj(value)));\r\n    });\r\n    return abs(sqrt(fro));\r\n  }\r\n  /**\r\n   * Calculate the norm L1 for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _matrixNormOne(x) {\r\n    // norm(x) = the largest column sum\r\n    var c = []; // result\r\n\r\n    var maxc = 0; // skip zeros since abs(0) == 0\r\n\r\n    x.forEach(function (value, index) {\r\n      var j = index[1];\r\n      var cj = add(c[j] || 0, abs(value));\r\n\r\n      if (larger(cj, maxc)) {\r\n        maxc = cj;\r\n      }\r\n\r\n      c[j] = cj;\r\n    }, true);\r\n    return maxc;\r\n  }\r\n  /**\r\n   * Calculate the norm L2 for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _matrixNormTwo(x) {\r\n    // norm(x) = sqrt( max eigenvalue of A*.A)\r\n    var sizeX = x.size();\r\n\r\n    if (sizeX[0] !== sizeX[1]) {\r\n      throw new RangeError('Invalid matrix dimensions');\r\n    }\r\n\r\n    var tx = ctranspose(x);\r\n    var squaredX = multiply(tx, x);\r\n    var eigenVals = eigs(squaredX).values;\r\n    var rho = eigenVals.get([eigenVals.size()[0] - 1]);\r\n    return abs(sqrt(rho));\r\n  }\r\n  /**\r\n   * Calculate the infinity norm for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _matrixNormInfinity(x) {\r\n    // norm(x) = the largest row sum\r\n    var r = []; // result\r\n\r\n    var maxr = 0; // skip zeros since abs(0) == 0\r\n\r\n    x.forEach(function (value, index) {\r\n      var i = index[0];\r\n      var ri = add(r[i] || 0, abs(value));\r\n\r\n      if (larger(ri, maxr)) {\r\n        maxr = ri;\r\n      }\r\n\r\n      r[i] = ri;\r\n    }, true);\r\n    return maxr;\r\n  }\r\n  /**\r\n   * Calculate the norm for a 2D Matrix (M*N)\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _matrixNorm(x, p) {\r\n    // check p\r\n    if (p === 1) {\r\n      return _matrixNormOne(x);\r\n    }\r\n\r\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\r\n      return _matrixNormInfinity(x);\r\n    }\r\n\r\n    if (p === 'fro') {\r\n      return _matrixNormFrobenius(x);\r\n    }\r\n\r\n    if (p === 2) {\r\n      return _matrixNormTwo(x);\r\n    } // invalid parameter value\r\n\r\n\r\n    throw new Error('Unsupported parameter value ' + p);\r\n  }\r\n  /**\r\n   * Calculate the norm for an array\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _norm(x, p) {\r\n    // size\r\n    var sizeX = x.size(); // check if it is a vector\r\n\r\n    if (sizeX.length === 1) {\r\n      return _vectorNorm(x, p);\r\n    } // MxN matrix\r\n\r\n\r\n    if (sizeX.length === 2) {\r\n      if (sizeX[0] && sizeX[1]) {\r\n        return _matrixNorm(x, p);\r\n      } else {\r\n        throw new RangeError('Invalid matrix dimensions');\r\n      }\r\n    }\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}