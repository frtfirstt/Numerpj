{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { asechNumber } from '../../plain/number/index.js';\nvar name = 'asech';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAsech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\r\n   * Calculate the hyperbolic arcsecant of a value,\r\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.asech(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.asech(0.5)       // returns 1.3169578969248166\r\n   *\r\n   * See also:\r\n   *\r\n   *    acsch, acoth\r\n   *\r\n   * @param {number | Complex | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x\r\n   */\n\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        var xInv = 1 / x;\n\n        if (xInv > 0 || config.predictable) {\n          return asechNumber(x);\n        }\n\n        var ret = Math.sqrt(xInv * xInv - 1);\n        return new Complex(Math.log(ret - xInv), Math.PI);\n      }\n\n      return new Complex(x, 0).asech();\n    },\n    Complex: function Complex(x) {\n      return x.asech();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).acosh();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/trigonometry/asech.js"],"names":["factory","deepMap","asechNumber","name","dependencies","createAsech","_ref","typed","config","Complex","BigNumber","_BigNumber","number","x","predictable","xInv","ret","Math","sqrt","log","PI","asech","div","acosh","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,WAA/B,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC5E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,OAHE;AAIFC,IAAAA,SAAS,EAAEC;AAJT,MAKAL,IALJ;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBS,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,UAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,CAAC,CAAhB,IAAqBL,MAAM,CAACM,WAAhC,EAA6C;AAC3C,YAAIC,IAAI,GAAG,IAAIF,CAAf;;AAEA,YAAIE,IAAI,GAAG,CAAP,IAAYP,MAAM,CAACM,WAAvB,EAAoC;AAClC,iBAAOZ,WAAW,CAACW,CAAD,CAAlB;AACD;;AAED,YAAIG,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUH,IAAI,GAAGA,IAAP,GAAc,CAAxB,CAAV;AACA,eAAO,IAAIN,OAAJ,CAAYQ,IAAI,CAACE,GAAL,CAASH,GAAG,GAAGD,IAAf,CAAZ,EAAkCE,IAAI,CAACG,EAAvC,CAAP;AACD;;AAED,aAAO,IAAIX,OAAJ,CAAYI,CAAZ,EAAe,CAAf,EAAkBQ,KAAlB,EAAP;AACD,KAdgB;AAejBZ,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBI,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACQ,KAAF,EAAP;AACD,KAjBgB;AAkBjBX,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBG,CAAnB,EAAsB;AAC/B,aAAO,IAAIF,UAAJ,CAAe,CAAf,EAAkBW,GAAlB,CAAsBT,CAAtB,EAAyBU,KAAzB,EAAP;AACD,KApBgB;AAqBjB,sBAAkB,SAASC,WAAT,CAAqBX,CAArB,EAAwB;AACxC,aAAOZ,OAAO,CAACY,CAAD,EAAI,IAAJ,CAAd;AACD;AAvBgB,GAAP,CAAZ;AAyBD,CAtD8C,CAAxC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { asechNumber } from '../../plain/number/index.js';\r\nvar name = 'asech';\r\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\r\nexport var createAsech = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    config,\r\n    Complex,\r\n    BigNumber: _BigNumber\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the hyperbolic arcsecant of a value,\r\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.asech(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.asech(0.5)       // returns 1.3169578969248166\r\n   *\r\n   * See also:\r\n   *\r\n   *    acsch, acoth\r\n   *\r\n   * @param {number | Complex | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x <= 1 && x >= -1 || config.predictable) {\r\n        var xInv = 1 / x;\r\n\r\n        if (xInv > 0 || config.predictable) {\r\n          return asechNumber(x);\r\n        }\r\n\r\n        var ret = Math.sqrt(xInv * xInv - 1);\r\n        return new Complex(Math.log(ret - xInv), Math.PI);\r\n      }\r\n\r\n      return new Complex(x, 0).asech();\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.asech();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return new _BigNumber(1).div(x).acosh();\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}