{"ast":null,"code":"import { arraySize as size } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'sort';\nvar dependencies = ['typed', 'matrix', 'compare', 'compareNatural'];\nexport var createSort = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    compare,\n    compareNatural\n  } = _ref;\n  var compareAsc = compare;\n\n  var compareDesc = (a, b) => -compare(a, b);\n  /**\r\n   * Sort the items in a matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sort(x)\r\n   *    math.sort(x, compare)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sort([5, 10, 1]) // returns [1, 5, 10]\r\n   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)\r\n   *    // returns ['A', 'B', 'C', 'D']\r\n   *\r\n   *    function sortByLength (a, b) {\r\n   *      return a.length - b.length\r\n   *    }\r\n   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)\r\n   *    // returns ['Tom', 'Sara', 'Langdon']\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, forEach, map, compare, compareNatural\r\n   *\r\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\r\n   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']\r\n   *        An optional _comparator function or name. The function is called as\r\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\r\n   *        and 0 when a == b.\r\n   * @return {Matrix | Array} Returns the sorted matrix.\r\n   */\n\n\n  return typed(name, {\n    Array: function Array(x) {\n      _arrayIsVector(x);\n\n      return x.sort(compareAsc);\n    },\n    Matrix: function Matrix(x) {\n      _matrixIsVector(x);\n\n      return matrix(x.toArray().sort(compareAsc), x.storage());\n    },\n    'Array, function': function ArrayFunction(x, _comparator) {\n      _arrayIsVector(x);\n\n      return x.sort(_comparator);\n    },\n    'Matrix, function': function MatrixFunction(x, _comparator) {\n      _matrixIsVector(x);\n\n      return matrix(x.toArray().sort(_comparator), x.storage());\n    },\n    'Array, string': function ArrayString(x, order) {\n      _arrayIsVector(x);\n\n      return x.sort(_comparator(order));\n    },\n    'Matrix, string': function MatrixString(x, order) {\n      _matrixIsVector(x);\n\n      return matrix(x.toArray().sort(_comparator(order)), x.storage());\n    }\n  });\n  /**\r\n   * Get the comparator for given order ('asc', 'desc', 'natural')\r\n   * @param {'asc' | 'desc' | 'natural'} order\r\n   * @return {Function} Returns a _comparator function\r\n   */\n\n  function _comparator(order) {\n    if (order === 'asc') {\n      return compareAsc;\n    } else if (order === 'desc') {\n      return compareDesc;\n    } else if (order === 'natural') {\n      return compareNatural;\n    } else {\n      throw new Error('String \"asc\", \"desc\", or \"natural\" expected');\n    }\n  }\n  /**\r\n   * Validate whether an array is one dimensional\r\n   * Throws an error when this is not the case\r\n   * @param {Array} array\r\n   * @private\r\n   */\n\n\n  function _arrayIsVector(array) {\n    if (size(array).length !== 1) {\n      throw new Error('One dimensional array expected');\n    }\n  }\n  /**\r\n   * Validate whether a matrix is one dimensional\r\n   * Throws an error when this is not the case\r\n   * @param {Matrix} matrix\r\n   * @private\r\n   */\n\n\n  function _matrixIsVector(matrix) {\n    if (matrix.size().length !== 1) {\n      throw new Error('One dimensional matrix expected');\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/matrix/sort.js"],"names":["arraySize","size","factory","name","dependencies","createSort","_ref","typed","matrix","compare","compareNatural","compareAsc","compareDesc","a","b","Array","x","_arrayIsVector","sort","Matrix","_matrixIsVector","toArray","storage","ArrayFunction","_comparator","MatrixFunction","ArrayString","order","MatrixString","Error","array","length"],"mappings":"AAAA,SAASA,SAAS,IAAIC,IAAtB,QAAkC,sBAAlC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,gBAA/B,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC3E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,OAHE;AAIFC,IAAAA;AAJE,MAKAJ,IALJ;AAMA,MAAIK,UAAU,GAAGF,OAAjB;;AAEA,MAAIG,WAAW,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU,CAACL,OAAO,CAACI,CAAD,EAAIC,CAAJ,CAApC;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,SAAOP,KAAK,CAACJ,IAAD,EAAO;AACjBY,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,CAAf,EAAkB;AACvBC,MAAAA,cAAc,CAACD,CAAD,CAAd;;AAEA,aAAOA,CAAC,CAACE,IAAF,CAAOP,UAAP,CAAP;AACD,KALgB;AAMjBQ,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBH,CAAhB,EAAmB;AACzBI,MAAAA,eAAe,CAACJ,CAAD,CAAf;;AAEA,aAAOR,MAAM,CAACQ,CAAC,CAACK,OAAF,GAAYH,IAAZ,CAAiBP,UAAjB,CAAD,EAA+BK,CAAC,CAACM,OAAF,EAA/B,CAAb;AACD,KAVgB;AAWjB,uBAAmB,SAASC,aAAT,CAAuBP,CAAvB,EAA0BQ,WAA1B,EAAuC;AACxDP,MAAAA,cAAc,CAACD,CAAD,CAAd;;AAEA,aAAOA,CAAC,CAACE,IAAF,CAAOM,WAAP,CAAP;AACD,KAfgB;AAgBjB,wBAAoB,SAASC,cAAT,CAAwBT,CAAxB,EAA2BQ,WAA3B,EAAwC;AAC1DJ,MAAAA,eAAe,CAACJ,CAAD,CAAf;;AAEA,aAAOR,MAAM,CAACQ,CAAC,CAACK,OAAF,GAAYH,IAAZ,CAAiBM,WAAjB,CAAD,EAAgCR,CAAC,CAACM,OAAF,EAAhC,CAAb;AACD,KApBgB;AAqBjB,qBAAiB,SAASI,WAAT,CAAqBV,CAArB,EAAwBW,KAAxB,EAA+B;AAC9CV,MAAAA,cAAc,CAACD,CAAD,CAAd;;AAEA,aAAOA,CAAC,CAACE,IAAF,CAAOM,WAAW,CAACG,KAAD,CAAlB,CAAP;AACD,KAzBgB;AA0BjB,sBAAkB,SAASC,YAAT,CAAsBZ,CAAtB,EAAyBW,KAAzB,EAAgC;AAChDP,MAAAA,eAAe,CAACJ,CAAD,CAAf;;AAEA,aAAOR,MAAM,CAACQ,CAAC,CAACK,OAAF,GAAYH,IAAZ,CAAiBM,WAAW,CAACG,KAAD,CAA5B,CAAD,EAAuCX,CAAC,CAACM,OAAF,EAAvC,CAAb;AACD;AA9BgB,GAAP,CAAZ;AAgCA;AACF;AACA;AACA;AACA;;AAEE,WAASE,WAAT,CAAqBG,KAArB,EAA4B;AAC1B,QAAIA,KAAK,KAAK,KAAd,EAAqB;AACnB,aAAOhB,UAAP;AACD,KAFD,MAEO,IAAIgB,KAAK,KAAK,MAAd,EAAsB;AAC3B,aAAOf,WAAP;AACD,KAFM,MAEA,IAAIe,KAAK,KAAK,SAAd,EAAyB;AAC9B,aAAOjB,cAAP;AACD,KAFM,MAEA;AACL,YAAM,IAAImB,KAAJ,CAAU,6CAAV,CAAN;AACD;AACF;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGE,WAASZ,cAAT,CAAwBa,KAAxB,EAA+B;AAC7B,QAAI7B,IAAI,CAAC6B,KAAD,CAAJ,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,YAAM,IAAIF,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGE,WAAST,eAAT,CAAyBZ,MAAzB,EAAiC;AAC/B,QAAIA,MAAM,CAACP,IAAP,GAAc8B,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,YAAM,IAAIF,KAAJ,CAAU,iCAAV,CAAN;AACD;AACF;AACF,CAtH6C,CAAvC","sourcesContent":["import { arraySize as size } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'sort';\r\nvar dependencies = ['typed', 'matrix', 'compare', 'compareNatural'];\r\nexport var createSort = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    compare,\r\n    compareNatural\r\n  } = _ref;\r\n  var compareAsc = compare;\r\n\r\n  var compareDesc = (a, b) => -compare(a, b);\r\n  /**\r\n   * Sort the items in a matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sort(x)\r\n   *    math.sort(x, compare)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sort([5, 10, 1]) // returns [1, 5, 10]\r\n   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)\r\n   *    // returns ['A', 'B', 'C', 'D']\r\n   *\r\n   *    function sortByLength (a, b) {\r\n   *      return a.length - b.length\r\n   *    }\r\n   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)\r\n   *    // returns ['Tom', 'Sara', 'Langdon']\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, forEach, map, compare, compareNatural\r\n   *\r\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\r\n   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']\r\n   *        An optional _comparator function or name. The function is called as\r\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\r\n   *        and 0 when a == b.\r\n   * @return {Matrix | Array} Returns the sorted matrix.\r\n   */\r\n\r\n\r\n  return typed(name, {\r\n    Array: function Array(x) {\r\n      _arrayIsVector(x);\r\n\r\n      return x.sort(compareAsc);\r\n    },\r\n    Matrix: function Matrix(x) {\r\n      _matrixIsVector(x);\r\n\r\n      return matrix(x.toArray().sort(compareAsc), x.storage());\r\n    },\r\n    'Array, function': function ArrayFunction(x, _comparator) {\r\n      _arrayIsVector(x);\r\n\r\n      return x.sort(_comparator);\r\n    },\r\n    'Matrix, function': function MatrixFunction(x, _comparator) {\r\n      _matrixIsVector(x);\r\n\r\n      return matrix(x.toArray().sort(_comparator), x.storage());\r\n    },\r\n    'Array, string': function ArrayString(x, order) {\r\n      _arrayIsVector(x);\r\n\r\n      return x.sort(_comparator(order));\r\n    },\r\n    'Matrix, string': function MatrixString(x, order) {\r\n      _matrixIsVector(x);\r\n\r\n      return matrix(x.toArray().sort(_comparator(order)), x.storage());\r\n    }\r\n  });\r\n  /**\r\n   * Get the comparator for given order ('asc', 'desc', 'natural')\r\n   * @param {'asc' | 'desc' | 'natural'} order\r\n   * @return {Function} Returns a _comparator function\r\n   */\r\n\r\n  function _comparator(order) {\r\n    if (order === 'asc') {\r\n      return compareAsc;\r\n    } else if (order === 'desc') {\r\n      return compareDesc;\r\n    } else if (order === 'natural') {\r\n      return compareNatural;\r\n    } else {\r\n      throw new Error('String \"asc\", \"desc\", or \"natural\" expected');\r\n    }\r\n  }\r\n  /**\r\n   * Validate whether an array is one dimensional\r\n   * Throws an error when this is not the case\r\n   * @param {Array} array\r\n   * @private\r\n   */\r\n\r\n\r\n  function _arrayIsVector(array) {\r\n    if (size(array).length !== 1) {\r\n      throw new Error('One dimensional array expected');\r\n    }\r\n  }\r\n  /**\r\n   * Validate whether a matrix is one dimensional\r\n   * Throws an error when this is not the case\r\n   * @param {Matrix} matrix\r\n   * @private\r\n   */\r\n\r\n\r\n  function _matrixIsVector(matrix) {\r\n    if (matrix.size().length !== 1) {\r\n      throw new Error('One dimensional matrix expected');\r\n    }\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}