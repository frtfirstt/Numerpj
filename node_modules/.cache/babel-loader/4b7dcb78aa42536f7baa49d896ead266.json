{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'deepEqual';\nvar dependencies = ['typed', 'equal'];\nexport var createDeepEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equal\n  } = _ref;\n  /**\r\n   * Test element wise whether two matrices are equal.\r\n   * The function accepts both matrices and scalar values.\r\n   *\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.deepEqual(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.deepEqual(2, 4)   // returns false\r\n   *\r\n   *    a = [2, 5, 1]\r\n   *    b = [2, 7, 1]\r\n   *\r\n   *    math.deepEqual(a, b)   // returns false\r\n   *    math.equal(a, b)       // returns [true, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, unequal\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\r\n   */\n\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      return _deepEqual(x.valueOf(), y.valueOf());\n    }\n  });\n  /**\r\n   * Test whether two arrays have the same size and all elements are equal\r\n   * @param {Array | *} x\r\n   * @param {Array | *} y\r\n   * @return {boolean} Returns true if both arrays are deep equal\r\n   */\n\n  function _deepEqual(x, y) {\n    if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        var len = x.length;\n\n        if (len !== y.length) {\n          return false;\n        }\n\n        for (var i = 0; i < len; i++) {\n          if (!_deepEqual(x[i], y[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      if (Array.isArray(y)) {\n        return false;\n      } else {\n        return equal(x, y);\n      }\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/relational/deepEqual.js"],"names":["factory","name","dependencies","createDeepEqual","_ref","typed","equal","anyAny","x","y","_deepEqual","valueOf","Array","isArray","len","length","i"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAChF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,gBAAY,SAASM,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAChC,aAAOC,UAAU,CAACF,CAAC,CAACG,OAAF,EAAD,EAAcF,CAAC,CAACE,OAAF,EAAd,CAAjB;AACD;AAHgB,GAAP,CAAZ;AAKA;AACF;AACA;AACA;AACA;AACA;;AAEE,WAASD,UAAT,CAAoBF,CAApB,EAAuBC,CAAvB,EAA0B;AACxB,QAAIG,KAAK,CAACC,OAAN,CAAcL,CAAd,CAAJ,EAAsB;AACpB,UAAII,KAAK,CAACC,OAAN,CAAcJ,CAAd,CAAJ,EAAsB;AACpB,YAAIK,GAAG,GAAGN,CAAC,CAACO,MAAZ;;AAEA,YAAID,GAAG,KAAKL,CAAC,CAACM,MAAd,EAAsB;AACpB,iBAAO,KAAP;AACD;;AAED,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5B,cAAI,CAACN,UAAU,CAACF,CAAC,CAACQ,CAAD,CAAF,EAAOP,CAAC,CAACO,CAAD,CAAR,CAAf,EAA6B;AAC3B,mBAAO,KAAP;AACD;AACF;;AAED,eAAO,IAAP;AACD,OAdD,MAcO;AACL,eAAO,KAAP;AACD;AACF,KAlBD,MAkBO;AACL,UAAIJ,KAAK,CAACC,OAAN,CAAcJ,CAAd,CAAJ,EAAsB;AACpB,eAAO,KAAP;AACD,OAFD,MAEO;AACL,eAAOH,KAAK,CAACE,CAAD,EAAIC,CAAJ,CAAZ;AACD;AACF;AACF;AACF,CA1EkD,CAA5C","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'deepEqual';\r\nvar dependencies = ['typed', 'equal'];\r\nexport var createDeepEqual = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    equal\r\n  } = _ref;\r\n\r\n  /**\r\n   * Test element wise whether two matrices are equal.\r\n   * The function accepts both matrices and scalar values.\r\n   *\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.deepEqual(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.deepEqual(2, 4)   // returns false\r\n   *\r\n   *    a = [2, 5, 1]\r\n   *    b = [2, 7, 1]\r\n   *\r\n   *    math.deepEqual(a, b)   // returns false\r\n   *    math.equal(a, b)       // returns [true, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, unequal\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\r\n   */\r\n  return typed(name, {\r\n    'any, any': function anyAny(x, y) {\r\n      return _deepEqual(x.valueOf(), y.valueOf());\r\n    }\r\n  });\r\n  /**\r\n   * Test whether two arrays have the same size and all elements are equal\r\n   * @param {Array | *} x\r\n   * @param {Array | *} y\r\n   * @return {boolean} Returns true if both arrays are deep equal\r\n   */\r\n\r\n  function _deepEqual(x, y) {\r\n    if (Array.isArray(x)) {\r\n      if (Array.isArray(y)) {\r\n        var len = x.length;\r\n\r\n        if (len !== y.length) {\r\n          return false;\r\n        }\r\n\r\n        for (var i = 0; i < len; i++) {\r\n          if (!_deepEqual(x[i], y[i])) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (Array.isArray(y)) {\r\n        return false;\r\n      } else {\r\n        return equal(x, y);\r\n      }\r\n    }\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}