{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'conj';\nvar dependencies = ['typed'];\nexport var createConj = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Compute the complex conjugate of a complex value.\r\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.conj(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\r\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\r\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\r\n   *\r\n   * See also:\r\n   *\r\n   *    re, im, arg, abs\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            The complex conjugate of x\r\n   */\n\n  return typed(name, {\n    number: function number(x) {\n      return x;\n    },\n    BigNumber: function BigNumber(x) {\n      return x;\n    },\n    Complex: function Complex(x) {\n      return x.conjugate();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/complex/conj.js"],"names":["factory","deepMap","name","dependencies","createConj","_ref","typed","number","x","BigNumber","Complex","conjugate","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC3E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,aAAOA,CAAP;AACD,KAHgB;AAIjBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBD,CAAnB,EAAsB;AAC/B,aAAOA,CAAP;AACD,KANgB;AAOjBE,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBF,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACG,SAAF,EAAP;AACD,KATgB;AAUjB,sBAAkB,SAASC,WAAT,CAAqBJ,CAArB,EAAwB;AACxC,aAAOP,OAAO,CAACO,CAAD,EAAI,IAAJ,CAAd;AACD;AAZgB,GAAP,CAAZ;AAcD,CA5C6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nvar name = 'conj';\r\nvar dependencies = ['typed'];\r\nexport var createConj = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Compute the complex conjugate of a complex value.\r\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.conj(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\r\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\r\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\r\n   *\r\n   * See also:\r\n   *\r\n   *    re, im, arg, abs\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            The complex conjugate of x\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      return x;\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x;\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.conjugate();\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}