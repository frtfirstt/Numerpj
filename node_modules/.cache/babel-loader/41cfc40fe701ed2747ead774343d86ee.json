{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { combinationsNumber } from '../../plain/number/combinations.js';\nvar name = 'combinations';\nvar dependencies = ['typed'];\nexport var createCombinations = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\r\n   * possibilities.\r\n   *\r\n   * Combinations only takes integer arguments.\r\n   * The following condition must be enforced: k <= n.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.combinations(n, k)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.combinations(7, 5) // returns 21\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinationsWithRep, permutations, factorial\r\n   *\r\n   * @param {number | BigNumber} n    Total number of objects in the set\r\n   * @param {number | BigNumber} k    Number of objects in the subset\r\n   * @return {number | BigNumber}     Number of possible combinations.\r\n   */\n\n  return typed(name, {\n    'number, number': combinationsNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var nMinusk = n.minus(k);\n      var one = new BigNumber(1);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n\n      result = one;\n\n      if (k.lt(nMinusk)) {\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\n        }\n      }\n\n      return result;\n    } // TODO: implement support for collection in combinations\n\n  });\n});\n/**\r\n * Test whether BigNumber n is a positive integer\r\n * @param {BigNumber} n\r\n * @returns {boolean} isPositiveInteger\r\n */\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/probability/combinations.js"],"names":["factory","combinationsNumber","name","dependencies","createCombinations","_ref","typed","BigNumberBigNumber","n","k","BigNumber","constructor","result","i","nMinusk","minus","one","isPositiveInteger","TypeError","gt","lt","lte","plus","times","dividedBy","isInteger","gte"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,kBAAT,QAAmC,oCAAnC;AACA,IAAIC,IAAI,GAAG,cAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AACnF,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkBD,kBADD;AAEjB,4BAAwB,SAASM,kBAAT,CAA4BC,CAA5B,EAA+BC,CAA/B,EAAkC;AACxD,UAAIC,SAAS,GAAGF,CAAC,CAACG,WAAlB;AACA,UAAIC,MAAJ,EAAYC,CAAZ;AACA,UAAIC,OAAO,GAAGN,CAAC,CAACO,KAAF,CAAQN,CAAR,CAAd;AACA,UAAIO,GAAG,GAAG,IAAIN,SAAJ,CAAc,CAAd,CAAV;;AAEA,UAAI,CAACO,iBAAiB,CAACT,CAAD,CAAlB,IAAyB,CAACS,iBAAiB,CAACR,CAAD,CAA/C,EAAoD;AAClD,cAAM,IAAIS,SAAJ,CAAc,0DAAd,CAAN;AACD;;AAED,UAAIT,CAAC,CAACU,EAAF,CAAKX,CAAL,CAAJ,EAAa;AACX,cAAM,IAAIU,SAAJ,CAAc,gDAAd,CAAN;AACD;;AAEDN,MAAAA,MAAM,GAAGI,GAAT;;AAEA,UAAIP,CAAC,CAACW,EAAF,CAAKN,OAAL,CAAJ,EAAmB;AACjB,aAAKD,CAAC,GAAGG,GAAT,EAAcH,CAAC,CAACQ,GAAF,CAAMP,OAAN,CAAd,EAA8BD,CAAC,GAAGA,CAAC,CAACS,IAAF,CAAON,GAAP,CAAlC,EAA+C;AAC7CJ,UAAAA,MAAM,GAAGA,MAAM,CAACW,KAAP,CAAad,CAAC,CAACa,IAAF,CAAOT,CAAP,CAAb,EAAwBW,SAAxB,CAAkCX,CAAlC,CAAT;AACD;AACF,OAJD,MAIO;AACL,aAAKA,CAAC,GAAGG,GAAT,EAAcH,CAAC,CAACQ,GAAF,CAAMZ,CAAN,CAAd,EAAwBI,CAAC,GAAGA,CAAC,CAACS,IAAF,CAAON,GAAP,CAA5B,EAAyC;AACvCJ,UAAAA,MAAM,GAAGA,MAAM,CAACW,KAAP,CAAaT,OAAO,CAACQ,IAAR,CAAaT,CAAb,CAAb,EAA8BW,SAA9B,CAAwCX,CAAxC,CAAT;AACD;AACF;;AAED,aAAOD,MAAP;AACD,KA7BgB,CA6Bf;;AA7Be,GAAP,CAAZ;AAgCD,CA5DqD,CAA/C;AA6DP;AACA;AACA;AACA;AACA;;AAEA,SAASK,iBAAT,CAA2BT,CAA3B,EAA8B;AAC5B,SAAOA,CAAC,CAACiB,SAAF,MAAiBjB,CAAC,CAACkB,GAAF,CAAM,CAAN,CAAxB;AACD","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { combinationsNumber } from '../../plain/number/combinations.js';\r\nvar name = 'combinations';\r\nvar dependencies = ['typed'];\r\nexport var createCombinations = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\r\n   * possibilities.\r\n   *\r\n   * Combinations only takes integer arguments.\r\n   * The following condition must be enforced: k <= n.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.combinations(n, k)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.combinations(7, 5) // returns 21\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinationsWithRep, permutations, factorial\r\n   *\r\n   * @param {number | BigNumber} n    Total number of objects in the set\r\n   * @param {number | BigNumber} k    Number of objects in the subset\r\n   * @return {number | BigNumber}     Number of possible combinations.\r\n   */\r\n  return typed(name, {\r\n    'number, number': combinationsNumber,\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\r\n      var BigNumber = n.constructor;\r\n      var result, i;\r\n      var nMinusk = n.minus(k);\r\n      var one = new BigNumber(1);\r\n\r\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\r\n        throw new TypeError('Positive integer value expected in function combinations');\r\n      }\r\n\r\n      if (k.gt(n)) {\r\n        throw new TypeError('k must be less than n in function combinations');\r\n      }\r\n\r\n      result = one;\r\n\r\n      if (k.lt(nMinusk)) {\r\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\r\n          result = result.times(k.plus(i)).dividedBy(i);\r\n        }\r\n      } else {\r\n        for (i = one; i.lte(k); i = i.plus(one)) {\r\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    } // TODO: implement support for collection in combinations\r\n\r\n  });\r\n});\r\n/**\r\n * Test whether BigNumber n is a positive integer\r\n * @param {BigNumber} n\r\n * @returns {boolean} isPositiveInteger\r\n */\r\n\r\nfunction isPositiveInteger(n) {\r\n  return n.isInteger() && n.gte(0);\r\n}"]},"metadata":{},"sourceType":"module"}