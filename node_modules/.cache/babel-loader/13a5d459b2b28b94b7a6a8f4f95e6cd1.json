{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { extend } from '../../utils/object.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nexport var createDivide = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    multiply,\n    equalScalar,\n    divideScalar,\n    inv\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\r\n   * Divide two values, `x / y`.\r\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.divide(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\r\n   *\r\n   *    const a = math.complex(5, 14)\r\n   *    const b = math.complex(4, 1)\r\n   *    math.divide(a, b)            // returns Complex 2 + 3i\r\n   *\r\n   *    const c = [[7, -6], [13, -4]]\r\n   *    const d = [[1, 2], [4, 3]]\r\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\r\n   *\r\n   *    const e = math.unit('18 km')\r\n   *    math.divide(e, 4.5)          // returns Unit 4 km\r\n   *\r\n   * See also:\r\n   *\r\n   *    multiply\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\r\n   */\n\n  return typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/arithmetic/divide.js"],"names":["factory","extend","createAlgorithm11","createAlgorithm14","name","dependencies","createDivide","_ref","typed","matrix","multiply","equalScalar","divideScalar","inv","algorithm11","algorithm14","ArrayMatrixArrayMatrix","x","y","DenseMatrixAny","SparseMatrixAny","ArrayAny","valueOf","anyArrayMatrix","signatures"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,aAAhC,EAA+C,cAA/C,EAA+D,KAA/D,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC7E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,QAHE;AAIFC,IAAAA,WAJE;AAKFC,IAAAA,YALE;AAMFC,IAAAA;AANE,MAOAN,IAPJ;AAQA,MAAIO,WAAW,GAAGZ,iBAAiB,CAAC;AAClCM,IAAAA,KADkC;AAElCG,IAAAA;AAFkC,GAAD,CAAnC;AAIA,MAAII,WAAW,GAAGZ,iBAAiB,CAAC;AAClCK,IAAAA;AADkC,GAAD,CAAnC;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,SAAOA,KAAK,CAAC,QAAD,EAAWP,MAAM,CAAC;AAC5B;AACA,sCAAkC,SAASe,sBAAT,CAAgCC,CAAhC,EAAmCC,CAAnC,EAAsC;AACtE;AACA;AACA;AACA;AACA,aAAOR,QAAQ,CAACO,CAAD,EAAIJ,GAAG,CAACK,CAAD,CAAP,CAAf;AACD,KAR2B;AAS5B,wBAAoB,SAASC,cAAT,CAAwBF,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOH,WAAW,CAACE,CAAD,EAAIC,CAAJ,EAAON,YAAP,EAAqB,KAArB,CAAlB;AACD,KAX2B;AAY5B,yBAAqB,SAASQ,eAAT,CAAyBH,CAAzB,EAA4BC,CAA5B,EAA+B;AAClD,aAAOJ,WAAW,CAACG,CAAD,EAAIC,CAAJ,EAAON,YAAP,EAAqB,KAArB,CAAlB;AACD,KAd2B;AAe5B,kBAAc,SAASS,QAAT,CAAkBJ,CAAlB,EAAqBC,CAArB,EAAwB;AACpC;AACA,aAAOH,WAAW,CAACN,MAAM,CAACQ,CAAD,CAAP,EAAYC,CAAZ,EAAeN,YAAf,EAA6B,KAA7B,CAAX,CAA+CU,OAA/C,EAAP;AACD,KAlB2B;AAmB5B,2BAAuB,SAASC,cAAT,CAAwBN,CAAxB,EAA2BC,CAA3B,EAA8B;AACnD,aAAOR,QAAQ,CAACO,CAAD,EAAIJ,GAAG,CAACK,CAAD,CAAP,CAAf;AACD;AArB2B,GAAD,EAsB1BN,YAAY,CAACY,UAtBa,CAAjB,CAAZ;AAuBD,CAvE+C,CAAzC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { extend } from '../../utils/object.js';\r\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\r\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\r\nvar name = 'divide';\r\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\r\nexport var createDivide = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    multiply,\r\n    equalScalar,\r\n    divideScalar,\r\n    inv\r\n  } = _ref;\r\n  var algorithm11 = createAlgorithm11({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var algorithm14 = createAlgorithm14({\r\n    typed\r\n  });\r\n  /**\r\n   * Divide two values, `x / y`.\r\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.divide(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\r\n   *\r\n   *    const a = math.complex(5, 14)\r\n   *    const b = math.complex(4, 1)\r\n   *    math.divide(a, b)            // returns Complex 2 + 3i\r\n   *\r\n   *    const c = [[7, -6], [13, -4]]\r\n   *    const d = [[1, 2], [4, 3]]\r\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\r\n   *\r\n   *    const e = math.unit('18 km')\r\n   *    math.divide(e, 4.5)          // returns Unit 4 km\r\n   *\r\n   * See also:\r\n   *\r\n   *    multiply\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\r\n   */\r\n\r\n  return typed('divide', extend({\r\n    // we extend the signatures of divideScalar with signatures dealing with matrices\r\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\r\n      // TODO: implement matrix right division using pseudo inverse\r\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\r\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\r\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\r\n      return multiply(x, inv(y));\r\n    },\r\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\r\n      return algorithm14(x, y, divideScalar, false);\r\n    },\r\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\r\n      return algorithm11(x, y, divideScalar, false);\r\n    },\r\n    'Array, any': function ArrayAny(x, y) {\r\n      // use matrix implementation\r\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\r\n    },\r\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\r\n      return multiply(x, inv(y));\r\n    }\r\n  }, divideScalar.signatures));\r\n});"]},"metadata":{},"sourceType":"module"}