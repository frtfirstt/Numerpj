{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05.js';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    addScalar,\n    unaryMinus,\n    DenseMatrix\n  } = _ref; // TODO: split function subtract in two: subtract and subtractScalar\n\n  var algorithm01 = createAlgorithm01({\n    typed\n  });\n  var algorithm03 = createAlgorithm03({\n    typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed,\n    equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed,\n    DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\r\n   * Subtract two values, `x - y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.subtract(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.subtract(5.3, 2)        // returns number 3.3\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    const b = math.complex(4, 1)\r\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\r\n   *\r\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\r\n   *\r\n   *    const c = math.unit('2.1 km')\r\n   *    const d = math.unit('500m')\r\n   *    math.subtract(c, d)          // returns Unit 1.6 km\r\n   *\r\n   * See also:\r\n   *\r\n   *    add\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\r\n   *            Initial value\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\r\n   *            Value to subtract from `x`\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Subtraction of `x` and `y`\r\n   */\n\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = this(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});\n/**\r\n * Check whether matrix x and y have the same number of dimensions.\r\n * Throws a DimensionError when dimensions are not equal\r\n * @param {Matrix} x\r\n * @param {Matrix} y\r\n */\n\nfunction checkEqualDimensions(x, y) {\n  var xsize = x.size();\n  var ysize = y.size();\n\n  if (xsize.length !== ysize.length) {\n    throw new DimensionError(xsize.length, ysize.length);\n  }\n}","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/arithmetic/subtract.js"],"names":["factory","DimensionError","createAlgorithm01","createAlgorithm03","createAlgorithm05","createAlgorithm10","createAlgorithm13","createAlgorithm14","name","dependencies","createSubtract","_ref","typed","matrix","equalScalar","addScalar","unaryMinus","DenseMatrix","algorithm01","algorithm03","algorithm05","algorithm10","algorithm13","algorithm14","numberNumber","x","y","ComplexComplex","sub","BigNumberBigNumber","minus","FractionFraction","UnitUnit","value","Error","equalBase","res","clone","fixPrefix","SparseMatrixSparseMatrix","checkEqualDimensions","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","xsize","size","ysize","length"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { DimensionError } from '../../error/DimensionError.js';\r\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\r\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\r\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05.js';\r\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\r\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\r\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\r\nvar name = 'subtract';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\r\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    addScalar,\r\n    unaryMinus,\r\n    DenseMatrix\r\n  } = _ref;\r\n  // TODO: split function subtract in two: subtract and subtractScalar\r\n  var algorithm01 = createAlgorithm01({\r\n    typed\r\n  });\r\n  var algorithm03 = createAlgorithm03({\r\n    typed\r\n  });\r\n  var algorithm05 = createAlgorithm05({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var algorithm10 = createAlgorithm10({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var algorithm13 = createAlgorithm13({\r\n    typed\r\n  });\r\n  var algorithm14 = createAlgorithm14({\r\n    typed\r\n  });\r\n  /**\r\n   * Subtract two values, `x - y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.subtract(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.subtract(5.3, 2)        // returns number 3.3\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    const b = math.complex(4, 1)\r\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\r\n   *\r\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\r\n   *\r\n   *    const c = math.unit('2.1 km')\r\n   *    const d = math.unit('500m')\r\n   *    math.subtract(c, d)          // returns Unit 1.6 km\r\n   *\r\n   * See also:\r\n   *\r\n   *    add\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\r\n   *            Initial value\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\r\n   *            Value to subtract from `x`\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Subtraction of `x` and `y`\r\n   */\r\n\r\n  return typed(name, {\r\n    'number, number': function numberNumber(x, y) {\r\n      return x - y;\r\n    },\r\n    'Complex, Complex': function ComplexComplex(x, y) {\r\n      return x.sub(y);\r\n    },\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\r\n      return x.minus(y);\r\n    },\r\n    'Fraction, Fraction': function FractionFraction(x, y) {\r\n      return x.sub(y);\r\n    },\r\n    'Unit, Unit': function UnitUnit(x, y) {\r\n      if (x.value === null) {\r\n        throw new Error('Parameter x contains a unit with undefined value');\r\n      }\r\n\r\n      if (y.value === null) {\r\n        throw new Error('Parameter y contains a unit with undefined value');\r\n      }\r\n\r\n      if (!x.equalBase(y)) {\r\n        throw new Error('Units do not match');\r\n      }\r\n\r\n      var res = x.clone();\r\n      res.value = this(res.value, y.value);\r\n      res.fixPrefix = false;\r\n      return res;\r\n    },\r\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\r\n      checkEqualDimensions(x, y);\r\n      return algorithm05(x, y, this);\r\n    },\r\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\r\n      checkEqualDimensions(x, y);\r\n      return algorithm03(y, x, this, true);\r\n    },\r\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\r\n      checkEqualDimensions(x, y);\r\n      return algorithm01(x, y, this, false);\r\n    },\r\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\r\n      checkEqualDimensions(x, y);\r\n      return algorithm13(x, y, this);\r\n    },\r\n    'Array, Array': function ArrayArray(x, y) {\r\n      // use matrix implementation\r\n      return this(matrix(x), matrix(y)).valueOf();\r\n    },\r\n    'Array, Matrix': function ArrayMatrix(x, y) {\r\n      // use matrix implementation\r\n      return this(matrix(x), y);\r\n    },\r\n    'Matrix, Array': function MatrixArray(x, y) {\r\n      // use matrix implementation\r\n      return this(x, matrix(y));\r\n    },\r\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\r\n      return algorithm10(x, unaryMinus(y), addScalar);\r\n    },\r\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\r\n      return algorithm14(x, y, this);\r\n    },\r\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\r\n      return algorithm10(y, x, this, true);\r\n    },\r\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\r\n      return algorithm14(y, x, this, true);\r\n    },\r\n    'Array, any': function ArrayAny(x, y) {\r\n      // use matrix implementation\r\n      return algorithm14(matrix(x), y, this, false).valueOf();\r\n    },\r\n    'any, Array': function anyArray(x, y) {\r\n      // use matrix implementation\r\n      return algorithm14(matrix(y), x, this, true).valueOf();\r\n    }\r\n  });\r\n});\r\n/**\r\n * Check whether matrix x and y have the same number of dimensions.\r\n * Throws a DimensionError when dimensions are not equal\r\n * @param {Matrix} x\r\n * @param {Matrix} y\r\n */\r\n\r\nfunction checkEqualDimensions(x, y) {\r\n  var xsize = x.size();\r\n  var ysize = y.size();\r\n\r\n  if (xsize.length !== ysize.length) {\r\n    throw new DimensionError(xsize.length, ysize.length);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}