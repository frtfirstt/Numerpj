{"ast":null,"code":"import { reshape as arrayReshape } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'reshape';\nvar dependencies = ['typed', 'isInteger', 'matrix'];\nexport var createReshape = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isInteger\n  } = _ref;\n  /**\r\n   * Reshape a multi dimensional array to fit the specified dimensions\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.reshape(x, sizes)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])\r\n   *     // returns Array  [[1, 2, 3], [4, 5, 6]]\r\n   *\r\n   *     math.reshape([[1, 2], [3, 4]], [1, 4])\r\n   *     // returns Array  [[1, 2, 3, 4]]\r\n   *\r\n   *     math.reshape([[1, 2], [3, 4]], [4])\r\n   *     // returns Array [1, 2, 3, 4]\r\n   *\r\n   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])\r\n   *     math.reshape(x, [2, 2, 2])\r\n   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\r\n   *\r\n   *    math.reshape([1, 2, 3, 4], [-1, 2])\r\n   *    // returns Matrix [[1, 2], [3, 4]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     size, squeeze, resize\r\n   *\r\n   * @param {Array | Matrix | *} x  Matrix to be reshaped\r\n   * @param {number[]} sizes        One dimensional array with integral sizes for\r\n   *                                each dimension. One -1 is allowed as wildcard,\r\n   *                                which calculates this dimension automatically.\r\n   *\r\n   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`\r\n   *\r\n   * @throws {TypeError}            If `sizes` does not contain solely integers\r\n   * @throws {DimensionError}       If the product of the new dimension sizes does\r\n   *                                not equal that of the old ones\r\n   */\n\n  return typed(name, {\n    'Matrix, Array': function MatrixArray(x, sizes) {\n      return x.reshape(sizes);\n    },\n    'Array, Array': function ArrayArray(x, sizes) {\n      sizes.forEach(function (size) {\n        if (!isInteger(size)) {\n          throw new TypeError('Invalid size for dimension: ' + size);\n        }\n      });\n      return arrayReshape(x, sizes);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/matrix/reshape.js"],"names":["reshape","arrayReshape","factory","name","dependencies","createReshape","_ref","typed","isInteger","MatrixArray","x","sizes","ArrayArray","forEach","size","TypeError"],"mappings":"AAAA,SAASA,OAAO,IAAIC,YAApB,QAAwC,sBAAxC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,QAAvB,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC9E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,qBAAiB,SAASM,WAAT,CAAqBC,CAArB,EAAwBC,KAAxB,EAA+B;AAC9C,aAAOD,CAAC,CAACV,OAAF,CAAUW,KAAV,CAAP;AACD,KAHgB;AAIjB,oBAAgB,SAASC,UAAT,CAAoBF,CAApB,EAAuBC,KAAvB,EAA8B;AAC5CA,MAAAA,KAAK,CAACE,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC5B,YAAI,CAACN,SAAS,CAACM,IAAD,CAAd,EAAsB;AACpB,gBAAM,IAAIC,SAAJ,CAAc,iCAAiCD,IAA/C,CAAN;AACD;AACF,OAJD;AAKA,aAAOb,YAAY,CAACS,CAAD,EAAIC,KAAJ,CAAnB;AACD;AAXgB,GAAP,CAAZ;AAaD,CA3DgD,CAA1C","sourcesContent":["import { reshape as arrayReshape } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'reshape';\r\nvar dependencies = ['typed', 'isInteger', 'matrix'];\r\nexport var createReshape = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    isInteger\r\n  } = _ref;\r\n\r\n  /**\r\n   * Reshape a multi dimensional array to fit the specified dimensions\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.reshape(x, sizes)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])\r\n   *     // returns Array  [[1, 2, 3], [4, 5, 6]]\r\n   *\r\n   *     math.reshape([[1, 2], [3, 4]], [1, 4])\r\n   *     // returns Array  [[1, 2, 3, 4]]\r\n   *\r\n   *     math.reshape([[1, 2], [3, 4]], [4])\r\n   *     // returns Array [1, 2, 3, 4]\r\n   *\r\n   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])\r\n   *     math.reshape(x, [2, 2, 2])\r\n   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\r\n   *\r\n   *    math.reshape([1, 2, 3, 4], [-1, 2])\r\n   *    // returns Matrix [[1, 2], [3, 4]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     size, squeeze, resize\r\n   *\r\n   * @param {Array | Matrix | *} x  Matrix to be reshaped\r\n   * @param {number[]} sizes        One dimensional array with integral sizes for\r\n   *                                each dimension. One -1 is allowed as wildcard,\r\n   *                                which calculates this dimension automatically.\r\n   *\r\n   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`\r\n   *\r\n   * @throws {TypeError}            If `sizes` does not contain solely integers\r\n   * @throws {DimensionError}       If the product of the new dimension sizes does\r\n   *                                not equal that of the old ones\r\n   */\r\n  return typed(name, {\r\n    'Matrix, Array': function MatrixArray(x, sizes) {\r\n      return x.reshape(sizes);\r\n    },\r\n    'Array, Array': function ArrayArray(x, sizes) {\r\n      sizes.forEach(function (size) {\r\n        if (!isInteger(size)) {\r\n          throw new TypeError('Invalid size for dimension: ' + size);\r\n        }\r\n      });\r\n      return arrayReshape(x, sizes);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}