{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'count';\nvar dependencies = ['typed', 'size', 'prod'];\nexport var createCount = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    prod\n  } = _ref;\n  /**\r\n   * Count the number of elements of a matrix, array or string.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.count(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.count('hello world')        // returns 11\r\n   *     const A = [[1, 2, 3], [4, 5, 6]]\r\n   *     math.count(A)                    // returns 6\r\n   *     math.count(math.range(1,6))      // returns 5\r\n   *\r\n   * See also:\r\n   *\r\n   *     size\r\n   *\r\n   * @param {string | Array | Matrix} x  A matrix or string\r\n   * @return {number} An integer with the elements in `x`.\r\n   */\n\n  return typed(name, {\n    string: function string(x) {\n      return x.length;\n    },\n    'Matrix | Array': function MatrixArray(x) {\n      return prod(size(x));\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/matrix/count.js"],"names":["factory","name","dependencies","createCount","_ref","typed","size","prod","string","x","length","MatrixArray"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC5E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,IAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBO,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,aAAOA,CAAC,CAACC,MAAT;AACD,KAHgB;AAIjB,sBAAkB,SAASC,WAAT,CAAqBF,CAArB,EAAwB;AACxC,aAAOF,IAAI,CAACD,IAAI,CAACG,CAAD,CAAL,CAAX;AACD;AANgB,GAAP,CAAZ;AAQD,CApC8C,CAAxC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'count';\r\nvar dependencies = ['typed', 'size', 'prod'];\r\nexport var createCount = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    size,\r\n    prod\r\n  } = _ref;\r\n\r\n  /**\r\n   * Count the number of elements of a matrix, array or string.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.count(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.count('hello world')        // returns 11\r\n   *     const A = [[1, 2, 3], [4, 5, 6]]\r\n   *     math.count(A)                    // returns 6\r\n   *     math.count(math.range(1,6))      // returns 5\r\n   *\r\n   * See also:\r\n   *\r\n   *     size\r\n   *\r\n   * @param {string | Array | Matrix} x  A matrix or string\r\n   * @return {number} An integer with the elements in `x`.\r\n   */\r\n  return typed(name, {\r\n    string: function string(x) {\r\n      return x.length;\r\n    },\r\n    'Matrix | Array': function MatrixArray(x) {\r\n      return prod(size(x));\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}