{"ast":null,"code":"import { clone } from '../../utils/object.js';\nimport { squeeze as arraySqueeze } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'squeeze';\nvar dependencies = ['typed', 'matrix'];\nexport var createSqueeze = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\r\n   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.squeeze(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.squeeze([3])           // returns 3\r\n   *     math.squeeze([[3]])         // returns 3\r\n   *\r\n   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)\r\n   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)\r\n   *\r\n   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)\r\n   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)\r\n   *\r\n   *     // only inner and outer dimensions are removed\r\n   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\r\n   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\r\n   *\r\n   * See also:\r\n   *\r\n   *     subset\r\n   *\r\n   * @param {Matrix | Array} x      Matrix to be squeezed\r\n   * @return {Matrix | Array} Squeezed matrix\r\n   */\n\n  return typed(name, {\n    Array: function Array(x) {\n      return arraySqueeze(clone(x));\n    },\n    Matrix: function Matrix(x) {\n      var res = arraySqueeze(x.toArray()); // FIXME: return the same type of matrix as the input\n\n      return Array.isArray(res) ? matrix(res) : res;\n    },\n    any: function any(x) {\n      // scalar\n      return clone(x);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/matrix/squeeze.js"],"names":["clone","squeeze","arraySqueeze","factory","name","dependencies","createSqueeze","_ref","typed","matrix","Array","x","Matrix","res","toArray","isArray","any"],"mappings":"AAAA,SAASA,KAAT,QAAsB,uBAAtB;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,sBAAxC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC9E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBM,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,CAAf,EAAkB;AACvB,aAAOT,YAAY,CAACF,KAAK,CAACW,CAAD,CAAN,CAAnB;AACD,KAHgB;AAIjBC,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBD,CAAhB,EAAmB;AACzB,UAAIE,GAAG,GAAGX,YAAY,CAACS,CAAC,CAACG,OAAF,EAAD,CAAtB,CADyB,CACY;;AAErC,aAAOJ,KAAK,CAACK,OAAN,CAAcF,GAAd,IAAqBJ,MAAM,CAACI,GAAD,CAA3B,GAAmCA,GAA1C;AACD,KARgB;AASjBG,IAAAA,GAAG,EAAE,SAASA,GAAT,CAAaL,CAAb,EAAgB;AACnB;AACA,aAAOX,KAAK,CAACW,CAAD,CAAZ;AACD;AAZgB,GAAP,CAAZ;AAcD,CAjDgD,CAA1C","sourcesContent":["import { clone } from '../../utils/object.js';\r\nimport { squeeze as arraySqueeze } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'squeeze';\r\nvar dependencies = ['typed', 'matrix'];\r\nexport var createSqueeze = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    matrix\r\n  } = _ref;\r\n\r\n  /**\r\n   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.squeeze(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.squeeze([3])           // returns 3\r\n   *     math.squeeze([[3]])         // returns 3\r\n   *\r\n   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)\r\n   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)\r\n   *\r\n   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)\r\n   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)\r\n   *\r\n   *     // only inner and outer dimensions are removed\r\n   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\r\n   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\r\n   *\r\n   * See also:\r\n   *\r\n   *     subset\r\n   *\r\n   * @param {Matrix | Array} x      Matrix to be squeezed\r\n   * @return {Matrix | Array} Squeezed matrix\r\n   */\r\n  return typed(name, {\r\n    Array: function Array(x) {\r\n      return arraySqueeze(clone(x));\r\n    },\r\n    Matrix: function Matrix(x) {\r\n      var res = arraySqueeze(x.toArray()); // FIXME: return the same type of matrix as the input\r\n\r\n      return Array.isArray(res) ? matrix(res) : res;\r\n    },\r\n    any: function any(x) {\r\n      // scalar\r\n      return clone(x);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}