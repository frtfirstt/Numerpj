{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'bellNumbers';\nvar dependencies = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];\nexport var createBellNumbers = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    isNegative,\n    isInteger,\n    stirlingS2\n  } = _ref;\n  /**\r\n   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\r\n   * bellNumbers only takes integer arguments.\r\n   * The following condition must be enforced: n >= 0\r\n   *\r\n   * Syntax:\r\n   *\r\n   *   math.bellNumbers(n)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.bellNumbers(3) // returns 5\r\n   *    math.bellNumbers(8) // returns 4140\r\n   *\r\n   * See also:\r\n   *\r\n   *    stirlingS2\r\n   *\r\n   * @param {Number | BigNumber} n    Total number of objects in the set\r\n   * @return {Number | BigNumber}     B(n)\r\n   */\n\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function bellNumbers');\n      } // Sum (k=0, n) S(n,k).\n\n\n      var result = 0;\n\n      for (var i = 0; i <= n; i++) {\n        result = addScalar(result, stirlingS2(n, i));\n      }\n\n      return result;\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/combinatorics/bellNumbers.js"],"names":["factory","name","dependencies","createBellNumbers","_ref","typed","addScalar","isNegative","isInteger","stirlingS2","numberBigNumber","n","TypeError","result","i"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,YAAvB,EAAqC,WAArC,EAAkD,YAAlD,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAClF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,SAFE;AAGFC,IAAAA,UAHE;AAIFC,IAAAA,SAJE;AAKFC,IAAAA;AALE,MAMAL,IANJ;AAQA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,0BAAsB,SAASS,eAAT,CAAyBC,CAAzB,EAA4B;AAChD,UAAI,CAACH,SAAS,CAACG,CAAD,CAAV,IAAiBJ,UAAU,CAACI,CAAD,CAA/B,EAAoC;AAClC,cAAM,IAAIC,SAAJ,CAAc,6DAAd,CAAN;AACD,OAH+C,CAG9C;;;AAGF,UAAIC,MAAM,GAAG,CAAb;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,CAArB,EAAwBG,CAAC,EAAzB,EAA6B;AAC3BD,QAAAA,MAAM,GAAGP,SAAS,CAACO,MAAD,EAASJ,UAAU,CAACE,CAAD,EAAIG,CAAJ,CAAnB,CAAlB;AACD;;AAED,aAAOD,MAAP;AACD;AAdgB,GAAP,CAAZ;AAgBD,CA9CoD,CAA9C","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'bellNumbers';\r\nvar dependencies = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];\r\nexport var createBellNumbers = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    addScalar,\r\n    isNegative,\r\n    isInteger,\r\n    stirlingS2\r\n  } = _ref;\r\n\r\n  /**\r\n   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\r\n   * bellNumbers only takes integer arguments.\r\n   * The following condition must be enforced: n >= 0\r\n   *\r\n   * Syntax:\r\n   *\r\n   *   math.bellNumbers(n)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.bellNumbers(3) // returns 5\r\n   *    math.bellNumbers(8) // returns 4140\r\n   *\r\n   * See also:\r\n   *\r\n   *    stirlingS2\r\n   *\r\n   * @param {Number | BigNumber} n    Total number of objects in the set\r\n   * @return {Number | BigNumber}     B(n)\r\n   */\r\n  return typed(name, {\r\n    'number | BigNumber': function numberBigNumber(n) {\r\n      if (!isInteger(n) || isNegative(n)) {\r\n        throw new TypeError('Non-negative integer value expected in function bellNumbers');\r\n      } // Sum (k=0, n) S(n,k).\r\n\r\n\r\n      var result = 0;\r\n\r\n      for (var i = 0; i <= n; i++) {\r\n        result = addScalar(result, stirlingS2(n, i));\r\n      }\r\n\r\n      return result;\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}