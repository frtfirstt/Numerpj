{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryPlusNumber } from '../../plain/number/index.js';\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber\n  } = _ref;\n  /**\r\n   * Unary plus operation.\r\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unaryPlus(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unaryPlus(3.5)      // returns 3.5\r\n   *    math.unaryPlus(1)     // returns 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    unaryMinus, add, subtract\r\n   *\r\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\r\n   *            Input value\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\r\n   */\n\n  return typed(name, {\n    number: unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return deepMap(x, this, true);\n    },\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/arithmetic/unaryPlus.js"],"names":["factory","deepMap","unaryPlusNumber","name","dependencies","createUnaryPlus","_ref","typed","config","BigNumber","number","Complex","x","Fraction","Unit","clone","ArrayMatrix","booleanString"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAChF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBO,IAAAA,MAAM,EAAER,eADS;AAEjBS,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAP,CAD2B,CACjB;AACX,KAJgB;AAKjBH,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBG,CAAnB,EAAsB;AAC/B,aAAOA,CAAP,CAD+B,CACrB;AACX,KAPgB;AAQjBC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBD,CAAlB,EAAqB;AAC7B,aAAOA,CAAP,CAD6B,CACnB;AACX,KAVgB;AAWjBE,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcF,CAAd,EAAiB;AACrB,aAAOA,CAAC,CAACG,KAAF,EAAP;AACD,KAbgB;AAcjB,sBAAkB,SAASC,WAAT,CAAqBJ,CAArB,EAAwB;AACxC;AACA,aAAOX,OAAO,CAACW,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;AACD,KAjBgB;AAkBjB,wBAAoB,SAASK,aAAT,CAAuBL,CAAvB,EAA0B;AAC5C;AACA,aAAOJ,MAAM,CAACE,MAAP,KAAkB,WAAlB,GAAgC,IAAID,SAAJ,CAAc,CAACG,CAAf,CAAhC,GAAoD,CAACA,CAA5D;AACD;AArBgB,GAAP,CAAZ;AAuBD,CAtDkD,CAA5C","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { unaryPlusNumber } from '../../plain/number/index.js';\r\nvar name = 'unaryPlus';\r\nvar dependencies = ['typed', 'config', 'BigNumber'];\r\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    config,\r\n    BigNumber\r\n  } = _ref;\r\n\r\n  /**\r\n   * Unary plus operation.\r\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unaryPlus(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unaryPlus(3.5)      // returns 3.5\r\n   *    math.unaryPlus(1)     // returns 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    unaryMinus, add, subtract\r\n   *\r\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\r\n   *            Input value\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\r\n   */\r\n  return typed(name, {\r\n    number: unaryPlusNumber,\r\n    Complex: function Complex(x) {\r\n      return x; // complex numbers are immutable\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x; // bignumbers are immutable\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return x; // fractions are immutable\r\n    },\r\n    Unit: function Unit(x) {\r\n      return x.clone();\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      // deep map collection, skip zeros since unaryPlus(0) = 0\r\n      return deepMap(x, this, true);\r\n    },\r\n    'boolean | string': function booleanString(x) {\r\n      // convert to a number or bignumber\r\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}