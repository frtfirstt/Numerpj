{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'evaluate';\nvar dependencies = ['typed', 'parse'];\nexport var createEvaluate = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse\n  } = _ref;\n  /**\r\n   * Evaluate an expression.\r\n   *\r\n   * Note the evaluating arbitrary expressions may involve security risks,\r\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.evaluate(expr)\r\n   *     math.evaluate(expr, scope)\r\n   *     math.evaluate([expr1, expr2, expr3, ...])\r\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\r\n   *\r\n   * Example:\r\n   *\r\n   *     math.evaluate('(2+3)/4')                // 1.25\r\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\r\n   *     math.evaluate('sqrt(-4)')               // 2i\r\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\r\n   *\r\n   *     let scope = {a:3, b:4}\r\n   *     math.evaluate('a * b', scope)           // 12\r\n   *\r\n   * See also:\r\n   *\r\n   *    parse, compile\r\n   *\r\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\r\n   * @param {Object} [scope]                    Scope to read/write variables\r\n   * @return {*} The result of the expression\r\n   * @throws {Error}\r\n   */\n\n  return typed(name, {\n    string: function string(expr) {\n      var scope = {};\n      return parse(expr).compile().evaluate(scope);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return parse(expr).compile().evaluate(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = {};\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/expression/function/evaluate.js"],"names":["deepMap","factory","name","dependencies","createEvaluate","_ref","typed","parse","string","expr","scope","compile","evaluate","stringObject","ArrayMatrix","entry","ArrayMatrixObject"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,UAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,CAAnB;AACA,OAAO,IAAIC,cAAc,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC/E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBM,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AAC5B,UAAIC,KAAK,GAAG,EAAZ;AACA,aAAOH,KAAK,CAACE,IAAD,CAAL,CAAYE,OAAZ,GAAsBC,QAAtB,CAA+BF,KAA/B,CAAP;AACD,KAJgB;AAKjB,sBAAkB,SAASG,YAAT,CAAsBJ,IAAtB,EAA4BC,KAA5B,EAAmC;AACnD,aAAOH,KAAK,CAACE,IAAD,CAAL,CAAYE,OAAZ,GAAsBC,QAAtB,CAA+BF,KAA/B,CAAP;AACD,KAPgB;AAQjB,sBAAkB,SAASI,WAAT,CAAqBL,IAArB,EAA2B;AAC3C,UAAIC,KAAK,GAAG,EAAZ;AACA,aAAOV,OAAO,CAACS,IAAD,EAAO,UAAUM,KAAV,EAAiB;AACpC,eAAOR,KAAK,CAACQ,KAAD,CAAL,CAAaJ,OAAb,GAAuBC,QAAvB,CAAgCF,KAAhC,CAAP;AACD,OAFa,CAAd;AAGD,KAbgB;AAcjB,8BAA0B,SAASM,iBAAT,CAA2BP,IAA3B,EAAiCC,KAAjC,EAAwC;AAChE,aAAOV,OAAO,CAACS,IAAD,EAAO,UAAUM,KAAV,EAAiB;AACpC,eAAOR,KAAK,CAACQ,KAAD,CAAL,CAAaJ,OAAb,GAAuBC,QAAvB,CAAgCF,KAAhC,CAAP;AACD,OAFa,CAAd;AAGD;AAlBgB,GAAP,CAAZ;AAoBD,CA1DiD,CAA3C","sourcesContent":["import { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'evaluate';\r\nvar dependencies = ['typed', 'parse'];\r\nexport var createEvaluate = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    parse\r\n  } = _ref;\r\n\r\n  /**\r\n   * Evaluate an expression.\r\n   *\r\n   * Note the evaluating arbitrary expressions may involve security risks,\r\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.evaluate(expr)\r\n   *     math.evaluate(expr, scope)\r\n   *     math.evaluate([expr1, expr2, expr3, ...])\r\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\r\n   *\r\n   * Example:\r\n   *\r\n   *     math.evaluate('(2+3)/4')                // 1.25\r\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\r\n   *     math.evaluate('sqrt(-4)')               // 2i\r\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\r\n   *\r\n   *     let scope = {a:3, b:4}\r\n   *     math.evaluate('a * b', scope)           // 12\r\n   *\r\n   * See also:\r\n   *\r\n   *    parse, compile\r\n   *\r\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\r\n   * @param {Object} [scope]                    Scope to read/write variables\r\n   * @return {*} The result of the expression\r\n   * @throws {Error}\r\n   */\r\n  return typed(name, {\r\n    string: function string(expr) {\r\n      var scope = {};\r\n      return parse(expr).compile().evaluate(scope);\r\n    },\r\n    'string, Object': function stringObject(expr, scope) {\r\n      return parse(expr).compile().evaluate(scope);\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(expr) {\r\n      var scope = {};\r\n      return deepMap(expr, function (entry) {\r\n        return parse(entry).compile().evaluate(scope);\r\n      });\r\n    },\r\n    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {\r\n      return deepMap(expr, function (entry) {\r\n        return parse(entry).compile().evaluate(scope);\r\n      });\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}