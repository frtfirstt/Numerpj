{"ast":null,"code":"import { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMap = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Create a new matrix or array with the results of the callback function executed on\r\n   * each entry of the matrix/array.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.map(x, callback)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.map([1, 2, 3], function(value) {\r\n   *      return value * value\r\n   *    })  // returns [1, 4, 9]\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, forEach, sort\r\n   *\r\n   * @param {Matrix | Array} x    The matrix to iterate on.\r\n   * @param {Function} callback   The callback method is invoked with three\r\n   *                              parameters: the value of the element, the index\r\n   *                              of the element, and the matrix being traversed.\r\n   * @return {Matrix | array}     Transformed map of x\r\n   */\n\n  return typed(name, {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n});\n/**\r\n * Map for a multi dimensional array\r\n * @param {Array} array\r\n * @param {Function} callback\r\n * @return {Array}\r\n * @private\r\n */\n\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      } else if (args === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, array);\n      }\n    }\n  };\n\n  return recurse(array, []);\n}","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/matrix/map.js"],"names":["maxArgumentCount","factory","name","dependencies","createMap","_ref","typed","_map","MatrixFunction","x","callback","map","array","args","recurse","value","index","Array","isArray","child","i","concat"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,yBAAjC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC1E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,uBAAmBK,IADF;AAEjB,wBAAoB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,QAA3B,EAAqC;AACvD,aAAOD,CAAC,CAACE,GAAF,CAAMD,QAAN,CAAP;AACD;AAJgB,GAAP,CAAZ;AAMD,CAnC4C,CAAtC;AAoCP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASH,IAAT,CAAcK,KAAd,EAAqBF,QAArB,EAA+B;AAC7B;AACA,MAAIG,IAAI,GAAGb,gBAAgB,CAACU,QAAD,CAA3B;;AAEA,MAAII,OAAO,GAAG,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;AAC3C,QAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxB,aAAOA,KAAK,CAACJ,GAAN,CAAU,UAAUQ,KAAV,EAAiBC,CAAjB,EAAoB;AACnC;AACA,eAAON,OAAO,CAACK,KAAD,EAAQH,KAAK,CAACK,MAAN,CAAaD,CAAb,CAAR,CAAd;AACD,OAHM,CAAP;AAID,KALD,MAKO;AACL;AACA,UAAIP,IAAI,KAAK,CAAb,EAAgB;AACd,eAAOH,QAAQ,CAACK,KAAD,CAAf;AACD,OAFD,MAEO,IAAIF,IAAI,KAAK,CAAb,EAAgB;AACrB,eAAOH,QAAQ,CAACK,KAAD,EAAQC,KAAR,CAAf;AACD,OAFM,MAEA;AACL;AACA,eAAON,QAAQ,CAACK,KAAD,EAAQC,KAAR,EAAeJ,KAAf,CAAf;AACD;AACF;AACF,GAjBD;;AAmBA,SAAOE,OAAO,CAACF,KAAD,EAAQ,EAAR,CAAd;AACD","sourcesContent":["import { maxArgumentCount } from '../../utils/function.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'map';\r\nvar dependencies = ['typed'];\r\nexport var createMap = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Create a new matrix or array with the results of the callback function executed on\r\n   * each entry of the matrix/array.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.map(x, callback)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.map([1, 2, 3], function(value) {\r\n   *      return value * value\r\n   *    })  // returns [1, 4, 9]\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, forEach, sort\r\n   *\r\n   * @param {Matrix | Array} x    The matrix to iterate on.\r\n   * @param {Function} callback   The callback method is invoked with three\r\n   *                              parameters: the value of the element, the index\r\n   *                              of the element, and the matrix being traversed.\r\n   * @return {Matrix | array}     Transformed map of x\r\n   */\r\n  return typed(name, {\r\n    'Array, function': _map,\r\n    'Matrix, function': function MatrixFunction(x, callback) {\r\n      return x.map(callback);\r\n    }\r\n  });\r\n});\r\n/**\r\n * Map for a multi dimensional array\r\n * @param {Array} array\r\n * @param {Function} callback\r\n * @return {Array}\r\n * @private\r\n */\r\n\r\nfunction _map(array, callback) {\r\n  // figure out what number of arguments the callback function expects\r\n  var args = maxArgumentCount(callback);\r\n\r\n  var recurse = function recurse(value, index) {\r\n    if (Array.isArray(value)) {\r\n      return value.map(function (child, i) {\r\n        // we create a copy of the index array and append the new index value\r\n        return recurse(child, index.concat(i));\r\n      });\r\n    } else {\r\n      // invoke the callback function with the right number of arguments\r\n      if (args === 1) {\r\n        return callback(value);\r\n      } else if (args === 2) {\r\n        return callback(value, index);\r\n      } else {\r\n        // 3 or -1\r\n        return callback(value, index, array);\r\n      }\r\n    }\r\n  };\r\n\r\n  return recurse(array, []);\r\n}"]},"metadata":{},"sourceType":"module"}