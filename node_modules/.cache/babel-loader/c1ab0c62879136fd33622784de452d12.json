{"ast":null,"code":"import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nimport { format } from '../utils/number.js';\nvar name = 'string';\nvar dependencies = ['typed'];\nexport var createString = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Create a string or convert any object into a string.\r\n   * Elements of Arrays and Matrices are processed element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.string(value)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.string(4.2)               // returns string '4.2'\r\n   *    math.string(math.complex(3, 2) // returns string '3 + 2i'\r\n   *\r\n   *    const u = math.unit(5, 'km')\r\n   *    math.string(u.to('m'))         // returns string '5000 m'\r\n   *\r\n   *    math.string([true, false])     // returns ['true', 'false']\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, index, matrix, number, unit\r\n   *\r\n   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\r\n   * @return {string | Array | Matrix} The created string\r\n   */\n\n  return typed(name, {\n    '': function _() {\n      return '';\n    },\n    number: format,\n    null: function _null(x) {\n      return 'null';\n    },\n    boolean: function boolean(x) {\n      return x + '';\n    },\n    string: function string(x) {\n      return x;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    },\n    any: function any(x) {\n      return String(x);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/type/string.js"],"names":["factory","deepMap","format","name","dependencies","createString","_ref","typed","_","number","null","_null","x","boolean","string","ArrayMatrix","any","String"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC7E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,QAAI,SAASK,CAAT,GAAa;AACf,aAAO,EAAP;AACD,KAHgB;AAIjBC,IAAAA,MAAM,EAAEP,MAJS;AAKjBQ,IAAAA,IAAI,EAAE,SAASC,KAAT,CAAeC,CAAf,EAAkB;AACtB,aAAO,MAAP;AACD,KAPgB;AAQjBC,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBD,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,GAAG,EAAX;AACD,KAVgB;AAWjBE,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBF,CAAhB,EAAmB;AACzB,aAAOA,CAAP;AACD,KAbgB;AAcjB,sBAAkB,SAASG,WAAT,CAAqBH,CAArB,EAAwB;AACxC,aAAOX,OAAO,CAACW,CAAD,EAAI,IAAJ,CAAd;AACD,KAhBgB;AAiBjBI,IAAAA,GAAG,EAAE,SAASA,GAAT,CAAaJ,CAAb,EAAgB;AACnB,aAAOK,MAAM,CAACL,CAAD,CAAb;AACD;AAnBgB,GAAP,CAAZ;AAqBD,CAnD+C,CAAzC","sourcesContent":["import { factory } from '../utils/factory.js';\r\nimport { deepMap } from '../utils/collection.js';\r\nimport { format } from '../utils/number.js';\r\nvar name = 'string';\r\nvar dependencies = ['typed'];\r\nexport var createString = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Create a string or convert any object into a string.\r\n   * Elements of Arrays and Matrices are processed element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.string(value)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.string(4.2)               // returns string '4.2'\r\n   *    math.string(math.complex(3, 2) // returns string '3 + 2i'\r\n   *\r\n   *    const u = math.unit(5, 'km')\r\n   *    math.string(u.to('m'))         // returns string '5000 m'\r\n   *\r\n   *    math.string([true, false])     // returns ['true', 'false']\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, index, matrix, number, unit\r\n   *\r\n   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\r\n   * @return {string | Array | Matrix} The created string\r\n   */\r\n  return typed(name, {\r\n    '': function _() {\r\n      return '';\r\n    },\r\n    number: format,\r\n    null: function _null(x) {\r\n      return 'null';\r\n    },\r\n    boolean: function boolean(x) {\r\n      return x + '';\r\n    },\r\n    string: function string(x) {\r\n      return x;\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    },\r\n    any: function any(x) {\r\n      return String(x);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}