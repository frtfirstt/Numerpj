{"ast":null,"code":"import { isArray, isMatrix, isString, typeOf } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nexport var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    DenseMatrix\n  } = _ref;\n\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (isMatrix(data) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype); // internal structures\n\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n  /**\r\n   * Attach type information\r\n   */\n\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n  /**\r\n   * Get a subset of the matrix, or replace a subset of the matrix.\r\n   *\r\n   * Usage:\r\n   *     const subset = matrix.subset(index)               // retrieve subset\r\n   *     const value = matrix.subset(index, replacement)   // replace subset\r\n   *\r\n   * @param {Index} index\r\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\r\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\r\n   *                                  the matrix is resized. If not provided,\r\n   *                                  new matrix elements will be filled with zeros.\r\n   */\n\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix\n\n          if (isMatrix(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n\n          return m;\n        }\n      // intentional fall through\n\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\r\n   * Replace a single element in the matrix.\r\n   * @param {Number[]} index   Zero-based index\r\n   * @param {*} value\r\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\r\n   *                                  the matrix is resized. If not provided,\r\n   *                                  new matrix elements will be left undefined.\r\n   * @return {ImmutableDenseMatrix} self\r\n   */\n\n\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n  /**\r\n   * Resize the matrix to the given size. Returns a copy of the matrix when\r\n   * `copy=true`, otherwise return the matrix itself (resize in place).\r\n   *\r\n   * @param {Number[]} size           The new size the matrix should have.\r\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\r\n   *                                  If not provided, the matrix elements will\r\n   *                                  be filled with zeros.\r\n   * @param {boolean} [copy]          Return a resized copy of the matrix\r\n   *\r\n   * @return {Matrix}                 The resized matrix\r\n   */\n\n\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n  /**\r\n   * Disallows reshaping in favor of immutability.\r\n   *\r\n   * @throws {Error} Operation not allowed\r\n   */\n\n\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n  /**\r\n   * Create a clone of the matrix\r\n   * @return {ImmutableDenseMatrix} clone\r\n   */\n\n\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n  };\n  /**\r\n   * Get a JSON representation of the matrix\r\n   * @returns {Object}\r\n   */\n\n\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\r\n   * Generate a matrix from a JSON object\r\n   * @param {Object} json  An object structured like\r\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\r\n   *                       where mathjs is optional\r\n   * @returns {ImmutableDenseMatrix}\r\n   */\n\n\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n  /**\r\n   * Swap rows i and j in Matrix.\r\n   *\r\n   * @param {Number} i       Matrix row index 1\r\n   * @param {Number} j       Matrix row index 2\r\n   *\r\n   * @return {Matrix}        The matrix reference\r\n   */\n\n\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n  /**\r\n   * Calculate the minimum value in the set\r\n   * @return {Number | undefined} min\r\n   */\n\n\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null; // compute min\n\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n\n    return this._min;\n  };\n  /**\r\n   * Calculate the maximum value in the set\r\n   * @return {Number | undefined} max\r\n   */\n\n\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null; // compute max\n\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n\n    return this._max;\n  };\n\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/type/matrix/ImmutableDenseMatrix.js"],"names":["isArray","isMatrix","isString","typeOf","clone","factory","name","dependencies","createImmutableDenseMatrixClass","_ref","smaller","DenseMatrix","ImmutableDenseMatrix","data","datatype","SyntaxError","Error","matrix","_data","_size","_datatype","_min","_max","size","min","max","TypeError","prototype","type","isImmutableDenseMatrix","subset","index","arguments","length","m","call","set","resize","reshape","toJSON","mathjs","fromJSON","json","swapRows","forEach","v","undefined","isClass"],"mappings":"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","sourcesContent":["import { isArray, isMatrix, isString, typeOf } from '../../utils/is.js';\r\nimport { clone } from '../../utils/object.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'ImmutableDenseMatrix';\r\nvar dependencies = ['smaller', 'DenseMatrix'];\r\nexport var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    smaller,\r\n    DenseMatrix\r\n  } = _ref;\r\n\r\n  function ImmutableDenseMatrix(data, datatype) {\r\n    if (!(this instanceof ImmutableDenseMatrix)) {\r\n      throw new SyntaxError('Constructor must be called with the new operator');\r\n    }\r\n\r\n    if (datatype && !isString(datatype)) {\r\n      throw new Error('Invalid datatype: ' + datatype);\r\n    }\r\n\r\n    if (isMatrix(data) || isArray(data)) {\r\n      // use DenseMatrix implementation\r\n      var matrix = new DenseMatrix(data, datatype); // internal structures\r\n\r\n      this._data = matrix._data;\r\n      this._size = matrix._size;\r\n      this._datatype = matrix._datatype;\r\n      this._min = null;\r\n      this._max = null;\r\n    } else if (data && isArray(data.data) && isArray(data.size)) {\r\n      // initialize fields from JSON representation\r\n      this._data = data.data;\r\n      this._size = data.size;\r\n      this._datatype = data.datatype;\r\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\r\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\r\n    } else if (data) {\r\n      // unsupported type\r\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\r\n    } else {\r\n      // nothing provided\r\n      this._data = [];\r\n      this._size = [0];\r\n      this._datatype = datatype;\r\n      this._min = null;\r\n      this._max = null;\r\n    }\r\n  }\r\n\r\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\r\n  /**\r\n   * Attach type information\r\n   */\r\n\r\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\r\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\r\n  /**\r\n   * Get a subset of the matrix, or replace a subset of the matrix.\r\n   *\r\n   * Usage:\r\n   *     const subset = matrix.subset(index)               // retrieve subset\r\n   *     const value = matrix.subset(index, replacement)   // replace subset\r\n   *\r\n   * @param {Index} index\r\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\r\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\r\n   *                                  the matrix is resized. If not provided,\r\n   *                                  new matrix elements will be filled with zeros.\r\n   */\r\n\r\n  ImmutableDenseMatrix.prototype.subset = function (index) {\r\n    switch (arguments.length) {\r\n      case 1:\r\n        {\r\n          // use base implementation\r\n          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix\r\n\r\n          if (isMatrix(m)) {\r\n            // return immutable matrix\r\n            return new ImmutableDenseMatrix({\r\n              data: m._data,\r\n              size: m._size,\r\n              datatype: m._datatype\r\n            });\r\n          }\r\n\r\n          return m;\r\n        }\r\n      // intentional fall through\r\n\r\n      case 2:\r\n      case 3:\r\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\r\n\r\n      default:\r\n        throw new SyntaxError('Wrong number of arguments');\r\n    }\r\n  };\r\n  /**\r\n   * Replace a single element in the matrix.\r\n   * @param {Number[]} index   Zero-based index\r\n   * @param {*} value\r\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\r\n   *                                  the matrix is resized. If not provided,\r\n   *                                  new matrix elements will be left undefined.\r\n   * @return {ImmutableDenseMatrix} self\r\n   */\r\n\r\n\r\n  ImmutableDenseMatrix.prototype.set = function () {\r\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\r\n  };\r\n  /**\r\n   * Resize the matrix to the given size. Returns a copy of the matrix when\r\n   * `copy=true`, otherwise return the matrix itself (resize in place).\r\n   *\r\n   * @param {Number[]} size           The new size the matrix should have.\r\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\r\n   *                                  If not provided, the matrix elements will\r\n   *                                  be filled with zeros.\r\n   * @param {boolean} [copy]          Return a resized copy of the matrix\r\n   *\r\n   * @return {Matrix}                 The resized matrix\r\n   */\r\n\r\n\r\n  ImmutableDenseMatrix.prototype.resize = function () {\r\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\r\n  };\r\n  /**\r\n   * Disallows reshaping in favor of immutability.\r\n   *\r\n   * @throws {Error} Operation not allowed\r\n   */\r\n\r\n\r\n  ImmutableDenseMatrix.prototype.reshape = function () {\r\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\r\n  };\r\n  /**\r\n   * Create a clone of the matrix\r\n   * @return {ImmutableDenseMatrix} clone\r\n   */\r\n\r\n\r\n  ImmutableDenseMatrix.prototype.clone = function () {\r\n    return new ImmutableDenseMatrix({\r\n      data: clone(this._data),\r\n      size: clone(this._size),\r\n      datatype: this._datatype\r\n    });\r\n  };\r\n  /**\r\n   * Get a JSON representation of the matrix\r\n   * @returns {Object}\r\n   */\r\n\r\n\r\n  ImmutableDenseMatrix.prototype.toJSON = function () {\r\n    return {\r\n      mathjs: 'ImmutableDenseMatrix',\r\n      data: this._data,\r\n      size: this._size,\r\n      datatype: this._datatype\r\n    };\r\n  };\r\n  /**\r\n   * Generate a matrix from a JSON object\r\n   * @param {Object} json  An object structured like\r\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\r\n   *                       where mathjs is optional\r\n   * @returns {ImmutableDenseMatrix}\r\n   */\r\n\r\n\r\n  ImmutableDenseMatrix.fromJSON = function (json) {\r\n    return new ImmutableDenseMatrix(json);\r\n  };\r\n  /**\r\n   * Swap rows i and j in Matrix.\r\n   *\r\n   * @param {Number} i       Matrix row index 1\r\n   * @param {Number} j       Matrix row index 2\r\n   *\r\n   * @return {Matrix}        The matrix reference\r\n   */\r\n\r\n\r\n  ImmutableDenseMatrix.prototype.swapRows = function () {\r\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\r\n  };\r\n  /**\r\n   * Calculate the minimum value in the set\r\n   * @return {Number | undefined} min\r\n   */\r\n\r\n\r\n  ImmutableDenseMatrix.prototype.min = function () {\r\n    // check min has been calculated before\r\n    if (this._min === null) {\r\n      // minimum\r\n      var m = null; // compute min\r\n\r\n      this.forEach(function (v) {\r\n        if (m === null || smaller(v, m)) {\r\n          m = v;\r\n        }\r\n      });\r\n      this._min = m !== null ? m : undefined;\r\n    }\r\n\r\n    return this._min;\r\n  };\r\n  /**\r\n   * Calculate the maximum value in the set\r\n   * @return {Number | undefined} max\r\n   */\r\n\r\n\r\n  ImmutableDenseMatrix.prototype.max = function () {\r\n    // check max has been calculated before\r\n    if (this._max === null) {\r\n      // maximum\r\n      var m = null; // compute max\r\n\r\n      this.forEach(function (v) {\r\n        if (m === null || smaller(m, v)) {\r\n          m = v;\r\n        }\r\n      });\r\n      this._max = m !== null ? m : undefined;\r\n    }\r\n\r\n    return this._max;\r\n  };\r\n\r\n  return ImmutableDenseMatrix;\r\n}, {\r\n  isClass: true\r\n});"]},"metadata":{},"sourceType":"module"}