{"ast":null,"code":"import { format } from '../../utils/string.js';\nimport { isString } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'print';\nvar dependencies = ['typed'];\nexport var createPrint = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Interpolate values into a string template.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.print(template, values)\r\n   *     math.print(template, values, precision)\r\n   *     math.print(template, values, options)\r\n   *\r\n   * Example usage:\r\n   *\r\n   *     // the following outputs: 'Lucy is 5 years old'\r\n   *     math.print('Lucy is $age years old', {age: 5})\r\n   *\r\n   *     // the following outputs: 'The value of pi is 3.141592654'\r\n   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)\r\n   *\r\n   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\r\n   *     math.print('Hello $user.name! The date is $date', {\r\n   *       user: {\r\n   *         name: 'Mary',\r\n   *       },\r\n   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\r\n   *     })\r\n   *\r\n   *     // the following outputs: 'My favorite fruits are apples and bananas !'\r\n   *     math.print('My favorite fruits are $0 and $1 !', [\r\n   *       'apples',\r\n   *       'bananas'\r\n   *     ])\r\n   *\r\n   * See also:\r\n   *\r\n   *     format\r\n   *\r\n   * @param {string} template           A string containing variable placeholders.\r\n   * @param {Object | Array | Matrix}   values An object or array containing variables\r\n   *                                    which will be filled in in the template.\r\n   * @param {number | Object} [options] Formatting options,\r\n   *                                    or the number of digits to format numbers.\r\n   *                                    See function math.format for a description\r\n   *                                    of all options.\r\n   * @return {string} Interpolated string\r\n   */\n\n  return typed(name, {\n    // note: Matrix will be converted automatically to an Array\n    'string, Object | Array': _print,\n    'string, Object | Array, number | Object': _print\n  });\n});\n/**\r\n * Interpolate values into a string template.\r\n * @param {string} template\r\n * @param {Object} values\r\n * @param {number | Object} [options]\r\n * @returns {string} Interpolated string\r\n * @private\r\n */\n\nfunction _print(template, values, options) {\n  return template.replace(/\\$([\\w.]+)/g, function (original, key) {\n    var keys = key.split('.');\n    var value = values[keys.shift()];\n\n    while (keys.length && value !== undefined) {\n      var k = keys.shift();\n      value = k ? value[k] : value + '.';\n    }\n\n    if (value !== undefined) {\n      if (!isString(value)) {\n        return format(value, options);\n      } else {\n        return value;\n      }\n    }\n\n    return original;\n  });\n}","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/string/print.js"],"names":["format","isString","factory","name","dependencies","createPrint","_ref","typed","_print","template","values","options","replace","original","key","keys","split","value","shift","length","undefined","k"],"mappings":"AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC5E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB;AACA,8BAA0BK,MAFT;AAGjB,+CAA2CA;AAH1B,GAAP,CAAZ;AAKD,CAtD8C,CAAxC;AAuDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAT,CAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,OAAlC,EAA2C;AACzC,SAAOF,QAAQ,CAACG,OAAT,CAAiB,aAAjB,EAAgC,UAAUC,QAAV,EAAoBC,GAApB,EAAyB;AAC9D,QAAIC,IAAI,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAX;AACA,QAAIC,KAAK,GAAGP,MAAM,CAACK,IAAI,CAACG,KAAL,EAAD,CAAlB;;AAEA,WAAOH,IAAI,CAACI,MAAL,IAAeF,KAAK,KAAKG,SAAhC,EAA2C;AACzC,UAAIC,CAAC,GAAGN,IAAI,CAACG,KAAL,EAAR;AACAD,MAAAA,KAAK,GAAGI,CAAC,GAAGJ,KAAK,CAACI,CAAD,CAAR,GAAcJ,KAAK,GAAG,GAA/B;AACD;;AAED,QAAIA,KAAK,KAAKG,SAAd,EAAyB;AACvB,UAAI,CAACnB,QAAQ,CAACgB,KAAD,CAAb,EAAsB;AACpB,eAAOjB,MAAM,CAACiB,KAAD,EAAQN,OAAR,CAAb;AACD,OAFD,MAEO;AACL,eAAOM,KAAP;AACD;AACF;;AAED,WAAOJ,QAAP;AACD,GAlBM,CAAP;AAmBD","sourcesContent":["import { format } from '../../utils/string.js';\r\nimport { isString } from '../../utils/is.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'print';\r\nvar dependencies = ['typed'];\r\nexport var createPrint = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Interpolate values into a string template.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.print(template, values)\r\n   *     math.print(template, values, precision)\r\n   *     math.print(template, values, options)\r\n   *\r\n   * Example usage:\r\n   *\r\n   *     // the following outputs: 'Lucy is 5 years old'\r\n   *     math.print('Lucy is $age years old', {age: 5})\r\n   *\r\n   *     // the following outputs: 'The value of pi is 3.141592654'\r\n   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)\r\n   *\r\n   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\r\n   *     math.print('Hello $user.name! The date is $date', {\r\n   *       user: {\r\n   *         name: 'Mary',\r\n   *       },\r\n   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\r\n   *     })\r\n   *\r\n   *     // the following outputs: 'My favorite fruits are apples and bananas !'\r\n   *     math.print('My favorite fruits are $0 and $1 !', [\r\n   *       'apples',\r\n   *       'bananas'\r\n   *     ])\r\n   *\r\n   * See also:\r\n   *\r\n   *     format\r\n   *\r\n   * @param {string} template           A string containing variable placeholders.\r\n   * @param {Object | Array | Matrix}   values An object or array containing variables\r\n   *                                    which will be filled in in the template.\r\n   * @param {number | Object} [options] Formatting options,\r\n   *                                    or the number of digits to format numbers.\r\n   *                                    See function math.format for a description\r\n   *                                    of all options.\r\n   * @return {string} Interpolated string\r\n   */\r\n  return typed(name, {\r\n    // note: Matrix will be converted automatically to an Array\r\n    'string, Object | Array': _print,\r\n    'string, Object | Array, number | Object': _print\r\n  });\r\n});\r\n/**\r\n * Interpolate values into a string template.\r\n * @param {string} template\r\n * @param {Object} values\r\n * @param {number | Object} [options]\r\n * @returns {string} Interpolated string\r\n * @private\r\n */\r\n\r\nfunction _print(template, values, options) {\r\n  return template.replace(/\\$([\\w.]+)/g, function (original, key) {\r\n    var keys = key.split('.');\r\n    var value = values[keys.shift()];\r\n\r\n    while (keys.length && value !== undefined) {\r\n      var k = keys.shift();\r\n      value = k ? value[k] : value + '.';\r\n    }\r\n\r\n    if (value !== undefined) {\r\n      if (!isString(value)) {\r\n        return format(value, options);\r\n      } else {\r\n        return value;\r\n      }\r\n    }\r\n\r\n    return original;\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}