{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { getArrayDataType } from '../../utils/array.js';\nimport { typeOf } from '../../utils/is.js';\nvar name = 'getMatrixDataType';\nvar dependencies = ['typed'];\nexport var createGetMatrixDataType = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Find the data type of all elements in a matrix or array,\r\n   * for example 'number' if all items are a number and 'Complex' if all values\r\n   * are complex numbers.\r\n   * If a matrix contains more than one data type, it will return 'mixed'.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.getMatrixDataType(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const x = [ [1, 2, 3], [4, 5, 6] ]\r\n   *    const mixedX = [ [1, true], [2, 3] ]\r\n   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]\r\n   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]\r\n   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]\r\n   *    const sparse = math.sparse(x)\r\n   *    const dense = math.matrix(x)\r\n   *    math.getMatrixDataType(x)   // returns 'number'\r\n   *    math.getMatrixDataType(sparse)   // returns 'number'\r\n   *    math.getMatrixDataType(dense)   // returns 'number'\r\n   *    math.getMatrixDataType(mixedX) // returns 'mixed'\r\n   *    math.getMatrixDataType(fractionX) // returns 'Fraction'\r\n   *    math.getMatrixDataType(unitX) // returns 'Unit'\r\n   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'\r\n   *\r\n   * See also:\r\n   *  SparseMatrix, DenseMatrix\r\n   *\r\n   * @param {...Matrix | Array} x   The Matrix with values.\r\n   *\r\n   * @return {string} A string representation of the matrix type\r\n   */\n\n  return typed(name, {\n    Array: function Array(x) {\n      return getArrayDataType(x, typeOf);\n    },\n    Matrix: function Matrix(x) {\n      return x.getDataType();\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/matrix/getMatrixDataType.js"],"names":["factory","getArrayDataType","typeOf","name","dependencies","createGetMatrixDataType","_ref","typed","Array","x","Matrix","getDataType"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,IAAIC,IAAI,GAAG,mBAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,uBAAuB,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AACxF,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,CAAf,EAAkB;AACvB,aAAOR,gBAAgB,CAACQ,CAAD,EAAIP,MAAJ,CAAvB;AACD,KAHgB;AAIjBQ,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBD,CAAhB,EAAmB;AACzB,aAAOA,CAAC,CAACE,WAAF,EAAP;AACD;AANgB,GAAP,CAAZ;AAQD,CA/C0D,CAApD","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { getArrayDataType } from '../../utils/array.js';\r\nimport { typeOf } from '../../utils/is.js';\r\nvar name = 'getMatrixDataType';\r\nvar dependencies = ['typed'];\r\nexport var createGetMatrixDataType = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Find the data type of all elements in a matrix or array,\r\n   * for example 'number' if all items are a number and 'Complex' if all values\r\n   * are complex numbers.\r\n   * If a matrix contains more than one data type, it will return 'mixed'.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.getMatrixDataType(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const x = [ [1, 2, 3], [4, 5, 6] ]\r\n   *    const mixedX = [ [1, true], [2, 3] ]\r\n   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]\r\n   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]\r\n   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]\r\n   *    const sparse = math.sparse(x)\r\n   *    const dense = math.matrix(x)\r\n   *    math.getMatrixDataType(x)   // returns 'number'\r\n   *    math.getMatrixDataType(sparse)   // returns 'number'\r\n   *    math.getMatrixDataType(dense)   // returns 'number'\r\n   *    math.getMatrixDataType(mixedX) // returns 'mixed'\r\n   *    math.getMatrixDataType(fractionX) // returns 'Fraction'\r\n   *    math.getMatrixDataType(unitX) // returns 'Unit'\r\n   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'\r\n   *\r\n   * See also:\r\n   *  SparseMatrix, DenseMatrix\r\n   *\r\n   * @param {...Matrix | Array} x   The Matrix with values.\r\n   *\r\n   * @return {string} A string representation of the matrix type\r\n   */\r\n  return typed(name, {\r\n    Array: function Array(x) {\r\n      return getArrayDataType(x, typeOf);\r\n    },\r\n    Matrix: function Matrix(x) {\r\n      return x.getDataType();\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}