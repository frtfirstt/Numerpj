{"ast":null,"code":"import { isSymbolNode } from '../../../utils/is.js';\n/**\r\n * Compile an inline expression like \"x > 0\"\r\n * @param {Node} expression\r\n * @param {Object} math\r\n * @param {Object} scope\r\n * @return {function} Returns a function with one argument which fills in the\r\n *                    undefined variable (like \"x\") and evaluates the expression\r\n */\n\nexport function compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return isSymbolNode(node) && !(node.name in math) && !(node.name in scope);\n  })[0];\n\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  } // create a test function for this equation\n\n\n  var name = symbol.name; // variable name\n\n  var subScope = Object.create(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope[name] = x;\n    return eq.evaluate(subScope);\n  };\n}","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js"],"names":["isSymbolNode","compileInlineExpression","expression","math","scope","symbol","filter","node","name","Error","subScope","Object","create","eq","compile","inlineExpression","x","evaluate"],"mappings":"AAAA,SAASA,YAAT,QAA6B,sBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAT,CAAiCC,UAAjC,EAA6CC,IAA7C,EAAmDC,KAAnD,EAA0D;AAC/D;AACA,MAAIC,MAAM,GAAGH,UAAU,CAACI,MAAX,CAAkB,UAAUC,IAAV,EAAgB;AAC7C,WAAOP,YAAY,CAACO,IAAD,CAAZ,IAAsB,EAAEA,IAAI,CAACC,IAAL,IAAaL,IAAf,CAAtB,IAA8C,EAAEI,IAAI,CAACC,IAAL,IAAaJ,KAAf,CAArD;AACD,GAFY,EAEV,CAFU,CAAb;;AAIA,MAAI,CAACC,MAAL,EAAa;AACX,UAAM,IAAII,KAAJ,CAAU,uDAAuDP,UAAvD,GAAoE,GAA9E,CAAN;AACD,GAR8D,CAQ7D;;;AAGF,MAAIM,IAAI,GAAGH,MAAM,CAACG,IAAlB,CAX+D,CAWvC;;AAExB,MAAIE,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcR,KAAd,CAAf;AACA,MAAIS,EAAE,GAAGX,UAAU,CAACY,OAAX,EAAT;AACA,SAAO,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;AAClCN,IAAAA,QAAQ,CAACF,IAAD,CAAR,GAAiBQ,CAAjB;AACA,WAAOH,EAAE,CAACI,QAAH,CAAYP,QAAZ,CAAP;AACD,GAHD;AAID","sourcesContent":["import { isSymbolNode } from '../../../utils/is.js';\r\n/**\r\n * Compile an inline expression like \"x > 0\"\r\n * @param {Node} expression\r\n * @param {Object} math\r\n * @param {Object} scope\r\n * @return {function} Returns a function with one argument which fills in the\r\n *                    undefined variable (like \"x\") and evaluates the expression\r\n */\r\n\r\nexport function compileInlineExpression(expression, math, scope) {\r\n  // find an undefined symbol\r\n  var symbol = expression.filter(function (node) {\r\n    return isSymbolNode(node) && !(node.name in math) && !(node.name in scope);\r\n  })[0];\r\n\r\n  if (!symbol) {\r\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\r\n  } // create a test function for this equation\r\n\r\n\r\n  var name = symbol.name; // variable name\r\n\r\n  var subScope = Object.create(scope);\r\n  var eq = expression.compile();\r\n  return function inlineExpression(x) {\r\n    subScope[name] = x;\r\n    return eq.evaluate(subScope);\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}