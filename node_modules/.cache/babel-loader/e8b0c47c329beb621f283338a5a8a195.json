{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isNaNNumber } from '../../plain/number/index.js';\nvar name = 'isNaN';\nvar dependencies = ['typed'];\nexport var createIsNaN = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Test whether a value is NaN (not a number).\r\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isNaN(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isNaN(3)                     // returns false\r\n   *    math.isNaN(NaN)                   // returns true\r\n   *    math.isNaN(0)                     // returns false\r\n   *    math.isNaN(math.bignumber(NaN))   // returns true\r\n   *    math.isNaN(math.bignumber(0))     // returns false\r\n   *    math.isNaN(math.fraction(-2, 5))  // returns false\r\n   *    math.isNaN('-2')                  // returns false\r\n   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\r\n   *\r\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\r\n   * @return {boolean}  Returns true when `x` is NaN.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\n\n  return typed(name, {\n    number: isNaNNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return false;\n    },\n    Complex: function Complex(x) {\n      return x.isNaN();\n    },\n    Unit: function Unit(x) {\n      return Number.isNaN(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, Number.isNaN);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/utils/isNaN.js"],"names":["deepMap","factory","isNaNNumber","name","dependencies","createIsNaN","_ref","typed","number","BigNumber","x","isNaN","Fraction","Complex","Unit","Number","value","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC5E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEN,WADS;AAEjBO,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACC,KAAF,EAAP;AACD,KAJgB;AAKjBC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBF,CAAlB,EAAqB;AAC7B,aAAO,KAAP;AACD,KAPgB;AAQjBG,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBH,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACC,KAAF,EAAP;AACD,KAVgB;AAWjBG,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcJ,CAAd,EAAiB;AACrB,aAAOK,MAAM,CAACJ,KAAP,CAAaD,CAAC,CAACM,KAAf,CAAP;AACD,KAbgB;AAcjB,sBAAkB,SAASC,WAAT,CAAqBP,CAArB,EAAwB;AACxC,aAAOV,OAAO,CAACU,CAAD,EAAIK,MAAM,CAACJ,KAAX,CAAd;AACD;AAhBgB,GAAP,CAAZ;AAkBD,CApD8C,CAAxC","sourcesContent":["import { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { isNaNNumber } from '../../plain/number/index.js';\r\nvar name = 'isNaN';\r\nvar dependencies = ['typed'];\r\nexport var createIsNaN = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Test whether a value is NaN (not a number).\r\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isNaN(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isNaN(3)                     // returns false\r\n   *    math.isNaN(NaN)                   // returns true\r\n   *    math.isNaN(0)                     // returns false\r\n   *    math.isNaN(math.bignumber(NaN))   // returns true\r\n   *    math.isNaN(math.bignumber(0))     // returns false\r\n   *    math.isNaN(math.fraction(-2, 5))  // returns false\r\n   *    math.isNaN('-2')                  // returns false\r\n   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\r\n   *\r\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\r\n   * @return {boolean}  Returns true when `x` is NaN.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\r\n  return typed(name, {\r\n    number: isNaNNumber,\r\n    BigNumber: function BigNumber(x) {\r\n      return x.isNaN();\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return false;\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.isNaN();\r\n    },\r\n    Unit: function Unit(x) {\r\n      return Number.isNaN(x.value);\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, Number.isNaN);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}