{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMatrix, isNumber } from '../../utils/is.js';\nimport { createRng } from './util/seededRNG.js';\nvar name = 'pickRandom';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createPickRandom = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    on\n  } = _ref; // seeded pseudo random number generator\n\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\r\n   * Random pick one or more values from a one dimensional array.\r\n   * Array elements are picked using a random function with uniform or weighted distribution.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.pickRandom(array)\r\n   *     math.pickRandom(array, number)\r\n   *     math.pickRandom(array, weights)\r\n   *     math.pickRandom(array, number, weights)\r\n   *     math.pickRandom(array, weights, number)\r\n   *     math.pickRandom(array, { weights, number, elementWise })\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array\r\n   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array\r\n   *     math.pickRandom([3, 6, 12, 2], { number: 2 })   // returns an array of two of the values in the array\r\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution\r\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution\r\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution\r\n   *\r\n   *     math.pickRandom([{x: 1.0, y: 2.0}, {x: 1.1, y: 2.0}], { elementWise: false })\r\n   *         // returns one of the items in the array\r\n   *\r\n   * See also:\r\n   *\r\n   *     random, randomInt\r\n   *\r\n   * @param {Array | Matrix} array     A one dimensional array\r\n   * @param {Int} number               An int or float\r\n   * @param {Array | Matrix} weights   An array of ints or floats\r\n   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.\r\n   *                                   Returns an array with the configured number of elements when number is > 1.\r\n   */\n\n\n  return typed({\n    'Array | Matrix': function ArrayMatrix(possibles) {\n      return _pickRandom(possibles, {});\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(possibles, options) {\n      return _pickRandom(possibles, options);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {\n      return _pickRandom(possibles, {\n        number\n      });\n    },\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(possibles, weights) {\n      return _pickRandom(possibles, {\n        weights\n      });\n    },\n    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {\n      return _pickRandom(possibles, {\n        number,\n        weights\n      });\n    },\n    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {\n      return _pickRandom(possibles, {\n        number,\n        weights\n      });\n    }\n  });\n  /**\r\n   * @param {Array | Matrix} possibles\r\n   * @param {{\r\n   *   number?: number,\r\n   *   weights?: Array | Matrix,\r\n   *   elementWise: boolean\r\n   * }} options\r\n   * @returns {number | Array}\r\n   * @private\r\n   */\n\n  function _pickRandom(possibles, _ref2) {\n    var {\n      number,\n      weights,\n      elementWise = true\n    } = _ref2;\n    var single = typeof number === 'undefined';\n\n    if (single) {\n      number = 1;\n    }\n\n    var createMatrix = isMatrix(possibles) ? possibles.create : isMatrix(weights) ? weights.create : null;\n    possibles = possibles.valueOf(); // get Array\n\n    if (weights) {\n      weights = weights.valueOf(); // get Array\n    }\n\n    if (elementWise === true) {\n      possibles = flatten(possibles);\n      weights = flatten(weights);\n    }\n\n    var totalWeights = 0;\n\n    if (typeof weights !== 'undefined') {\n      if (weights.length !== possibles.length) {\n        throw new Error('Weights must have the same length as possibles');\n      }\n\n      for (var i = 0, len = weights.length; i < len; i++) {\n        if (!isNumber(weights[i]) || weights[i] < 0) {\n          throw new Error('Weights must be an array of positive numbers');\n        }\n\n        totalWeights += weights[i];\n      }\n    }\n\n    var length = possibles.length;\n    var result = [];\n    var pick;\n\n    while (result.length < number) {\n      if (typeof weights === 'undefined') {\n        pick = possibles[Math.floor(rng() * length)];\n      } else {\n        var randKey = rng() * totalWeights;\n\n        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {\n          randKey -= weights[_i];\n\n          if (randKey < 0) {\n            pick = possibles[_i];\n            break;\n          }\n        }\n      }\n\n      result.push(pick);\n    }\n\n    return single ? result[0] : createMatrix ? createMatrix(result) : result;\n  }\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/probability/pickRandom.js"],"names":["flatten","factory","isMatrix","isNumber","createRng","name","dependencies","createPickRandom","_ref","typed","config","on","rng","randomSeed","curr","prev","ArrayMatrix","possibles","_pickRandom","ArrayMatrixObject","options","ArrayMatrixNumber","number","ArrayMatrixArrayMatrix","weights","ArrayMatrixArrayMatrixNumber","ArrayMatrixNumberArrayMatrix","_ref2","elementWise","single","createMatrix","create","valueOf","totalWeights","length","Error","i","len","result","pick","Math","floor","randKey","_i","_len","push"],"mappings":"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","sourcesContent":["import { flatten } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { isMatrix, isNumber } from '../../utils/is.js';\r\nimport { createRng } from './util/seededRNG.js';\r\nvar name = 'pickRandom';\r\nvar dependencies = ['typed', 'config', '?on'];\r\nexport var createPickRandom = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    config,\r\n    on\r\n  } = _ref;\r\n  // seeded pseudo random number generator\r\n  var rng = createRng(config.randomSeed);\r\n\r\n  if (on) {\r\n    on('config', function (curr, prev) {\r\n      if (curr.randomSeed !== prev.randomSeed) {\r\n        rng = createRng(curr.randomSeed);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Random pick one or more values from a one dimensional array.\r\n   * Array elements are picked using a random function with uniform or weighted distribution.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.pickRandom(array)\r\n   *     math.pickRandom(array, number)\r\n   *     math.pickRandom(array, weights)\r\n   *     math.pickRandom(array, number, weights)\r\n   *     math.pickRandom(array, weights, number)\r\n   *     math.pickRandom(array, { weights, number, elementWise })\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array\r\n   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array\r\n   *     math.pickRandom([3, 6, 12, 2], { number: 2 })   // returns an array of two of the values in the array\r\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution\r\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution\r\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution\r\n   *\r\n   *     math.pickRandom([{x: 1.0, y: 2.0}, {x: 1.1, y: 2.0}], { elementWise: false })\r\n   *         // returns one of the items in the array\r\n   *\r\n   * See also:\r\n   *\r\n   *     random, randomInt\r\n   *\r\n   * @param {Array | Matrix} array     A one dimensional array\r\n   * @param {Int} number               An int or float\r\n   * @param {Array | Matrix} weights   An array of ints or floats\r\n   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.\r\n   *                                   Returns an array with the configured number of elements when number is > 1.\r\n   */\r\n\r\n\r\n  return typed({\r\n    'Array | Matrix': function ArrayMatrix(possibles) {\r\n      return _pickRandom(possibles, {});\r\n    },\r\n    'Array | Matrix, Object': function ArrayMatrixObject(possibles, options) {\r\n      return _pickRandom(possibles, options);\r\n    },\r\n    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {\r\n      return _pickRandom(possibles, {\r\n        number\r\n      });\r\n    },\r\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(possibles, weights) {\r\n      return _pickRandom(possibles, {\r\n        weights\r\n      });\r\n    },\r\n    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {\r\n      return _pickRandom(possibles, {\r\n        number,\r\n        weights\r\n      });\r\n    },\r\n    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {\r\n      return _pickRandom(possibles, {\r\n        number,\r\n        weights\r\n      });\r\n    }\r\n  });\r\n  /**\r\n   * @param {Array | Matrix} possibles\r\n   * @param {{\r\n   *   number?: number,\r\n   *   weights?: Array | Matrix,\r\n   *   elementWise: boolean\r\n   * }} options\r\n   * @returns {number | Array}\r\n   * @private\r\n   */\r\n\r\n  function _pickRandom(possibles, _ref2) {\r\n    var {\r\n      number,\r\n      weights,\r\n      elementWise = true\r\n    } = _ref2;\r\n    var single = typeof number === 'undefined';\r\n\r\n    if (single) {\r\n      number = 1;\r\n    }\r\n\r\n    var createMatrix = isMatrix(possibles) ? possibles.create : isMatrix(weights) ? weights.create : null;\r\n    possibles = possibles.valueOf(); // get Array\r\n\r\n    if (weights) {\r\n      weights = weights.valueOf(); // get Array\r\n    }\r\n\r\n    if (elementWise === true) {\r\n      possibles = flatten(possibles);\r\n      weights = flatten(weights);\r\n    }\r\n\r\n    var totalWeights = 0;\r\n\r\n    if (typeof weights !== 'undefined') {\r\n      if (weights.length !== possibles.length) {\r\n        throw new Error('Weights must have the same length as possibles');\r\n      }\r\n\r\n      for (var i = 0, len = weights.length; i < len; i++) {\r\n        if (!isNumber(weights[i]) || weights[i] < 0) {\r\n          throw new Error('Weights must be an array of positive numbers');\r\n        }\r\n\r\n        totalWeights += weights[i];\r\n      }\r\n    }\r\n\r\n    var length = possibles.length;\r\n    var result = [];\r\n    var pick;\r\n\r\n    while (result.length < number) {\r\n      if (typeof weights === 'undefined') {\r\n        pick = possibles[Math.floor(rng() * length)];\r\n      } else {\r\n        var randKey = rng() * totalWeights;\r\n\r\n        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {\r\n          randKey -= weights[_i];\r\n\r\n          if (randKey < 0) {\r\n            pick = possibles[_i];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      result.push(pick);\r\n    }\r\n\r\n    return single ? result[0] : createMatrix ? createMatrix(result) : result;\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}