{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'unit';\nvar dependencies = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit\n\nexport var createUnitFunction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\r\n   * Create a unit. Depending on the passed arguments, the function\r\n   * will create and return a new math.Unit object.\r\n   * When a matrix is provided, all elements will be converted to units.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.unit(unit : string)\r\n   *     math.unit(value : number, unit : string)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\r\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\r\n   *    a.to('m')                       // returns Unit 0.05 m\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\r\n   *\r\n   * @param {* | Array | Matrix} args   A number and unit.\r\n   * @return {Unit | Array | Matrix}    The created unit\r\n   */\n\n  return typed(name, {\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      if (Unit.isValuelessUnit(x)) {\n        return new Unit(null, x); // a pure unit\n      }\n\n      return Unit.parse(x, {\n        allowNoUnits: true\n      }); // a unit with value, like '5cm'\n    },\n    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {\n      return new Unit(value, unit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/type/unit/function/unit.js"],"names":["factory","deepMap","name","dependencies","createUnitFunction","_ref","typed","Unit","x","clone","string","isValuelessUnit","parse","allowNoUnits","numberBigNumberFractionComplexString","value","unit","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,CAAnB,C,CAAsC;;AAEtC,OAAO,IAAIC,kBAAkB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AACnF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,CAAd,EAAiB;AACrB,aAAOA,CAAC,CAACC,KAAF,EAAP;AACD,KAHgB;AAIjBC,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBF,CAAhB,EAAmB;AACzB,UAAID,IAAI,CAACI,eAAL,CAAqBH,CAArB,CAAJ,EAA6B;AAC3B,eAAO,IAAID,IAAJ,CAAS,IAAT,EAAeC,CAAf,CAAP,CAD2B,CACD;AAC3B;;AAED,aAAOD,IAAI,CAACK,KAAL,CAAWJ,CAAX,EAAc;AACnBK,QAAAA,YAAY,EAAE;AADK,OAAd,CAAP,CALyB,CAOrB;AACL,KAZgB;AAajB,uDAAmD,SAASC,oCAAT,CAA8CC,KAA9C,EAAqDC,IAArD,EAA2D;AAC5G,aAAO,IAAIT,IAAJ,CAASQ,KAAT,EAAgBC,IAAhB,CAAP;AACD,KAfgB;AAgBjB,sBAAkB,SAASC,WAAT,CAAqBT,CAArB,EAAwB;AACxC,aAAOP,OAAO,CAACO,CAAD,EAAI,IAAJ,CAAd;AACD;AAlBgB,GAAP,CAAZ;AAoBD,CAjDqD,CAA/C","sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nimport { deepMap } from '../../../utils/collection.js';\r\nvar name = 'unit';\r\nvar dependencies = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit\r\n\r\nexport var createUnitFunction = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    Unit\r\n  } = _ref;\r\n\r\n  /**\r\n   * Create a unit. Depending on the passed arguments, the function\r\n   * will create and return a new math.Unit object.\r\n   * When a matrix is provided, all elements will be converted to units.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.unit(unit : string)\r\n   *     math.unit(value : number, unit : string)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\r\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\r\n   *    a.to('m')                       // returns Unit 0.05 m\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\r\n   *\r\n   * @param {* | Array | Matrix} args   A number and unit.\r\n   * @return {Unit | Array | Matrix}    The created unit\r\n   */\r\n  return typed(name, {\r\n    Unit: function Unit(x) {\r\n      return x.clone();\r\n    },\r\n    string: function string(x) {\r\n      if (Unit.isValuelessUnit(x)) {\r\n        return new Unit(null, x); // a pure unit\r\n      }\r\n\r\n      return Unit.parse(x, {\r\n        allowNoUnits: true\r\n      }); // a unit with value, like '5cm'\r\n    },\r\n    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {\r\n      return new Unit(value, unit);\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}