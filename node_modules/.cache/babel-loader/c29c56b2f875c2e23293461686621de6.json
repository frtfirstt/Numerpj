{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nvar name = 'createUnit';\nvar dependencies = ['typed', 'Unit'];\nexport var createCreateUnit = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\r\n   * Create a user-defined unit and register it with the Unit type.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.createUnit({\r\n   *       baseUnit1: {\r\n   *         aliases: [string, ...]\r\n   *         prefixes: object\r\n   *       },\r\n   *       unit2: {\r\n   *         definition: string,\r\n   *         aliases: [string, ...]\r\n   *         prefixes: object,\r\n   *         offset: number\r\n   *       },\r\n   *       unit3: string    // Shortcut\r\n   *     })\r\n   *\r\n   *     // Another shortcut:\r\n   *     math.createUnit(string, unit : string, [object])\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.createUnit('foo')\r\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})\r\n   *     math.createUnit('mph', '1 mile/hour')\r\n   *\r\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\r\n   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\r\n   * @param {Object} options   (optional) An object containing any of the following properties:\r\n   *     - `prefixes {string}` \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\r\n   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']\r\n   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\r\n   *\r\n   * See also:\r\n   *\r\n   *     unit\r\n   *\r\n   * @return {Unit} The new unit\r\n   */\n\n  return typed(name, {\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\n    'Object, Object': function ObjectObject(obj, options) {\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    Object: function Object(obj) {\n      return Unit.createUnit(obj, {});\n    },\n    // Shortcut method for creating one unit.\n    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    'string, Unit | string | Object': function stringUnitStringObject(name, def) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, {});\n    },\n    // Without a definition, creates a base unit.\n    string: function string(name) {\n      var obj = {};\n      obj[name] = {};\n      return Unit.createUnit(obj, {});\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/type/unit/function/createUnit.js"],"names":["factory","name","dependencies","createCreateUnit","_ref","typed","Unit","ObjectObject","obj","options","createUnit","Object","stringUnitStringObjectObject","def","stringUnitStringObject","string"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,YAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,CAAnB;AACA,OAAO,IAAIC,gBAAgB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AACjF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB;AACA,sBAAkB,SAASM,YAAT,CAAsBC,GAAtB,EAA2BC,OAA3B,EAAoC;AACpD,aAAOH,IAAI,CAACI,UAAL,CAAgBF,GAAhB,EAAqBC,OAArB,CAAP;AACD,KAJgB;AAKjB;AACAE,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBH,GAAhB,EAAqB;AAC3B,aAAOF,IAAI,CAACI,UAAL,CAAgBF,GAAhB,EAAqB,EAArB,CAAP;AACD,KARgB;AASjB;AACA,8CAA0C,SAASI,4BAAT,CAAsCX,IAAtC,EAA4CY,GAA5C,EAAiDJ,OAAjD,EAA0D;AAClG,UAAID,GAAG,GAAG,EAAV;AACAA,MAAAA,GAAG,CAACP,IAAD,CAAH,GAAYY,GAAZ;AACA,aAAOP,IAAI,CAACI,UAAL,CAAgBF,GAAhB,EAAqBC,OAArB,CAAP;AACD,KAdgB;AAejB;AACA,sCAAkC,SAASK,sBAAT,CAAgCb,IAAhC,EAAsCY,GAAtC,EAA2C;AAC3E,UAAIL,GAAG,GAAG,EAAV;AACAA,MAAAA,GAAG,CAACP,IAAD,CAAH,GAAYY,GAAZ;AACA,aAAOP,IAAI,CAACI,UAAL,CAAgBF,GAAhB,EAAqB,EAArB,CAAP;AACD,KApBgB;AAqBjB;AACAO,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBd,IAAhB,EAAsB;AAC5B,UAAIO,GAAG,GAAG,EAAV;AACAA,MAAAA,GAAG,CAACP,IAAD,CAAH,GAAY,EAAZ;AACA,aAAOK,IAAI,CAACI,UAAL,CAAgBF,GAAhB,EAAqB,EAArB,CAAP;AACD;AA1BgB,GAAP,CAAZ;AA4BD,CA3EmD,CAA7C","sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nvar name = 'createUnit';\r\nvar dependencies = ['typed', 'Unit'];\r\nexport var createCreateUnit = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    Unit\r\n  } = _ref;\r\n\r\n  /**\r\n   * Create a user-defined unit and register it with the Unit type.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.createUnit({\r\n   *       baseUnit1: {\r\n   *         aliases: [string, ...]\r\n   *         prefixes: object\r\n   *       },\r\n   *       unit2: {\r\n   *         definition: string,\r\n   *         aliases: [string, ...]\r\n   *         prefixes: object,\r\n   *         offset: number\r\n   *       },\r\n   *       unit3: string    // Shortcut\r\n   *     })\r\n   *\r\n   *     // Another shortcut:\r\n   *     math.createUnit(string, unit : string, [object])\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.createUnit('foo')\r\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})\r\n   *     math.createUnit('mph', '1 mile/hour')\r\n   *\r\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\r\n   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\r\n   * @param {Object} options   (optional) An object containing any of the following properties:\r\n   *     - `prefixes {string}` \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\r\n   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']\r\n   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\r\n   *\r\n   * See also:\r\n   *\r\n   *     unit\r\n   *\r\n   * @return {Unit} The new unit\r\n   */\r\n  return typed(name, {\r\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\r\n    'Object, Object': function ObjectObject(obj, options) {\r\n      return Unit.createUnit(obj, options);\r\n    },\r\n    // Same as above but without the options.\r\n    Object: function Object(obj) {\r\n      return Unit.createUnit(obj, {});\r\n    },\r\n    // Shortcut method for creating one unit.\r\n    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {\r\n      var obj = {};\r\n      obj[name] = def;\r\n      return Unit.createUnit(obj, options);\r\n    },\r\n    // Same as above but without the options.\r\n    'string, Unit | string | Object': function stringUnitStringObject(name, def) {\r\n      var obj = {};\r\n      obj[name] = def;\r\n      return Unit.createUnit(obj, {});\r\n    },\r\n    // Without a definition, creates a base unit.\r\n    string: function string(name) {\r\n      var obj = {};\r\n      obj[name] = {};\r\n      return Unit.createUnit(obj, {});\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}