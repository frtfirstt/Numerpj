{"ast":null,"code":"/* eslint-disable no-loss-of-precision */\nimport { deepMap } from '../../utils/collection.js';\nimport { sign } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'erf';\nvar dependencies = ['typed'];\nexport var createErf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Compute the erf function of a value using a rational Chebyshev\r\n   * approximations for different intervals of x.\r\n   *\r\n   * This is a translation of W. J. Cody's Fortran implementation from 1987\r\n   * ( https://www.netlib.org/specfun/erf ). See the AMS publication\r\n   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\r\n   * for an explanation of this process.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.erf(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.erf(0.2)    // returns 0.22270258921047847\r\n   *    math.erf(-0.5)   // returns -0.5204998778130465\r\n   *    math.erf(4)      // returns 0.9999999845827421\r\n   *\r\n   * @param {number | Array | Matrix} x   A real number\r\n   * @return {number | Array | Matrix}    The erf of `x`\r\n   */\n\n  return typed('name', {\n    number: function number(x) {\n      var y = Math.abs(x);\n\n      if (y >= MAX_NUM) {\n        return sign(x);\n      }\n\n      if (y <= THRESH) {\n        return sign(x) * erf1(y);\n      }\n\n      if (y <= 4.0) {\n        return sign(x) * (1 - erfc2(y));\n      }\n\n      return sign(x) * (1 - erfc3(y));\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return deepMap(n, this);\n    } // TODO: For complex numbers, use the approximation for the Faddeeva function\n    //  from \"More Efficient Computation of the Complex Error Function\" (AMS)\n\n  });\n  /**\r\n   * Approximates the error function erf() for x <= 0.46875 using this function:\r\n   *               n\r\n   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\r\n   *              j=0\r\n   */\n\n  function erf1(y) {\n    var ysq = y * y;\n    var xnum = P[0][4] * ysq;\n    var xden = ysq;\n    var i;\n\n    for (i = 0; i < 3; i += 1) {\n      xnum = (xnum + P[0][i]) * ysq;\n      xden = (xden + Q[0][i]) * ysq;\n    }\n\n    return y * (xnum + P[0][3]) / (xden + Q[0][3]);\n  }\n  /**\r\n   * Approximates the complement of the error function erfc() for\r\n   * 0.46875 <= x <= 4.0 using this function:\r\n   *                       n\r\n   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\r\n   *                      j=0\r\n   */\n\n\n  function erfc2(y) {\n    var xnum = P[1][8] * y;\n    var xden = y;\n    var i;\n\n    for (i = 0; i < 7; i += 1) {\n      xnum = (xnum + P[1][i]) * y;\n      xden = (xden + Q[1][i]) * y;\n    }\n\n    var result = (xnum + P[1][7]) / (xden + Q[1][7]);\n    var ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n  /**\r\n   * Approximates the complement of the error function erfc() for x > 4.0 using\r\n   * this function:\r\n   *\r\n   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\r\n   *               n\r\n   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\r\n   *              j=0\r\n   */\n\n\n  function erfc3(y) {\n    var ysq = 1 / (y * y);\n    var xnum = P[2][5] * ysq;\n    var xden = ysq;\n    var i;\n\n    for (i = 0; i < 4; i += 1) {\n      xnum = (xnum + P[2][i]) * ysq;\n      xden = (xden + Q[2][i]) * ysq;\n    }\n\n    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);\n    result = (SQRPI - result) / y;\n    ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n});\n/**\r\n * Upper bound for the first approximation interval, 0 <= x <= THRESH\r\n * @constant\r\n */\n\nvar THRESH = 0.46875;\n/**\r\n * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)\r\n * @constant\r\n */\n\nvar SQRPI = 5.6418958354775628695e-1;\n/**\r\n * Coefficients for each term of the numerator sum (p_j) for each approximation\r\n * interval (see W. J. Cody's paper for more details)\r\n * @constant\r\n */\n\nvar P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];\n/**\r\n * Coefficients for each term of the denominator sum (q_j) for each approximation\r\n * interval (see W. J. Cody's paper for more details)\r\n * @constant\r\n */\n\nvar Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];\n/**\r\n * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\r\n * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\r\n * return 1\r\n */\n\nvar MAX_NUM = Math.pow(2, 53);","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/special/erf.js"],"names":["deepMap","sign","factory","name","dependencies","createErf","_ref","typed","number","x","y","Math","abs","MAX_NUM","THRESH","erf1","erfc2","erfc3","ArrayMatrix","n","ysq","xnum","P","xden","i","Q","result","parseInt","del","exp","SQRPI","pow"],"mappings":"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","sourcesContent":["/* eslint-disable no-loss-of-precision */\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { sign } from '../../utils/number.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'erf';\r\nvar dependencies = ['typed'];\r\nexport var createErf = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Compute the erf function of a value using a rational Chebyshev\r\n   * approximations for different intervals of x.\r\n   *\r\n   * This is a translation of W. J. Cody's Fortran implementation from 1987\r\n   * ( https://www.netlib.org/specfun/erf ). See the AMS publication\r\n   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\r\n   * for an explanation of this process.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.erf(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.erf(0.2)    // returns 0.22270258921047847\r\n   *    math.erf(-0.5)   // returns -0.5204998778130465\r\n   *    math.erf(4)      // returns 0.9999999845827421\r\n   *\r\n   * @param {number | Array | Matrix} x   A real number\r\n   * @return {number | Array | Matrix}    The erf of `x`\r\n   */\r\n  return typed('name', {\r\n    number: function number(x) {\r\n      var y = Math.abs(x);\r\n\r\n      if (y >= MAX_NUM) {\r\n        return sign(x);\r\n      }\r\n\r\n      if (y <= THRESH) {\r\n        return sign(x) * erf1(y);\r\n      }\r\n\r\n      if (y <= 4.0) {\r\n        return sign(x) * (1 - erfc2(y));\r\n      }\r\n\r\n      return sign(x) * (1 - erfc3(y));\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(n) {\r\n      return deepMap(n, this);\r\n    } // TODO: For complex numbers, use the approximation for the Faddeeva function\r\n    //  from \"More Efficient Computation of the Complex Error Function\" (AMS)\r\n\r\n  });\r\n  /**\r\n   * Approximates the error function erf() for x <= 0.46875 using this function:\r\n   *               n\r\n   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\r\n   *              j=0\r\n   */\r\n\r\n  function erf1(y) {\r\n    var ysq = y * y;\r\n    var xnum = P[0][4] * ysq;\r\n    var xden = ysq;\r\n    var i;\r\n\r\n    for (i = 0; i < 3; i += 1) {\r\n      xnum = (xnum + P[0][i]) * ysq;\r\n      xden = (xden + Q[0][i]) * ysq;\r\n    }\r\n\r\n    return y * (xnum + P[0][3]) / (xden + Q[0][3]);\r\n  }\r\n  /**\r\n   * Approximates the complement of the error function erfc() for\r\n   * 0.46875 <= x <= 4.0 using this function:\r\n   *                       n\r\n   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\r\n   *                      j=0\r\n   */\r\n\r\n\r\n  function erfc2(y) {\r\n    var xnum = P[1][8] * y;\r\n    var xden = y;\r\n    var i;\r\n\r\n    for (i = 0; i < 7; i += 1) {\r\n      xnum = (xnum + P[1][i]) * y;\r\n      xden = (xden + Q[1][i]) * y;\r\n    }\r\n\r\n    var result = (xnum + P[1][7]) / (xden + Q[1][7]);\r\n    var ysq = parseInt(y * 16) / 16;\r\n    var del = (y - ysq) * (y + ysq);\r\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\r\n  }\r\n  /**\r\n   * Approximates the complement of the error function erfc() for x > 4.0 using\r\n   * this function:\r\n   *\r\n   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\r\n   *               n\r\n   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\r\n   *              j=0\r\n   */\r\n\r\n\r\n  function erfc3(y) {\r\n    var ysq = 1 / (y * y);\r\n    var xnum = P[2][5] * ysq;\r\n    var xden = ysq;\r\n    var i;\r\n\r\n    for (i = 0; i < 4; i += 1) {\r\n      xnum = (xnum + P[2][i]) * ysq;\r\n      xden = (xden + Q[2][i]) * ysq;\r\n    }\r\n\r\n    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);\r\n    result = (SQRPI - result) / y;\r\n    ysq = parseInt(y * 16) / 16;\r\n    var del = (y - ysq) * (y + ysq);\r\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\r\n  }\r\n});\r\n/**\r\n * Upper bound for the first approximation interval, 0 <= x <= THRESH\r\n * @constant\r\n */\r\n\r\nvar THRESH = 0.46875;\r\n/**\r\n * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)\r\n * @constant\r\n */\r\n\r\nvar SQRPI = 5.6418958354775628695e-1;\r\n/**\r\n * Coefficients for each term of the numerator sum (p_j) for each approximation\r\n * interval (see W. J. Cody's paper for more details)\r\n * @constant\r\n */\r\n\r\nvar P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];\r\n/**\r\n * Coefficients for each term of the denominator sum (q_j) for each approximation\r\n * interval (see W. J. Cody's paper for more details)\r\n * @constant\r\n */\r\n\r\nvar Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];\r\n/**\r\n * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\r\n * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\r\n * return 1\r\n */\r\n\r\nvar MAX_NUM = Math.pow(2, 53);"]},"metadata":{},"sourceType":"module"}