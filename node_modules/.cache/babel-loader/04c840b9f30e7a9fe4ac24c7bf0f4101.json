{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'arg';\nvar dependencies = ['typed'];\nexport var createArg = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Compute the argument of a complex value.\r\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.arg(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(2, 2)\r\n   *    math.arg(a) / math.pi          // returns number 0.25\r\n   *\r\n   *    const b = math.complex('2 + 3i')\r\n   *    math.arg(b)                    // returns number 0.982793723247329\r\n   *    math.atan2(3, 2)               // returns number 0.982793723247329\r\n   *\r\n   * See also:\r\n   *\r\n   *    re, im, conj, abs\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Array | Matrix} The argument of x\r\n   */\n\n  return typed(name, {\n    number: function number(x) {\n      return Math.atan2(0, x);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.constructor.atan2(0, x);\n    },\n    Complex: function Complex(x) {\n      return x.arg();\n    },\n    // TODO: implement BigNumber support for function arg\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/complex/arg.js"],"names":["factory","deepMap","name","dependencies","createArg","_ref","typed","number","x","Math","atan2","BigNumber","constructor","Complex","arg","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC1E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,aAAOC,IAAI,CAACC,KAAL,CAAW,CAAX,EAAcF,CAAd,CAAP;AACD,KAHgB;AAIjBG,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBH,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACI,WAAF,CAAcF,KAAd,CAAoB,CAApB,EAAuBF,CAAvB,CAAP;AACD,KANgB;AAOjBK,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBL,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACM,GAAF,EAAP;AACD,KATgB;AAUjB;AACA,sBAAkB,SAASC,WAAT,CAAqBP,CAArB,EAAwB;AACxC,aAAOP,OAAO,CAACO,CAAD,EAAI,IAAJ,CAAd;AACD;AAbgB,GAAP,CAAZ;AAeD,CA/C4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nvar name = 'arg';\r\nvar dependencies = ['typed'];\r\nexport var createArg = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Compute the argument of a complex value.\r\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.arg(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(2, 2)\r\n   *    math.arg(a) / math.pi          // returns number 0.25\r\n   *\r\n   *    const b = math.complex('2 + 3i')\r\n   *    math.arg(b)                    // returns number 0.982793723247329\r\n   *    math.atan2(3, 2)               // returns number 0.982793723247329\r\n   *\r\n   * See also:\r\n   *\r\n   *    re, im, conj, abs\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Array | Matrix} The argument of x\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      return Math.atan2(0, x);\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.constructor.atan2(0, x);\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.arg();\r\n    },\r\n    // TODO: implement BigNumber support for function arg\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}