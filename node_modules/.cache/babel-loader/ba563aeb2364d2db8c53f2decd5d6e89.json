{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { resize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'zeros';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createZeros = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber\n  } = _ref;\n  /**\r\n   * Create a matrix filled with zeros. The created matrix can have one or\r\n   * multiple dimensions.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.zeros(m)\r\n   *    math.zeros(m, format)\r\n   *    math.zeros(m, n)\r\n   *    math.zeros(m, n, format)\r\n   *    math.zeros([m, n])\r\n   *    math.zeros([m, n], format)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.zeros(3)                  // returns [0, 0, 0]\r\n   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]\r\n   *    math.zeros(3, 'dense')         // returns [0, 0, 0]\r\n   *\r\n   *    const A = [[1, 2, 3], [4, 5, 6]]\r\n   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    ones, identity, size, range\r\n   *\r\n   * @param {...number | Array} size    The size of each dimension of the matrix\r\n   * @param {string} [format]           The Matrix storage format\r\n   *\r\n   * @return {Array | Matrix}           A matrix filled with zeros\r\n   */\n\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');\n    },\n    // math.zeros(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _zeros(size, format);\n      } else if (config.matrix === 'Array') {\n        return _zeros(size);\n      } else {\n        return _zeros(size, 'default');\n      }\n    },\n    Array: _zeros,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _zeros(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _zeros(size.valueOf(), format);\n    }\n  });\n  /**\r\n   * Create an Array or Matrix with zeros\r\n   * @param {Array} size\r\n   * @param {string} [format='default']\r\n   * @return {Array | Matrix}\r\n   * @private\r\n   */\n\n  function _zeros(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function zeros must be positive integers');\n      }\n    });\n  }\n}); // TODO: zeros contains almost the same code as ones. Reuse this?","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/matrix/zeros.js"],"names":["isBigNumber","isInteger","resize","factory","name","dependencies","createZeros","_ref","typed","config","matrix","BigNumber","_","_zeros","numberBigNumberString","size","last","length","format","pop","Array","Matrix","storage","valueOf","ArrayMatrixString","hasBigNumbers","_normalize","defaultValue","_validate","m","arr","forEach","value","index","toNumber","Error"],"mappings":"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","sourcesContent":["import { isBigNumber } from '../../utils/is.js';\r\nimport { isInteger } from '../../utils/number.js';\r\nimport { resize } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'zeros';\r\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\r\nexport var createZeros = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    config,\r\n    matrix,\r\n    BigNumber\r\n  } = _ref;\r\n\r\n  /**\r\n   * Create a matrix filled with zeros. The created matrix can have one or\r\n   * multiple dimensions.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.zeros(m)\r\n   *    math.zeros(m, format)\r\n   *    math.zeros(m, n)\r\n   *    math.zeros(m, n, format)\r\n   *    math.zeros([m, n])\r\n   *    math.zeros([m, n], format)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.zeros(3)                  // returns [0, 0, 0]\r\n   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]\r\n   *    math.zeros(3, 'dense')         // returns [0, 0, 0]\r\n   *\r\n   *    const A = [[1, 2, 3], [4, 5, 6]]\r\n   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    ones, identity, size, range\r\n   *\r\n   * @param {...number | Array} size    The size of each dimension of the matrix\r\n   * @param {string} [format]           The Matrix storage format\r\n   *\r\n   * @return {Array | Matrix}           A matrix filled with zeros\r\n   */\r\n  return typed(name, {\r\n    '': function _() {\r\n      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');\r\n    },\r\n    // math.zeros(m, n, p, ..., format)\r\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\r\n    '...number | BigNumber | string': function numberBigNumberString(size) {\r\n      var last = size[size.length - 1];\r\n\r\n      if (typeof last === 'string') {\r\n        var format = size.pop();\r\n        return _zeros(size, format);\r\n      } else if (config.matrix === 'Array') {\r\n        return _zeros(size);\r\n      } else {\r\n        return _zeros(size, 'default');\r\n      }\r\n    },\r\n    Array: _zeros,\r\n    Matrix: function Matrix(size) {\r\n      var format = size.storage();\r\n      return _zeros(size.valueOf(), format);\r\n    },\r\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\r\n      return _zeros(size.valueOf(), format);\r\n    }\r\n  });\r\n  /**\r\n   * Create an Array or Matrix with zeros\r\n   * @param {Array} size\r\n   * @param {string} [format='default']\r\n   * @return {Array | Matrix}\r\n   * @private\r\n   */\r\n\r\n  function _zeros(size, format) {\r\n    var hasBigNumbers = _normalize(size);\r\n\r\n    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;\r\n\r\n    _validate(size);\r\n\r\n    if (format) {\r\n      // return a matrix\r\n      var m = matrix(format);\r\n\r\n      if (size.length > 0) {\r\n        return m.resize(size, defaultValue);\r\n      }\r\n\r\n      return m;\r\n    } else {\r\n      // return an Array\r\n      var arr = [];\r\n\r\n      if (size.length > 0) {\r\n        return resize(arr, size, defaultValue);\r\n      }\r\n\r\n      return arr;\r\n    }\r\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\r\n\r\n\r\n  function _normalize(size) {\r\n    var hasBigNumbers = false;\r\n    size.forEach(function (value, index, arr) {\r\n      if (isBigNumber(value)) {\r\n        hasBigNumbers = true;\r\n        arr[index] = value.toNumber();\r\n      }\r\n    });\r\n    return hasBigNumbers;\r\n  } // validate arguments\r\n\r\n\r\n  function _validate(size) {\r\n    size.forEach(function (value) {\r\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\r\n        throw new Error('Parameters in function zeros must be positive integers');\r\n      }\r\n    });\r\n  }\r\n}); // TODO: zeros contains almost the same code as ones. Reuse this?"]},"metadata":{},"sourceType":"module"}