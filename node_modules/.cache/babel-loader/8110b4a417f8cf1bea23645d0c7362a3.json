{"ast":null,"code":"/**\r\n * Create a range error with the message:\r\n *     'Index out of range (index < min)'\r\n *     'Index out of range (index < max)'\r\n *\r\n * @param {number} index     The actual index\r\n * @param {number} [min=0]   Minimum index (included)\r\n * @param {number} [max]     Maximum index (excluded)\r\n * @extends RangeError\r\n */\nexport function IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.index = index;\n\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  } else {\n    this.min = min;\n    this.max = max;\n  }\n\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  } else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  } else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n\n  this.stack = new Error().stack;\n}\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/error/IndexError.js"],"names":["IndexError","index","min","max","SyntaxError","arguments","length","undefined","message","stack","Error","prototype","RangeError","constructor","name","isIndexError"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqC;AAC1C,MAAI,EAAE,gBAAgBH,UAAlB,CAAJ,EAAmC;AACjC,UAAM,IAAII,WAAJ,CAAgB,kDAAhB,CAAN;AACD;;AAED,OAAKH,KAAL,GAAaA,KAAb;;AAEA,MAAII,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,SAAKJ,GAAL,GAAW,CAAX;AACA,SAAKC,GAAL,GAAWD,GAAX;AACD,GAHD,MAGO;AACL,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAWA,GAAX;AACD;;AAED,MAAI,KAAKD,GAAL,KAAaK,SAAb,IAA0B,KAAKN,KAAL,GAAa,KAAKC,GAAhD,EAAqD;AACnD,SAAKM,OAAL,GAAe,yBAAyB,KAAKP,KAA9B,GAAsC,KAAtC,GAA8C,KAAKC,GAAnD,GAAyD,GAAxE;AACD,GAFD,MAEO,IAAI,KAAKC,GAAL,KAAaI,SAAb,IAA0B,KAAKN,KAAL,IAAc,KAAKE,GAAjD,EAAsD;AAC3D,SAAKK,OAAL,GAAe,yBAAyB,KAAKP,KAA9B,GAAsC,KAAtC,IAA+C,KAAKE,GAAL,GAAW,CAA1D,IAA+D,GAA9E;AACD,GAFM,MAEA;AACL,SAAKK,OAAL,GAAe,yBAAyB,KAAKP,KAA9B,GAAsC,GAArD;AACD;;AAED,OAAKQ,KAAL,GAAa,IAAIC,KAAJ,GAAYD,KAAzB;AACD;AACDT,UAAU,CAACW,SAAX,GAAuB,IAAIC,UAAJ,EAAvB;AACAZ,UAAU,CAACW,SAAX,CAAqBE,WAArB,GAAmCD,UAAnC;AACAZ,UAAU,CAACW,SAAX,CAAqBG,IAArB,GAA4B,YAA5B;AACAd,UAAU,CAACW,SAAX,CAAqBI,YAArB,GAAoC,IAApC","sourcesContent":["/**\r\n * Create a range error with the message:\r\n *     'Index out of range (index < min)'\r\n *     'Index out of range (index < max)'\r\n *\r\n * @param {number} index     The actual index\r\n * @param {number} [min=0]   Minimum index (included)\r\n * @param {number} [max]     Maximum index (excluded)\r\n * @extends RangeError\r\n */\r\nexport function IndexError(index, min, max) {\r\n  if (!(this instanceof IndexError)) {\r\n    throw new SyntaxError('Constructor must be called with the new operator');\r\n  }\r\n\r\n  this.index = index;\r\n\r\n  if (arguments.length < 3) {\r\n    this.min = 0;\r\n    this.max = min;\r\n  } else {\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  if (this.min !== undefined && this.index < this.min) {\r\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\r\n  } else if (this.max !== undefined && this.index >= this.max) {\r\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\r\n  } else {\r\n    this.message = 'Index out of range (' + this.index + ')';\r\n  }\r\n\r\n  this.stack = new Error().stack;\r\n}\r\nIndexError.prototype = new RangeError();\r\nIndexError.prototype.constructor = RangeError;\r\nIndexError.prototype.name = 'IndexError';\r\nIndexError.prototype.isIndexError = true;"]},"metadata":{},"sourceType":"module"}