{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'hasNumericValue';\nvar dependencies = ['typed', 'isNumeric'];\nexport var createHasNumericValue = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isNumeric\n  } = _ref;\n  /**\r\n   * Test whether a value is an numeric value.\r\n   *\r\n   * In case of a string, true is returned if the string contains a numeric value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.hasNumericValue(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.hasNumericValue(2)                     // returns true\r\n   *    math.hasNumericValue('2')                   // returns true\r\n   *    math.isNumeric('2')                         // returns false\r\n   *    math.hasNumericValue(0)                     // returns true\r\n   *    math.hasNumericValue(math.bignumber(500))   // returns true\r\n   *    math.hasNumericValue(math.fraction(4))      // returns true\r\n   *    math.hasNumericValue(math.complex('2-4i')   // returns false\r\n   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isZero, isPositive, isNegative, isInteger, isNumeric\r\n   *\r\n   * @param {*} x       Value to be tested\r\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\r\n   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.\r\n   *                    Throws an error in case of unknown types.\r\n   */\n\n  return typed(name, {\n    string: function string(x) {\n      return x.trim().length > 0 && !isNaN(Number(x));\n    },\n    any: function any(x) {\n      return isNumeric(x);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/utils/hasNumericValue.js"],"names":["factory","name","dependencies","createHasNumericValue","_ref","typed","isNumeric","string","x","trim","length","isNaN","Number","any"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,iBAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,qBAAqB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AACtF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBM,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,aAAOA,CAAC,CAACC,IAAF,GAASC,MAAT,GAAkB,CAAlB,IAAuB,CAACC,KAAK,CAACC,MAAM,CAACJ,CAAD,CAAP,CAApC;AACD,KAHgB;AAIjBK,IAAAA,GAAG,EAAE,SAASA,GAAT,CAAaL,CAAb,EAAgB;AACnB,aAAOF,SAAS,CAACE,CAAD,CAAhB;AACD;AANgB,GAAP,CAAZ;AAQD,CA3CwD,CAAlD","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'hasNumericValue';\r\nvar dependencies = ['typed', 'isNumeric'];\r\nexport var createHasNumericValue = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    isNumeric\r\n  } = _ref;\r\n\r\n  /**\r\n   * Test whether a value is an numeric value.\r\n   *\r\n   * In case of a string, true is returned if the string contains a numeric value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.hasNumericValue(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.hasNumericValue(2)                     // returns true\r\n   *    math.hasNumericValue('2')                   // returns true\r\n   *    math.isNumeric('2')                         // returns false\r\n   *    math.hasNumericValue(0)                     // returns true\r\n   *    math.hasNumericValue(math.bignumber(500))   // returns true\r\n   *    math.hasNumericValue(math.fraction(4))      // returns true\r\n   *    math.hasNumericValue(math.complex('2-4i')   // returns false\r\n   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isZero, isPositive, isNegative, isInteger, isNumeric\r\n   *\r\n   * @param {*} x       Value to be tested\r\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\r\n   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.\r\n   *                    Throws an error in case of unknown types.\r\n   */\r\n  return typed(name, {\r\n    string: function string(x) {\r\n      return x.trim().length > 0 && !isNaN(Number(x));\r\n    },\r\n    any: function any(x) {\r\n      return isNumeric(x);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}