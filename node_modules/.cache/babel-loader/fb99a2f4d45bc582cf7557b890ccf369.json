{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { resize } from '../../utils/array.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'identity';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];\nexport var createIdentity = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    BigNumber,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\r\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\r\n   * The matrix has ones on the diagonal and zeros elsewhere.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.identity(n)\r\n   *    math.identity(n, format)\r\n   *    math.identity(m, n)\r\n   *    math.identity(m, n, format)\r\n   *    math.identity([m, n])\r\n   *    math.identity([m, n], format)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\r\n   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]\r\n   *\r\n   *    const A = [[1, 2, 3], [4, 5, 6]]\r\n   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    diag, ones, zeros, size, range\r\n   *\r\n   * @param {...number | Matrix | Array} size   The size for the matrix\r\n   * @param {string} [format]                   The Matrix storage format\r\n   *\r\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\r\n   */\n\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber': function numberBigNumber(rows) {\n      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, string': function numberBigNumberString(rows, format) {\n      return _identity(rows, rows, format);\n    },\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {\n      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {\n      return _identity(rows, cols, format);\n    },\n    Array: function Array(size) {\n      return _identityVector(size);\n    },\n    'Array, string': function ArrayString(size, format) {\n      return _identityVector(size, format);\n    },\n    Matrix: function Matrix(size) {\n      return _identityVector(size.valueOf(), size.storage());\n    },\n    'Matrix, string': function MatrixString(size, format) {\n      return _identityVector(size.valueOf(), format);\n    }\n  });\n\n  function _identityVector(size, format) {\n    switch (size.length) {\n      case 0:\n        return format ? matrix(format) : [];\n\n      case 1:\n        return _identity(size[0], size[0], format);\n\n      case 2:\n        return _identity(size[0], size[1], format);\n\n      default:\n        throw new Error('Vector containing two values expected');\n    }\n  }\n  /**\r\n   * Create an identity matrix\r\n   * @param {number | BigNumber} rows\r\n   * @param {number | BigNumber} cols\r\n   * @param {string} [format]\r\n   * @returns {Matrix}\r\n   * @private\r\n   */\n\n\n  function _identity(rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;\n    if (isBigNumber(rows)) rows = rows.toNumber();\n    if (isBigNumber(cols)) cols = cols.toNumber();\n\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    var one = Big ? new BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols]; // check we need to return a matrix\n\n    if (format) {\n      // create diagonal matrix (use optimized implementation for storage format)\n      if (format === 'sparse') {\n        return SparseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n\n      if (format === 'dense') {\n        return DenseMatrix.diagonal(size, one, 0, defaultValue);\n      }\n\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    } // create and resize array\n\n\n    var res = resize([], size, defaultValue); // fill in ones on the diagonal\n\n    var minimum = rows < cols ? rows : cols; // fill diagonal\n\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n\n    return res;\n  }\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/matrix/identity.js"],"names":["isBigNumber","resize","isInteger","factory","name","dependencies","createIdentity","_ref","typed","config","matrix","BigNumber","DenseMatrix","SparseMatrix","_","string","format","numberBigNumber","rows","_identity","undefined","numberBigNumberString","numberBigNumberNumberBigNumber","cols","numberBigNumberNumberBigNumberString","Array","size","_identityVector","ArrayString","Matrix","valueOf","storage","MatrixString","length","Error","Big","toNumber","one","defaultValue","diagonal","TypeError","concat","res","minimum","d"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,UAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,EAA8B,WAA9B,EAA2C,aAA3C,EAA0D,cAA1D,CAAnB;AACA,OAAO,IAAIC,cAAc,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC/E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,MAHE;AAIFC,IAAAA,SAJE;AAKFC,IAAAA,WALE;AAMFC,IAAAA;AANE,MAOAN,IAPJ;AASA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,QAAI,SAASU,CAAT,GAAa;AACf,aAAOL,MAAM,CAACC,MAAP,KAAkB,QAAlB,GAA6BA,MAAM,CAAC,EAAD,CAAnC,GAA0C,EAAjD;AACD,KAHgB;AAIjBK,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,MAAhB,EAAwB;AAC9B,aAAON,MAAM,CAACM,MAAD,CAAb;AACD,KANgB;AAOjB,0BAAsB,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AACnD,aAAOC,SAAS,CAACD,IAAD,EAAOA,IAAP,EAAaT,MAAM,CAACC,MAAP,KAAkB,QAAlB,GAA6B,OAA7B,GAAuCU,SAApD,CAAhB;AACD,KATgB;AAUjB,kCAA8B,SAASC,qBAAT,CAA+BH,IAA/B,EAAqCF,MAArC,EAA6C;AACzE,aAAOG,SAAS,CAACD,IAAD,EAAOA,IAAP,EAAaF,MAAb,CAAhB;AACD,KAZgB;AAajB,8CAA0C,SAASM,8BAAT,CAAwCJ,IAAxC,EAA8CK,IAA9C,EAAoD;AAC5F,aAAOJ,SAAS,CAACD,IAAD,EAAOK,IAAP,EAAad,MAAM,CAACC,MAAP,KAAkB,QAAlB,GAA6B,OAA7B,GAAuCU,SAApD,CAAhB;AACD,KAfgB;AAgBjB,sDAAkD,SAASI,oCAAT,CAA8CN,IAA9C,EAAoDK,IAApD,EAA0DP,MAA1D,EAAkE;AAClH,aAAOG,SAAS,CAACD,IAAD,EAAOK,IAAP,EAAaP,MAAb,CAAhB;AACD,KAlBgB;AAmBjBS,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;AAC1B,aAAOC,eAAe,CAACD,IAAD,CAAtB;AACD,KArBgB;AAsBjB,qBAAiB,SAASE,WAAT,CAAqBF,IAArB,EAA2BV,MAA3B,EAAmC;AAClD,aAAOW,eAAe,CAACD,IAAD,EAAOV,MAAP,CAAtB;AACD,KAxBgB;AAyBjBa,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBH,IAAhB,EAAsB;AAC5B,aAAOC,eAAe,CAACD,IAAI,CAACI,OAAL,EAAD,EAAiBJ,IAAI,CAACK,OAAL,EAAjB,CAAtB;AACD,KA3BgB;AA4BjB,sBAAkB,SAASC,YAAT,CAAsBN,IAAtB,EAA4BV,MAA5B,EAAoC;AACpD,aAAOW,eAAe,CAACD,IAAI,CAACI,OAAL,EAAD,EAAiBd,MAAjB,CAAtB;AACD;AA9BgB,GAAP,CAAZ;;AAiCA,WAASW,eAAT,CAAyBD,IAAzB,EAA+BV,MAA/B,EAAuC;AACrC,YAAQU,IAAI,CAACO,MAAb;AACE,WAAK,CAAL;AACE,eAAOjB,MAAM,GAAGN,MAAM,CAACM,MAAD,CAAT,GAAoB,EAAjC;;AAEF,WAAK,CAAL;AACE,eAAOG,SAAS,CAACO,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,EAAmBV,MAAnB,CAAhB;;AAEF,WAAK,CAAL;AACE,eAAOG,SAAS,CAACO,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,EAAmBV,MAAnB,CAAhB;;AAEF;AACE,cAAM,IAAIkB,KAAJ,CAAU,uCAAV,CAAN;AAXJ;AAaD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASf,SAAT,CAAmBD,IAAnB,EAAyBK,IAAzB,EAA+BP,MAA/B,EAAuC;AACrC;AACA,QAAImB,GAAG,GAAGnC,WAAW,CAACkB,IAAD,CAAX,IAAqBlB,WAAW,CAACuB,IAAD,CAAhC,GAAyCZ,SAAzC,GAAqD,IAA/D;AACA,QAAIX,WAAW,CAACkB,IAAD,CAAf,EAAuBA,IAAI,GAAGA,IAAI,CAACkB,QAAL,EAAP;AACvB,QAAIpC,WAAW,CAACuB,IAAD,CAAf,EAAuBA,IAAI,GAAGA,IAAI,CAACa,QAAL,EAAP;;AAEvB,QAAI,CAAClC,SAAS,CAACgB,IAAD,CAAV,IAAoBA,IAAI,GAAG,CAA/B,EAAkC;AAChC,YAAM,IAAIgB,KAAJ,CAAU,2DAAV,CAAN;AACD;;AAED,QAAI,CAAChC,SAAS,CAACqB,IAAD,CAAV,IAAoBA,IAAI,GAAG,CAA/B,EAAkC;AAChC,YAAM,IAAIW,KAAJ,CAAU,2DAAV,CAAN;AACD;;AAED,QAAIG,GAAG,GAAGF,GAAG,GAAG,IAAIxB,SAAJ,CAAc,CAAd,CAAH,GAAsB,CAAnC;AACA,QAAI2B,YAAY,GAAGH,GAAG,GAAG,IAAIA,GAAJ,CAAQ,CAAR,CAAH,GAAgB,CAAtC;AACA,QAAIT,IAAI,GAAG,CAACR,IAAD,EAAOK,IAAP,CAAX,CAhBqC,CAgBZ;;AAEzB,QAAIP,MAAJ,EAAY;AACV;AACA,UAAIA,MAAM,KAAK,QAAf,EAAyB;AACvB,eAAOH,YAAY,CAAC0B,QAAb,CAAsBb,IAAtB,EAA4BW,GAA5B,EAAiC,CAAjC,EAAoCC,YAApC,CAAP;AACD;;AAED,UAAItB,MAAM,KAAK,OAAf,EAAwB;AACtB,eAAOJ,WAAW,CAAC2B,QAAZ,CAAqBb,IAArB,EAA2BW,GAA3B,EAAgC,CAAhC,EAAmCC,YAAnC,CAAP;AACD;;AAED,YAAM,IAAIE,SAAJ,CAAc,yBAAyBC,MAAzB,CAAgCzB,MAAhC,EAAwC,IAAxC,CAAd,CAAN;AACD,KA7BoC,CA6BnC;;;AAGF,QAAI0B,GAAG,GAAGzC,MAAM,CAAC,EAAD,EAAKyB,IAAL,EAAWY,YAAX,CAAhB,CAhCqC,CAgCK;;AAE1C,QAAIK,OAAO,GAAGzB,IAAI,GAAGK,IAAP,GAAcL,IAAd,GAAqBK,IAAnC,CAlCqC,CAkCI;;AAEzC,SAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAApB,EAA6BC,CAAC,EAA9B,EAAkC;AAChCF,MAAAA,GAAG,CAACE,CAAD,CAAH,CAAOA,CAAP,IAAYP,GAAZ;AACD;;AAED,WAAOK,GAAP;AACD;AACF,CA5IiD,CAA3C","sourcesContent":["import { isBigNumber } from '../../utils/is.js';\r\nimport { resize } from '../../utils/array.js';\r\nimport { isInteger } from '../../utils/number.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'identity';\r\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];\r\nexport var createIdentity = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    config,\r\n    matrix,\r\n    BigNumber,\r\n    DenseMatrix,\r\n    SparseMatrix\r\n  } = _ref;\r\n\r\n  /**\r\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\r\n   * The matrix has ones on the diagonal and zeros elsewhere.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.identity(n)\r\n   *    math.identity(n, format)\r\n   *    math.identity(m, n)\r\n   *    math.identity(m, n, format)\r\n   *    math.identity([m, n])\r\n   *    math.identity([m, n], format)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\r\n   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]\r\n   *\r\n   *    const A = [[1, 2, 3], [4, 5, 6]]\r\n   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    diag, ones, zeros, size, range\r\n   *\r\n   * @param {...number | Matrix | Array} size   The size for the matrix\r\n   * @param {string} [format]                   The Matrix storage format\r\n   *\r\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\r\n   */\r\n  return typed(name, {\r\n    '': function _() {\r\n      return config.matrix === 'Matrix' ? matrix([]) : [];\r\n    },\r\n    string: function string(format) {\r\n      return matrix(format);\r\n    },\r\n    'number | BigNumber': function numberBigNumber(rows) {\r\n      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);\r\n    },\r\n    'number | BigNumber, string': function numberBigNumberString(rows, format) {\r\n      return _identity(rows, rows, format);\r\n    },\r\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {\r\n      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);\r\n    },\r\n    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {\r\n      return _identity(rows, cols, format);\r\n    },\r\n    Array: function Array(size) {\r\n      return _identityVector(size);\r\n    },\r\n    'Array, string': function ArrayString(size, format) {\r\n      return _identityVector(size, format);\r\n    },\r\n    Matrix: function Matrix(size) {\r\n      return _identityVector(size.valueOf(), size.storage());\r\n    },\r\n    'Matrix, string': function MatrixString(size, format) {\r\n      return _identityVector(size.valueOf(), format);\r\n    }\r\n  });\r\n\r\n  function _identityVector(size, format) {\r\n    switch (size.length) {\r\n      case 0:\r\n        return format ? matrix(format) : [];\r\n\r\n      case 1:\r\n        return _identity(size[0], size[0], format);\r\n\r\n      case 2:\r\n        return _identity(size[0], size[1], format);\r\n\r\n      default:\r\n        throw new Error('Vector containing two values expected');\r\n    }\r\n  }\r\n  /**\r\n   * Create an identity matrix\r\n   * @param {number | BigNumber} rows\r\n   * @param {number | BigNumber} cols\r\n   * @param {string} [format]\r\n   * @returns {Matrix}\r\n   * @private\r\n   */\r\n\r\n\r\n  function _identity(rows, cols, format) {\r\n    // BigNumber constructor with the right precision\r\n    var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;\r\n    if (isBigNumber(rows)) rows = rows.toNumber();\r\n    if (isBigNumber(cols)) cols = cols.toNumber();\r\n\r\n    if (!isInteger(rows) || rows < 1) {\r\n      throw new Error('Parameters in function identity must be positive integers');\r\n    }\r\n\r\n    if (!isInteger(cols) || cols < 1) {\r\n      throw new Error('Parameters in function identity must be positive integers');\r\n    }\r\n\r\n    var one = Big ? new BigNumber(1) : 1;\r\n    var defaultValue = Big ? new Big(0) : 0;\r\n    var size = [rows, cols]; // check we need to return a matrix\r\n\r\n    if (format) {\r\n      // create diagonal matrix (use optimized implementation for storage format)\r\n      if (format === 'sparse') {\r\n        return SparseMatrix.diagonal(size, one, 0, defaultValue);\r\n      }\r\n\r\n      if (format === 'dense') {\r\n        return DenseMatrix.diagonal(size, one, 0, defaultValue);\r\n      }\r\n\r\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\r\n    } // create and resize array\r\n\r\n\r\n    var res = resize([], size, defaultValue); // fill in ones on the diagonal\r\n\r\n    var minimum = rows < cols ? rows : cols; // fill diagonal\r\n\r\n    for (var d = 0; d < minimum; d++) {\r\n      res[d][d] = one;\r\n    }\r\n\r\n    return res;\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}