{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { typeOf as _typeOf } from '../../utils/is.js';\nvar name = 'typeOf';\nvar dependencies = ['typed'];\nexport var createTypeOf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Determine the type of a variable.\r\n   *\r\n   * Function `typeOf` recognizes the following types of objects:\r\n   *\r\n   * Object                 | Returns       | Example\r\n   * ---------------------- | ------------- | ------------------------------------------\r\n   * null                   | `'null'`      | `math.typeOf(null)`\r\n   * number                 | `'number'`    | `math.typeOf(3.5)`\r\n   * boolean                | `'boolean'`   | `math.typeOf(true)`\r\n   * string                 | `'string'`    | `math.typeOf('hello world')`\r\n   * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`\r\n   * Date                   | `'Date'`      | `math.typeOf(new Date())`\r\n   * Function               | `'Function'`  | `math.typeOf(function () {})`\r\n   * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`\r\n   * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`\r\n   * undefined              | `'undefined'` | `math.typeOf(undefined)`\r\n   * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`\r\n   * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`\r\n   * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`\r\n   * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`\r\n   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`\r\n   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`\r\n   * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`\r\n   * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`\r\n   * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`\r\n   * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\\nb=3'))`\r\n   * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`\r\n   * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`\r\n   * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`\r\n   * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`\r\n   * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`\r\n   * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`\r\n   * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`\r\n   * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`\r\n   * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`\r\n   * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`\r\n   * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`\r\n   * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`\r\n   * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`\r\n   * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.typeOf(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.typeOf(3.5)                     // returns 'number'\r\n   *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'\r\n   *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'\r\n   *    math.typeOf('hello world')           // returns 'string'\r\n   *\r\n   * @param {*} x     The variable for which to test the type.\r\n   * @return {string} Returns the name of the type. Primitive types are lower case,\r\n   *                  non-primitive types are upper-camel-case.\r\n   *                  For example 'number', 'string', 'Array', 'Date'.\r\n   */\n\n  return typed(name, {\n    any: _typeOf\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/utils/typeOf.js"],"names":["factory","typeOf","_typeOf","name","dependencies","createTypeOf","_ref","typed","any"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,MAAM,IAAIC,OAAnB,QAAkC,mBAAlC;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC7E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,GAAG,EAAEN;AADY,GAAP,CAAZ;AAGD,CAlE+C,CAAzC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { typeOf as _typeOf } from '../../utils/is.js';\r\nvar name = 'typeOf';\r\nvar dependencies = ['typed'];\r\nexport var createTypeOf = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Determine the type of a variable.\r\n   *\r\n   * Function `typeOf` recognizes the following types of objects:\r\n   *\r\n   * Object                 | Returns       | Example\r\n   * ---------------------- | ------------- | ------------------------------------------\r\n   * null                   | `'null'`      | `math.typeOf(null)`\r\n   * number                 | `'number'`    | `math.typeOf(3.5)`\r\n   * boolean                | `'boolean'`   | `math.typeOf(true)`\r\n   * string                 | `'string'`    | `math.typeOf('hello world')`\r\n   * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`\r\n   * Date                   | `'Date'`      | `math.typeOf(new Date())`\r\n   * Function               | `'Function'`  | `math.typeOf(function () {})`\r\n   * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`\r\n   * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`\r\n   * undefined              | `'undefined'` | `math.typeOf(undefined)`\r\n   * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`\r\n   * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`\r\n   * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`\r\n   * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`\r\n   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`\r\n   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`\r\n   * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`\r\n   * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`\r\n   * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`\r\n   * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\\nb=3'))`\r\n   * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`\r\n   * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`\r\n   * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`\r\n   * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`\r\n   * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`\r\n   * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`\r\n   * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`\r\n   * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`\r\n   * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`\r\n   * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`\r\n   * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`\r\n   * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`\r\n   * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`\r\n   * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.typeOf(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.typeOf(3.5)                     // returns 'number'\r\n   *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'\r\n   *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'\r\n   *    math.typeOf('hello world')           // returns 'string'\r\n   *\r\n   * @param {*} x     The variable for which to test the type.\r\n   * @return {string} Returns the name of the type. Primitive types are lower case,\r\n   *                  non-primitive types are upper-camel-case.\r\n   *                  For example 'number', 'string', 'Array', 'Date'.\r\n   */\r\n  return typed(name, {\r\n    any: _typeOf\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}