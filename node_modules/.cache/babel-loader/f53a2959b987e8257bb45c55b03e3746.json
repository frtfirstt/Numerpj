{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'tan';\nvar dependencies = ['typed'];\nexport var createTan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.tan(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.tan(0.5)                    // returns number 0.5463024898437905\r\n   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905\r\n   *    math.tan(math.pi / 4)            // returns number 1\r\n   *    math.tan(math.unit(45, 'deg'))   // returns number 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    atan, sin, cos\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x\r\n   */\n\n  return typed(name, {\n    number: Math.tan,\n    Complex: function Complex(x) {\n      return x.tan();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.tan();\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function tan is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since tan(0) = 0\n      return deepMap(x, this, true);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/trigonometry/tan.js"],"names":["factory","deepMap","name","dependencies","createTan","_ref","typed","number","Math","tan","Complex","x","BigNumber","Unit","hasBase","constructor","BASE_UNITS","ANGLE","TypeError","value","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC1E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEC,IAAI,CAACC,GADI;AAEjBC,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACF,GAAF,EAAP;AACD,KAJgB;AAKjBG,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBD,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACF,GAAF,EAAP;AACD,KAPgB;AAQjBI,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcF,CAAd,EAAiB;AACrB,UAAI,CAACA,CAAC,CAACG,OAAF,CAAUH,CAAC,CAACI,WAAF,CAAcC,UAAd,CAAyBC,KAAnC,CAAL,EAAgD;AAC9C,cAAM,IAAIC,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,aAAO,KAAKP,CAAC,CAACQ,KAAP,CAAP;AACD,KAdgB;AAejB,sBAAkB,SAASC,WAAT,CAAqBT,CAArB,EAAwB;AACxC;AACA,aAAOV,OAAO,CAACU,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;AACD;AAlBgB,GAAP,CAAZ;AAoBD,CAhD4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nvar name = 'tan';\r\nvar dependencies = ['typed'];\r\nexport var createTan = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.tan(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.tan(0.5)                    // returns number 0.5463024898437905\r\n   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905\r\n   *    math.tan(math.pi / 4)            // returns number 1\r\n   *    math.tan(math.unit(45, 'deg'))   // returns number 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    atan, sin, cos\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x\r\n   */\r\n  return typed(name, {\r\n    number: Math.tan,\r\n    Complex: function Complex(x) {\r\n      return x.tan();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.tan();\r\n    },\r\n    Unit: function Unit(x) {\r\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError('Unit in function tan is no angle');\r\n      }\r\n\r\n      return this(x.value);\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      // deep map collection, skip zeros since tan(0) = 0\r\n      return deepMap(x, this, true);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}