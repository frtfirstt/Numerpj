{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { atanhNumber } from '../../plain/number/index.js';\nvar name = 'atanh';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAtanh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\r\n   * Calculate the hyperbolic arctangent of a value,\r\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.atanh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.atanh(0.5)       // returns 0.5493061443340549\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, asinh\r\n   *\r\n   * @param {number | Complex | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x\r\n   */\n\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        return atanhNumber(x);\n      }\n\n      return new Complex(x, 0).atanh();\n    },\n    Complex: function Complex(x) {\n      return x.atanh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atanh();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since atanh(0) = 0\n      return deepMap(x, this, true);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/trigonometry/atanh.js"],"names":["factory","deepMap","atanhNumber","name","dependencies","createAtanh","_ref","typed","config","Complex","number","x","predictable","atanh","BigNumber","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC5E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBO,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,UAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,CAAC,CAAhB,IAAqBH,MAAM,CAACI,WAAhC,EAA6C;AAC3C,eAAOV,WAAW,CAACS,CAAD,CAAlB;AACD;;AAED,aAAO,IAAIF,OAAJ,CAAYE,CAAZ,EAAe,CAAf,EAAkBE,KAAlB,EAAP;AACD,KAPgB;AAQjBJ,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBE,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACE,KAAF,EAAP;AACD,KAVgB;AAWjBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBH,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACE,KAAF,EAAP;AACD,KAbgB;AAcjB,sBAAkB,SAASE,WAAT,CAAqBJ,CAArB,EAAwB;AACxC;AACA,aAAOV,OAAO,CAACU,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;AACD;AAjBgB,GAAP,CAAZ;AAmBD,CA/C8C,CAAxC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { atanhNumber } from '../../plain/number/index.js';\r\nvar name = 'atanh';\r\nvar dependencies = ['typed', 'config', 'Complex'];\r\nexport var createAtanh = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    config,\r\n    Complex\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the hyperbolic arctangent of a value,\r\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.atanh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.atanh(0.5)       // returns 0.5493061443340549\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, asinh\r\n   *\r\n   * @param {number | Complex | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x <= 1 && x >= -1 || config.predictable) {\r\n        return atanhNumber(x);\r\n      }\r\n\r\n      return new Complex(x, 0).atanh();\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.atanh();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.atanh();\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      // deep map collection, skip zeros since atanh(0) = 0\r\n      return deepMap(x, this, true);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}