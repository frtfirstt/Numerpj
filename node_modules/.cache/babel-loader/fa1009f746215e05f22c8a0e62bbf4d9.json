{"ast":null,"code":"import { isInteger } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function bitAndNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  return x & y;\n}\nbitAndNumber.signature = n2;\nexport function bitNotNumber(x) {\n  if (!isInteger(x)) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  return ~x;\n}\nbitNotNumber.signature = n1;\nexport function bitOrNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  return x | y;\n}\nbitOrNumber.signature = n2;\nexport function bitXorNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  return x ^ y;\n}\nbitXorNumber.signature = n2;\nexport function leftShiftNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  return x << y;\n}\nleftShiftNumber.signature = n2;\nexport function rightArithShiftNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  return x >> y;\n}\nrightArithShiftNumber.signature = n2;\nexport function rightLogShiftNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function rightLogShift');\n  }\n\n  return x >>> y;\n}\nrightLogShiftNumber.signature = n2;","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/plain/number/bitwise.js"],"names":["isInteger","n1","n2","bitAndNumber","x","y","Error","signature","bitNotNumber","bitOrNumber","bitXorNumber","leftShiftNumber","rightArithShiftNumber","rightLogShiftNumber"],"mappings":"AAAA,SAASA,SAAT,QAA0B,uBAA1B;AACA,IAAIC,EAAE,GAAG,QAAT;AACA,IAAIC,EAAE,GAAG,gBAAT;AACA,OAAO,SAASC,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AACjC,MAAI,CAACL,SAAS,CAACI,CAAD,CAAV,IAAiB,CAACJ,SAAS,CAACK,CAAD,CAA/B,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,SAAOF,CAAC,GAAGC,CAAX;AACD;AACDF,YAAY,CAACI,SAAb,GAAyBL,EAAzB;AACA,OAAO,SAASM,YAAT,CAAsBJ,CAAtB,EAAyB;AAC9B,MAAI,CAACJ,SAAS,CAACI,CAAD,CAAd,EAAmB;AACjB,UAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,SAAO,CAACF,CAAR;AACD;AACDI,YAAY,CAACD,SAAb,GAAyBN,EAAzB;AACA,OAAO,SAASQ,WAAT,CAAqBL,CAArB,EAAwBC,CAAxB,EAA2B;AAChC,MAAI,CAACL,SAAS,CAACI,CAAD,CAAV,IAAiB,CAACJ,SAAS,CAACK,CAAD,CAA/B,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,SAAOF,CAAC,GAAGC,CAAX;AACD;AACDI,WAAW,CAACF,SAAZ,GAAwBL,EAAxB;AACA,OAAO,SAASQ,YAAT,CAAsBN,CAAtB,EAAyBC,CAAzB,EAA4B;AACjC,MAAI,CAACL,SAAS,CAACI,CAAD,CAAV,IAAiB,CAACJ,SAAS,CAACK,CAAD,CAA/B,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,SAAOF,CAAC,GAAGC,CAAX;AACD;AACDK,YAAY,CAACH,SAAb,GAAyBL,EAAzB;AACA,OAAO,SAASS,eAAT,CAAyBP,CAAzB,EAA4BC,CAA5B,EAA+B;AACpC,MAAI,CAACL,SAAS,CAACI,CAAD,CAAV,IAAiB,CAACJ,SAAS,CAACK,CAAD,CAA/B,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,SAAOF,CAAC,IAAIC,CAAZ;AACD;AACDM,eAAe,CAACJ,SAAhB,GAA4BL,EAA5B;AACA,OAAO,SAASU,qBAAT,CAA+BR,CAA/B,EAAkCC,CAAlC,EAAqC;AAC1C,MAAI,CAACL,SAAS,CAACI,CAAD,CAAV,IAAiB,CAACJ,SAAS,CAACK,CAAD,CAA/B,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,SAAOF,CAAC,IAAIC,CAAZ;AACD;AACDO,qBAAqB,CAACL,SAAtB,GAAkCL,EAAlC;AACA,OAAO,SAASW,mBAAT,CAA6BT,CAA7B,EAAgCC,CAAhC,EAAmC;AACxC,MAAI,CAACL,SAAS,CAACI,CAAD,CAAV,IAAiB,CAACJ,SAAS,CAACK,CAAD,CAA/B,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,SAAOF,CAAC,KAAKC,CAAb;AACD;AACDQ,mBAAmB,CAACN,SAApB,GAAgCL,EAAhC","sourcesContent":["import { isInteger } from '../../utils/number.js';\r\nvar n1 = 'number';\r\nvar n2 = 'number, number';\r\nexport function bitAndNumber(x, y) {\r\n  if (!isInteger(x) || !isInteger(y)) {\r\n    throw new Error('Integers expected in function bitAnd');\r\n  }\r\n\r\n  return x & y;\r\n}\r\nbitAndNumber.signature = n2;\r\nexport function bitNotNumber(x) {\r\n  if (!isInteger(x)) {\r\n    throw new Error('Integer expected in function bitNot');\r\n  }\r\n\r\n  return ~x;\r\n}\r\nbitNotNumber.signature = n1;\r\nexport function bitOrNumber(x, y) {\r\n  if (!isInteger(x) || !isInteger(y)) {\r\n    throw new Error('Integers expected in function bitOr');\r\n  }\r\n\r\n  return x | y;\r\n}\r\nbitOrNumber.signature = n2;\r\nexport function bitXorNumber(x, y) {\r\n  if (!isInteger(x) || !isInteger(y)) {\r\n    throw new Error('Integers expected in function bitXor');\r\n  }\r\n\r\n  return x ^ y;\r\n}\r\nbitXorNumber.signature = n2;\r\nexport function leftShiftNumber(x, y) {\r\n  if (!isInteger(x) || !isInteger(y)) {\r\n    throw new Error('Integers expected in function leftShift');\r\n  }\r\n\r\n  return x << y;\r\n}\r\nleftShiftNumber.signature = n2;\r\nexport function rightArithShiftNumber(x, y) {\r\n  if (!isInteger(x) || !isInteger(y)) {\r\n    throw new Error('Integers expected in function rightArithShift');\r\n  }\r\n\r\n  return x >> y;\r\n}\r\nrightArithShiftNumber.signature = n2;\r\nexport function rightLogShiftNumber(x, y) {\r\n  if (!isInteger(x) || !isInteger(y)) {\r\n    throw new Error('Integers expected in function rightLogShift');\r\n  }\r\n\r\n  return x >>> y;\r\n}\r\nrightLogShiftNumber.signature = n2;"]},"metadata":{},"sourceType":"module"}