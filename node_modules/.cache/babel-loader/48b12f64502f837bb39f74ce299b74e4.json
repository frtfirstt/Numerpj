{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05.js';\nvar name = 'compare';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\nexport var createCompare = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    equalScalar,\n    matrix,\n    BigNumber,\n    Fraction,\n    DenseMatrix\n  } = _ref;\n  var algorithm03 = createAlgorithm03({\n    typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed,\n    equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\r\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\r\n   *\r\n   * x and y are considered equal when the relative difference between x and y\r\n   * is smaller than the configured epsilon. The function cannot be used to\r\n   * compare values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.compare(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.compare(6, 1)           // returns 1\r\n   *    math.compare(2, 3)           // returns -1\r\n   *    math.compare(7, 7)           // returns 0\r\n   *    math.compare('10', '2')      // returns 1\r\n   *    math.compare('1000', '1e3')  // returns 0\r\n   *\r\n   *    const a = math.unit('5 cm')\r\n   *    const b = math.unit('40 mm')\r\n   *    math.compare(a, b)           // returns 1\r\n   *\r\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\r\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\r\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\r\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\r\n   */\n\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return bigNearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return this(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, this, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});\nexport var createCompareNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/function/relational/compare.js"],"names":["nearlyEqual","bigNearlyEqual","factory","createAlgorithm03","createAlgorithm12","createAlgorithm14","createAlgorithm13","createAlgorithm05","name","dependencies","createCompare","_ref","typed","config","equalScalar","matrix","BigNumber","Fraction","DenseMatrix","algorithm03","algorithm05","algorithm12","algorithm13","algorithm14","booleanBoolean","x","y","numberNumber","epsilon","BigNumberBigNumber","cmp","FractionFraction","compare","ComplexComplex","TypeError","UnitUnit","equalBase","Error","value","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","createCompareNumber","_ref2"],"mappings":"AAAA,SAASA,WAAW,IAAIC,cAAxB,QAA8C,sCAA9C;AACA,SAASD,WAAT,QAA4B,uBAA5B;AACA,SAASE,OAAT,QAAwB,wBAAxB;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,EAA8B,aAA9B,EAA6C,WAA7C,EAA0D,UAA1D,EAAsE,aAAtE,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeR,OAAO,CAACM,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC9E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,MAJE;AAKFC,IAAAA,SALE;AAMFC,IAAAA,QANE;AAOFC,IAAAA;AAPE,MAQAP,IARJ;AASA,MAAIQ,WAAW,GAAGhB,iBAAiB,CAAC;AAClCS,IAAAA;AADkC,GAAD,CAAnC;AAGA,MAAIQ,WAAW,GAAGb,iBAAiB,CAAC;AAClCK,IAAAA,KADkC;AAElCE,IAAAA;AAFkC,GAAD,CAAnC;AAIA,MAAIO,WAAW,GAAGjB,iBAAiB,CAAC;AAClCQ,IAAAA,KADkC;AAElCM,IAAAA;AAFkC,GAAD,CAAnC;AAIA,MAAII,WAAW,GAAGhB,iBAAiB,CAAC;AAClCM,IAAAA;AADkC,GAAD,CAAnC;AAGA,MAAIW,WAAW,GAAGlB,iBAAiB,CAAC;AAClCO,IAAAA;AADkC,GAAD,CAAnC;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,SAAOA,KAAK,CAACJ,IAAD,EAAO;AACjB,wBAAoB,SAASgB,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOD,CAAC,KAAKC,CAAN,GAAU,CAAV,GAAcD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAAlC;AACD,KAHgB;AAIjB,sBAAkB,SAASC,YAAT,CAAsBF,CAAtB,EAAyBC,CAAzB,EAA4B;AAC5C,aAAO1B,WAAW,CAACyB,CAAD,EAAIC,CAAJ,EAAOb,MAAM,CAACe,OAAd,CAAX,GAAoC,CAApC,GAAwCH,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAA5D;AACD,KANgB;AAOjB,4BAAwB,SAASG,kBAAT,CAA4BJ,CAA5B,EAA+BC,CAA/B,EAAkC;AACxD,aAAOzB,cAAc,CAACwB,CAAD,EAAIC,CAAJ,EAAOb,MAAM,CAACe,OAAd,CAAd,GAAuC,IAAIZ,SAAJ,CAAc,CAAd,CAAvC,GAA0D,IAAIA,SAAJ,CAAcS,CAAC,CAACK,GAAF,CAAMJ,CAAN,CAAd,CAAjE;AACD,KATgB;AAUjB,0BAAsB,SAASK,gBAAT,CAA0BN,CAA1B,EAA6BC,CAA7B,EAAgC;AACpD,aAAO,IAAIT,QAAJ,CAAaQ,CAAC,CAACO,OAAF,CAAUN,CAAV,CAAb,CAAP;AACD,KAZgB;AAajB,wBAAoB,SAASO,cAAT,GAA0B;AAC5C,YAAM,IAAIC,SAAJ,CAAc,qDAAd,CAAN;AACD,KAfgB;AAgBjB,kBAAc,SAASC,QAAT,CAAkBV,CAAlB,EAAqBC,CAArB,EAAwB;AACpC,UAAI,CAACD,CAAC,CAACW,SAAF,CAAYV,CAAZ,CAAL,EAAqB;AACnB,cAAM,IAAIW,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,aAAO,KAAKZ,CAAC,CAACa,KAAP,EAAcZ,CAAC,CAACY,KAAhB,CAAP;AACD,KAtBgB;AAuBjB,kCAA8B,SAASC,wBAAT,CAAkCd,CAAlC,EAAqCC,CAArC,EAAwC;AACpE,aAAON,WAAW,CAACK,CAAD,EAAIC,CAAJ,EAAO,IAAP,CAAlB;AACD,KAzBgB;AA0BjB,iCAA6B,SAASc,uBAAT,CAAiCf,CAAjC,EAAoCC,CAApC,EAAuC;AAClE,aAAOP,WAAW,CAACO,CAAD,EAAID,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;AACD,KA5BgB;AA6BjB,iCAA6B,SAASgB,uBAAT,CAAiChB,CAAjC,EAAoCC,CAApC,EAAuC;AAClE,aAAOP,WAAW,CAACM,CAAD,EAAIC,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;AACD,KA/BgB;AAgCjB,gCAA4B,SAASgB,sBAAT,CAAgCjB,CAAhC,EAAmCC,CAAnC,EAAsC;AAChE,aAAOJ,WAAW,CAACG,CAAD,EAAIC,CAAJ,EAAO,IAAP,CAAlB;AACD,KAlCgB;AAmCjB,oBAAgB,SAASiB,UAAT,CAAoBlB,CAApB,EAAuBC,CAAvB,EAA0B;AACxC;AACA,aAAO,KAAKX,MAAM,CAACU,CAAD,CAAX,EAAgBV,MAAM,CAACW,CAAD,CAAtB,EAA2BkB,OAA3B,EAAP;AACD,KAtCgB;AAuCjB,qBAAiB,SAASC,WAAT,CAAqBpB,CAArB,EAAwBC,CAAxB,EAA2B;AAC1C;AACA,aAAO,KAAKX,MAAM,CAACU,CAAD,CAAX,EAAgBC,CAAhB,CAAP;AACD,KA1CgB;AA2CjB,qBAAiB,SAASoB,WAAT,CAAqBrB,CAArB,EAAwBC,CAAxB,EAA2B;AAC1C;AACA,aAAO,KAAKD,CAAL,EAAQV,MAAM,CAACW,CAAD,CAAd,CAAP;AACD,KA9CgB;AA+CjB,yBAAqB,SAASqB,eAAT,CAAyBtB,CAAzB,EAA4BC,CAA5B,EAA+B;AAClD,aAAOL,WAAW,CAACI,CAAD,EAAIC,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;AACD,KAjDgB;AAkDjB,wBAAoB,SAASsB,cAAT,CAAwBvB,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOH,WAAW,CAACE,CAAD,EAAIC,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;AACD,KApDgB;AAqDjB,yBAAqB,SAASuB,eAAT,CAAyBxB,CAAzB,EAA4BC,CAA5B,EAA+B;AAClD,aAAOL,WAAW,CAACK,CAAD,EAAID,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;AACD,KAvDgB;AAwDjB,wBAAoB,SAASyB,cAAT,CAAwBzB,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOH,WAAW,CAACG,CAAD,EAAID,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;AACD,KA1DgB;AA2DjB,kBAAc,SAAS0B,QAAT,CAAkB1B,CAAlB,EAAqBC,CAArB,EAAwB;AACpC;AACA,aAAOH,WAAW,CAACR,MAAM,CAACU,CAAD,CAAP,EAAYC,CAAZ,EAAe,IAAf,EAAqB,KAArB,CAAX,CAAuCkB,OAAvC,EAAP;AACD,KA9DgB;AA+DjB,kBAAc,SAASQ,QAAT,CAAkB3B,CAAlB,EAAqBC,CAArB,EAAwB;AACpC;AACA,aAAOH,WAAW,CAACR,MAAM,CAACW,CAAD,CAAP,EAAYD,CAAZ,EAAe,IAAf,EAAqB,IAArB,CAAX,CAAsCmB,OAAtC,EAAP;AACD;AAlEgB,GAAP,CAAZ;AAoED,CArIgD,CAA1C;AAsIP,OAAO,IAAIS,mBAAmB,GAAG,eAAenD,OAAO,CAACM,IAAD,EAAO,CAAC,OAAD,EAAU,QAAV,CAAP,EAA6B8C,KAAD,IAAW;AAC5F,MAAI;AACF1C,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAyC,KAHJ;AAIA,SAAO1C,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkB,SAASmB,YAAT,CAAsBF,CAAtB,EAAyBC,CAAzB,EAA4B;AAC5C,aAAO1B,WAAW,CAACyB,CAAD,EAAIC,CAAJ,EAAOb,MAAM,CAACe,OAAd,CAAX,GAAoC,CAApC,GAAwCH,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAA5D;AACD;AAHgB,GAAP,CAAZ;AAKD,CAVsD,CAAhD","sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\r\nimport { nearlyEqual } from '../../utils/number.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\r\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\r\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\r\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\r\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05.js';\r\nvar name = 'compare';\r\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\r\nexport var createCompare = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    config,\r\n    equalScalar,\r\n    matrix,\r\n    BigNumber,\r\n    Fraction,\r\n    DenseMatrix\r\n  } = _ref;\r\n  var algorithm03 = createAlgorithm03({\r\n    typed\r\n  });\r\n  var algorithm05 = createAlgorithm05({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var algorithm12 = createAlgorithm12({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var algorithm13 = createAlgorithm13({\r\n    typed\r\n  });\r\n  var algorithm14 = createAlgorithm14({\r\n    typed\r\n  });\r\n  /**\r\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\r\n   *\r\n   * x and y are considered equal when the relative difference between x and y\r\n   * is smaller than the configured epsilon. The function cannot be used to\r\n   * compare values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.compare(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.compare(6, 1)           // returns 1\r\n   *    math.compare(2, 3)           // returns -1\r\n   *    math.compare(7, 7)           // returns 0\r\n   *    math.compare('10', '2')      // returns 1\r\n   *    math.compare('1000', '1e3')  // returns 0\r\n   *\r\n   *    const a = math.unit('5 cm')\r\n   *    const b = math.unit('40 mm')\r\n   *    math.compare(a, b)           // returns 1\r\n   *\r\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\r\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\r\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\r\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\r\n   */\r\n\r\n  return typed(name, {\r\n    'boolean, boolean': function booleanBoolean(x, y) {\r\n      return x === y ? 0 : x > y ? 1 : -1;\r\n    },\r\n    'number, number': function numberNumber(x, y) {\r\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\r\n    },\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\r\n      return bigNearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\r\n    },\r\n    'Fraction, Fraction': function FractionFraction(x, y) {\r\n      return new Fraction(x.compare(y));\r\n    },\r\n    'Complex, Complex': function ComplexComplex() {\r\n      throw new TypeError('No ordering relation is defined for complex numbers');\r\n    },\r\n    'Unit, Unit': function UnitUnit(x, y) {\r\n      if (!x.equalBase(y)) {\r\n        throw new Error('Cannot compare units with different base');\r\n      }\r\n\r\n      return this(x.value, y.value);\r\n    },\r\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\r\n      return algorithm05(x, y, this);\r\n    },\r\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\r\n      return algorithm03(y, x, this, true);\r\n    },\r\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\r\n      return algorithm03(x, y, this, false);\r\n    },\r\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\r\n      return algorithm13(x, y, this);\r\n    },\r\n    'Array, Array': function ArrayArray(x, y) {\r\n      // use matrix implementation\r\n      return this(matrix(x), matrix(y)).valueOf();\r\n    },\r\n    'Array, Matrix': function ArrayMatrix(x, y) {\r\n      // use matrix implementation\r\n      return this(matrix(x), y);\r\n    },\r\n    'Matrix, Array': function MatrixArray(x, y) {\r\n      // use matrix implementation\r\n      return this(x, matrix(y));\r\n    },\r\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\r\n      return algorithm12(x, y, this, false);\r\n    },\r\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\r\n      return algorithm14(x, y, this, false);\r\n    },\r\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\r\n      return algorithm12(y, x, this, true);\r\n    },\r\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\r\n      return algorithm14(y, x, this, true);\r\n    },\r\n    'Array, any': function ArrayAny(x, y) {\r\n      // use matrix implementation\r\n      return algorithm14(matrix(x), y, this, false).valueOf();\r\n    },\r\n    'any, Array': function anyArray(x, y) {\r\n      // use matrix implementation\r\n      return algorithm14(matrix(y), x, this, true).valueOf();\r\n    }\r\n  });\r\n});\r\nexport var createCompareNumber = /* #__PURE__ */factory(name, ['typed', 'config'], (_ref2) => {\r\n  var {\r\n    typed,\r\n    config\r\n  } = _ref2;\r\n  return typed(name, {\r\n    'number, number': function numberNumber(x, y) {\r\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}