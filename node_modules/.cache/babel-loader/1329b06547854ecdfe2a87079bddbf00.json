{"ast":null,"code":"/**\r\n * @license Fraction.js v4.0.12 09/09/2015\r\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\r\n *\r\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\r\n * Dual licensed under the MIT or GPL Version 2 licenses.\r\n **/\n\n/**\r\n *\r\n * This class offers the possibility to calculate fractions.\r\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\r\n *\r\n * Array/Object form\r\n * [ 0 => <nominator>, 1 => <denominator> ]\r\n * [ n => <nominator>, d => <denominator> ]\r\n *\r\n * Integer form\r\n * - Single integer value\r\n *\r\n * Double form\r\n * - Single double value\r\n *\r\n * String form\r\n * 123.456 - a simple double\r\n * 123/456 - a string fraction\r\n * 123.'456' - a double with repeating decimal places\r\n * 123.(456) - synonym\r\n * 123.45'6' - a double with repeating last place\r\n * 123.45(6) - synonym\r\n *\r\n * Example:\r\n *\r\n * var f = new Fraction(\"9.4'31'\");\r\n * f.mul([-4, 3]).div(4.9);\r\n *\r\n */\n(function (root) {\n  \"use strict\"; // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n\n  var MAX_CYCLE_LEN = 2000; // Parsed data to avoid calling \"new\" all the time\n\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function createError(name) {\n    function errorConstructor() {\n      var temp = Error.apply(this, arguments);\n      temp['name'] = this['name'] = name;\n      this['stack'] = temp['stack'];\n      this['message'] = temp['message'];\n    }\n    /**\r\n     * Error constructor\r\n     *\r\n     * @constructor\r\n     */\n\n\n    function IntermediateInheritor() {}\n\n    IntermediateInheritor.prototype = Error.prototype;\n    errorConstructor.prototype = new IntermediateInheritor();\n    return errorConstructor;\n  }\n\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\n\n  function assign(n, s) {\n    if (isNaN(n = parseInt(n, 10))) {\n      throwInvalidParam();\n    }\n\n    return n * s;\n  }\n\n  function throwInvalidParam() {\n    throw new InvalidParameter();\n  }\n\n  var parse = function (p1, p2) {\n    var n = 0,\n        d = 1,\n        s = 1;\n    var v = 0,\n        w = 0,\n        x = 0,\n        y = 1,\n        z = 1;\n    var A = 0,\n        B = 1;\n    var C = 1,\n        D = 1;\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n    } else switch (typeof p1) {\n      case \"object\":\n        {\n          if (\"d\" in p1 && \"n\" in p1) {\n            n = p1[\"n\"];\n            d = p1[\"d\"];\n            if (\"s\" in p1) n *= p1[\"s\"];\n          } else if (0 in p1) {\n            n = p1[0];\n            if (1 in p1) d = p1[1];\n          } else {\n            throwInvalidParam();\n          }\n\n          s = n * d;\n          break;\n        }\n\n      case \"number\":\n        {\n          if (p1 < 0) {\n            s = p1;\n            p1 = -p1;\n          }\n\n          if (p1 % 1 === 0) {\n            n = p1;\n          } else if (p1 > 0) {\n            // check for != 0, scale would become NaN (log(0)), which converges really slow\n            if (p1 >= 1) {\n              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n              p1 /= z;\n            } // Using Farey Sequences\n            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n\n            while (B <= N && D <= N) {\n              M = (A + C) / (B + D);\n\n              if (p1 === M) {\n                if (B + D <= N) {\n                  n = A + C;\n                  d = B + D;\n                } else if (D > B) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n\n                break;\n              } else {\n                if (p1 > M) {\n                  A += C;\n                  B += D;\n                } else {\n                  C += A;\n                  D += B;\n                }\n\n                if (B > N) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n              }\n            }\n\n            n *= z;\n          } else if (isNaN(p1) || isNaN(p2)) {\n            d = n = NaN;\n          }\n\n          break;\n        }\n\n      case \"string\":\n        {\n          B = p1.match(/\\d+|./g);\n          if (B === null) throwInvalidParam();\n\n          if (B[A] === '-') {\n            // Check for minus sign at the beginning\n            s = -1;\n            A++;\n          } else if (B[A] === '+') {\n            // Check for plus sign at the beginning\n            A++;\n          }\n\n          if (B.length === A + 1) {\n            // Check if it's just a simple number \"1234\"\n            w = assign(B[A++], s);\n          } else if (B[A + 1] === '.' || B[A] === '.') {\n            // Check if it's a decimal number\n            if (B[A] !== '.') {\n              // Handle 0.5 and .5\n              v = assign(B[A++], s);\n            }\n\n            A++; // Check for decimal places\n\n            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n              w = assign(B[A], s);\n              y = Math.pow(10, B[A].length);\n              A++;\n            } // Check for repeating places\n\n\n            if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n              x = assign(B[A + 1], s);\n              z = Math.pow(10, B[A + 1].length) - 1;\n              A += 3;\n            }\n          } else if (B[A + 1] === '/' || B[A + 1] === ':') {\n            // Check for a simple fraction \"123/456\" or \"123:456\"\n            w = assign(B[A], s);\n            y = assign(B[A + 2], 1);\n            A += 3;\n          } else if (B[A + 3] === '/' && B[A + 1] === ' ') {\n            // Check for a complex fraction \"123 1/2\"\n            v = assign(B[A], s);\n            w = assign(B[A + 2], s);\n            y = assign(B[A + 4], 1);\n            A += 5;\n          }\n\n          if (B.length <= A) {\n            // Check for more tokens on the stack\n            d = y * z;\n            s =\n            /* void */\n            n = x + d * v + z * w;\n            break;\n          }\n          /* Fall through on error */\n\n        }\n\n      default:\n        throwInvalidParam();\n    }\n\n    if (d === 0) {\n      throw new DivisionByZero();\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n    var r = 1;\n\n    for (; e > 0; b = b * b % m, e >>= 1) {\n      if (e & 1) {\n        r = r * b % m;\n      }\n    }\n\n    return r;\n  }\n\n  function cycleLen(n, d) {\n    for (; d % 2 === 0; d /= 2) {}\n\n    for (; d % 5 === 0; d /= 5) {}\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0; // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n      if (t > MAX_CYCLE_LEN) return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n\n    return t;\n  }\n\n  function cycleStart(n, d, len) {\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) {\n      // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n      if (rem1 === rem2) return t;\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n\n    return 0;\n  }\n\n  function gcd(a, b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    while (1) {\n      a %= b;\n      if (!a) return b;\n      b %= a;\n      if (!b) return a;\n    }\n  }\n\n  ;\n  /**\r\n   * Module constructor\r\n   *\r\n   * @constructor\r\n   * @param {number|Fraction=} a\r\n   * @param {number=} b\r\n   */\n\n  function Fraction(a, b) {\n    if (!(this instanceof Fraction)) {\n      return new Fraction(a, b);\n    }\n\n    parse(a, b);\n\n    if (Fraction['REDUCE']) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n    } else {\n      a = 1;\n    }\n\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  }\n  /**\r\n   * Boolean global variable to be able to disable automatic reduction of the fraction\r\n   *\r\n   */\n\n\n  Fraction['REDUCE'] = 1;\n  Fraction.prototype = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\r\n     * Calculates the absolute value\r\n     *\r\n     * Ex: new Fraction(-4).abs() => 4\r\n     **/\n    \"abs\": function () {\n      return new Fraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\r\n     * Inverts the sign of the current fraction\r\n     *\r\n     * Ex: new Fraction(-4).neg() => 4\r\n     **/\n    \"neg\": function () {\n      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\r\n     * Adds two rational numbers\r\n     *\r\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\r\n     **/\n    \"add\": function (a, b) {\n      parse(a, b);\n      return new Fraction(this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\r\n     * Subtracts two rational numbers\r\n     *\r\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\r\n     **/\n    \"sub\": function (a, b) {\n      parse(a, b);\n      return new Fraction(this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\r\n     * Multiplies two rational numbers\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\r\n     **/\n    \"mul\": function (a, b) {\n      parse(a, b);\n      return new Fraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\r\n     * Divides two rational numbers\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\r\n     **/\n    \"div\": function (a, b) {\n      parse(a, b);\n      return new Fraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"], this[\"d\"] * P[\"n\"]);\n    },\n\n    /**\r\n     * Clones the actual object\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").clone()\r\n     **/\n    \"clone\": function () {\n      return new Fraction(this);\n    },\n\n    /**\r\n     * Calculates the modulo of two rational numbers - a more precise fmod\r\n     *\r\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\r\n     **/\n    \"mod\": function (a, b) {\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        Fraction(0, 0); // Throw DivisionByZero\n      }\n      /*\r\n       * First silly attempt, kinda slow\r\n       *\r\n       return that[\"sub\"]({\r\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\r\n       \"d\": num[\"d\"],\r\n       \"s\": this[\"s\"]\r\n       });*/\n\n      /*\r\n       * New attempt: a1 / b1 = a2 / b2 * q + r\r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\r\n       */\n\n\n      return new Fraction(this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\r\n     * Calculates the fractional gcd of two rational numbers\r\n     *\r\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\r\n     */\n    \"gcd\": function (a, b) {\n      parse(a, b); // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return new Fraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\r\n     * Calculates the fractional lcm of two rational numbers\r\n     *\r\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\r\n     */\n    \"lcm\": function (a, b) {\n      parse(a, b); // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return new Fraction();\n      }\n\n      return new Fraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\r\n     * Calculates the ceil of a rational number\r\n     *\r\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\r\n     **/\n    \"ceil\": function (places) {\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n\n      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\r\n     * Calculates the floor of a rational number\r\n     *\r\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\r\n     **/\n    \"floor\": function (places) {\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n\n      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\r\n     * Rounds a rational numbers\r\n     *\r\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\r\n     **/\n    \"round\": function (places) {\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n\n      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\r\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\r\n     *\r\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\r\n     **/\n    \"inverse\": function () {\n      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\r\n     * Calculates the fraction to some integer exponent\r\n     *\r\n     * Ex: new Fraction(-1,2).pow(-3) => -8\r\n     */\n    \"pow\": function (m) {\n      if (m < 0) {\n        return new Fraction(Math.pow(this['s'] * this[\"d\"], -m), Math.pow(this[\"n\"], -m));\n      } else {\n        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\n      }\n    },\n\n    /**\r\n     * Check if two rational numbers are the same\r\n     *\r\n     * Ex: new Fraction(19.6).equals([98, 5]);\r\n     **/\n    \"equals\": function (a, b) {\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\r\n     * Check if two rational numbers are the same\r\n     *\r\n     * Ex: new Fraction(19.6).equals([98, 5]);\r\n     **/\n    \"compare\": function (a, b) {\n      parse(a, b);\n      var t = this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"];\n      return (0 < t) - (t < 0);\n    },\n    \"simplify\": function (eps) {\n      // First naive implementation, needs improvement\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      var cont = this['abs']()['toContinued']();\n      eps = eps || 0.001;\n\n      function rec(a) {\n        if (a.length === 1) return new Fraction(a[0]);\n        return rec(a.slice(1))['inverse']()['add'](a[0]);\n      }\n\n      for (var i = 0; i < cont.length; i++) {\n        var tmp = rec(cont.slice(0, i + 1));\n\n        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\n          return tmp['mul'](this['s']);\n        }\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Check if two rational numbers are divisible\r\n     *\r\n     * Ex: new Fraction(19.6).divisible(1.5);\r\n     */\n    \"divisible\": function (a, b) {\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || this[\"n\"] * P[\"d\"] % (P[\"n\"] * this[\"d\"]));\n    },\n\n    /**\r\n     * Returns a decimal representation of the fraction\r\n     *\r\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\r\n     **/\n    'valueOf': function () {\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\r\n     * Returns a string-fraction representation of a Fraction object\r\n     *\r\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\r\n     **/\n    'toFraction': function (excludeWhole) {\n      var whole,\n          str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          str += \" \";\n          n %= d;\n        }\n\n        str += n;\n        str += '/';\n        str += d;\n      }\n\n      return str;\n    },\n\n    /**\r\n     * Returns a latex representation of a Fraction object\r\n     *\r\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\r\n     **/\n    'toLatex': function (excludeWhole) {\n      var whole,\n          str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          n %= d;\n        }\n\n        str += \"\\\\frac{\";\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n\n      return str;\n    },\n\n    /**\r\n     * Returns an array of continued fraction elements\r\n     *\r\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\r\n     */\n    'toContinued': function () {\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\r\n     * Creates a string representation of a fraction with all digits\r\n     *\r\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\r\n     **/\n    'toString': function (dec) {\n      var g;\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      if (!Fraction['REDUCE']) {\n        g = gcd(N, D);\n        N /= g;\n        D /= g;\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] === -1 ? \"-\" : \"\";\n      str += N / D | 0;\n      N %= D;\n      N *= 10;\n      if (N) str += \".\";\n\n      if (cycLen) {\n        for (var i = cycOff; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n\n        str += \"(\";\n\n        for (var i = cycLen; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n\n        str += \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n      }\n\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function () {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", {\n      'value': true\n    });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n})(this);","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/fraction.js/fraction.js"],"names":["root","MAX_CYCLE_LEN","P","createError","name","errorConstructor","temp","Error","apply","arguments","IntermediateInheritor","prototype","DivisionByZero","Fraction","InvalidParameter","assign","n","s","isNaN","parseInt","throwInvalidParam","parse","p1","p2","d","v","w","x","y","z","A","B","C","D","N","M","undefined","Math","pow","floor","log","LN10","NaN","match","length","abs","modpow","b","e","m","r","cycleLen","rem","t","cycleStart","len","rem1","rem2","gcd","a","places","ceil","round","eps","cont","rec","slice","i","tmp","valueOf","excludeWhole","whole","str","res","push","dec","g","cycLen","cycOff","define","exports","Object","defineProperty","module"],"mappings":"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","sourcesContent":["/**\r\n * @license Fraction.js v4.0.12 09/09/2015\r\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\r\n *\r\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\r\n * Dual licensed under the MIT or GPL Version 2 licenses.\r\n **/\r\n\r\n\r\n/**\r\n *\r\n * This class offers the possibility to calculate fractions.\r\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\r\n *\r\n * Array/Object form\r\n * [ 0 => <nominator>, 1 => <denominator> ]\r\n * [ n => <nominator>, d => <denominator> ]\r\n *\r\n * Integer form\r\n * - Single integer value\r\n *\r\n * Double form\r\n * - Single double value\r\n *\r\n * String form\r\n * 123.456 - a simple double\r\n * 123/456 - a string fraction\r\n * 123.'456' - a double with repeating decimal places\r\n * 123.(456) - synonym\r\n * 123.45'6' - a double with repeating last place\r\n * 123.45(6) - synonym\r\n *\r\n * Example:\r\n *\r\n * var f = new Fraction(\"9.4'31'\");\r\n * f.mul([-4, 3]).div(4.9);\r\n *\r\n */\r\n\r\n(function(root) {\r\n\r\n  \"use strict\";\r\n\r\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\r\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\r\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\r\n  var MAX_CYCLE_LEN = 2000;\r\n\r\n  // Parsed data to avoid calling \"new\" all the time\r\n  var P = {\r\n    \"s\": 1,\r\n    \"n\": 0,\r\n    \"d\": 1\r\n  };\r\n\r\n  function createError(name) {\r\n\r\n    function errorConstructor() {\r\n      var temp = Error.apply(this, arguments);\r\n      temp['name'] = this['name'] = name;\r\n      this['stack'] = temp['stack'];\r\n      this['message'] = temp['message'];\r\n    }\r\n\r\n    /**\r\n     * Error constructor\r\n     *\r\n     * @constructor\r\n     */\r\n    function IntermediateInheritor() { }\r\n    IntermediateInheritor.prototype = Error.prototype;\r\n    errorConstructor.prototype = new IntermediateInheritor();\r\n\r\n    return errorConstructor;\r\n  }\r\n\r\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\r\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\r\n\r\n  function assign(n, s) {\r\n\r\n    if (isNaN(n = parseInt(n, 10))) {\r\n      throwInvalidParam();\r\n    }\r\n    return n * s;\r\n  }\r\n\r\n  function throwInvalidParam() {\r\n    throw new InvalidParameter();\r\n  }\r\n\r\n  var parse = function(p1, p2) {\r\n\r\n    var n = 0, d = 1, s = 1;\r\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\r\n\r\n    var A = 0, B = 1;\r\n    var C = 1, D = 1;\r\n\r\n    var N = 10000000;\r\n    var M;\r\n\r\n    if (p1 === undefined || p1 === null) {\r\n      /* void */\r\n    } else if (p2 !== undefined) {\r\n      n = p1;\r\n      d = p2;\r\n      s = n * d;\r\n    } else\r\n      switch (typeof p1) {\r\n\r\n        case \"object\":\r\n          {\r\n            if (\"d\" in p1 && \"n\" in p1) {\r\n              n = p1[\"n\"];\r\n              d = p1[\"d\"];\r\n              if (\"s\" in p1)\r\n                n *= p1[\"s\"];\r\n            } else if (0 in p1) {\r\n              n = p1[0];\r\n              if (1 in p1)\r\n                d = p1[1];\r\n            } else {\r\n              throwInvalidParam();\r\n            }\r\n            s = n * d;\r\n            break;\r\n          }\r\n        case \"number\":\r\n          {\r\n            if (p1 < 0) {\r\n              s = p1;\r\n              p1 = -p1;\r\n            }\r\n\r\n            if (p1 % 1 === 0) {\r\n              n = p1;\r\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\r\n\r\n              if (p1 >= 1) {\r\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\r\n                p1 /= z;\r\n              }\r\n\r\n              // Using Farey Sequences\r\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\r\n\r\n              while (B <= N && D <= N) {\r\n                M = (A + C) / (B + D);\r\n\r\n                if (p1 === M) {\r\n                  if (B + D <= N) {\r\n                    n = A + C;\r\n                    d = B + D;\r\n                  } else if (D > B) {\r\n                    n = C;\r\n                    d = D;\r\n                  } else {\r\n                    n = A;\r\n                    d = B;\r\n                  }\r\n                  break;\r\n\r\n                } else {\r\n\r\n                  if (p1 > M) {\r\n                    A += C;\r\n                    B += D;\r\n                  } else {\r\n                    C += A;\r\n                    D += B;\r\n                  }\r\n\r\n                  if (B > N) {\r\n                    n = C;\r\n                    d = D;\r\n                  } else {\r\n                    n = A;\r\n                    d = B;\r\n                  }\r\n                }\r\n              }\r\n              n *= z;\r\n            } else if (isNaN(p1) || isNaN(p2)) {\r\n              d = n = NaN;\r\n            }\r\n            break;\r\n          }\r\n        case \"string\":\r\n          {\r\n            B = p1.match(/\\d+|./g);\r\n\r\n            if (B === null)\r\n              throwInvalidParam();\r\n\r\n            if (B[A] === '-') {// Check for minus sign at the beginning\r\n              s = -1;\r\n              A++;\r\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\r\n              A++;\r\n            }\r\n\r\n            if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\r\n              w = assign(B[A++], s);\r\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\r\n\r\n              if (B[A] !== '.') { // Handle 0.5 and .5\r\n                v = assign(B[A++], s);\r\n              }\r\n              A++;\r\n\r\n              // Check for decimal places\r\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\r\n                w = assign(B[A], s);\r\n                y = Math.pow(10, B[A].length);\r\n                A++;\r\n              }\r\n\r\n              // Check for repeating places\r\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\r\n                x = assign(B[A + 1], s);\r\n                z = Math.pow(10, B[A + 1].length) - 1;\r\n                A += 3;\r\n              }\r\n\r\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\r\n              w = assign(B[A], s);\r\n              y = assign(B[A + 2], 1);\r\n              A += 3;\r\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\r\n              v = assign(B[A], s);\r\n              w = assign(B[A + 2], s);\r\n              y = assign(B[A + 4], 1);\r\n              A += 5;\r\n            }\r\n\r\n            if (B.length <= A) { // Check for more tokens on the stack\r\n              d = y * z;\r\n              s = /* void */\r\n              n = x + d * v + z * w;\r\n              break;\r\n            }\r\n\r\n            /* Fall through on error */\r\n          }\r\n        default:\r\n          throwInvalidParam();\r\n      }\r\n\r\n    if (d === 0) {\r\n      throw new DivisionByZero();\r\n    }\r\n\r\n    P[\"s\"] = s < 0 ? -1 : 1;\r\n    P[\"n\"] = Math.abs(n);\r\n    P[\"d\"] = Math.abs(d);\r\n  };\r\n\r\n  function modpow(b, e, m) {\r\n\r\n    var r = 1;\r\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\r\n\r\n      if (e & 1) {\r\n        r = (r * b) % m;\r\n      }\r\n    }\r\n    return r;\r\n  }\r\n\r\n\r\n  function cycleLen(n, d) {\r\n\r\n    for (; d % 2 === 0;\r\n      d /= 2) {\r\n    }\r\n\r\n    for (; d % 5 === 0;\r\n      d /= 5) {\r\n    }\r\n\r\n    if (d === 1) // Catch non-cyclic numbers\r\n      return 0;\r\n\r\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\r\n    // 10^(d-1) % d == 1\r\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\r\n    // as we want to translate the numbers to strings.\r\n\r\n    var rem = 10 % d;\r\n    var t = 1;\r\n\r\n    for (; rem !== 1; t++) {\r\n      rem = rem * 10 % d;\r\n\r\n      if (t > MAX_CYCLE_LEN)\r\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\r\n    }\r\n    return t;\r\n  }\r\n\r\n\r\n  function cycleStart(n, d, len) {\r\n\r\n    var rem1 = 1;\r\n    var rem2 = modpow(10, len, d);\r\n\r\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\r\n      // Solve 10^s == 10^(s+t) (mod d)\r\n\r\n      if (rem1 === rem2)\r\n        return t;\r\n\r\n      rem1 = rem1 * 10 % d;\r\n      rem2 = rem2 * 10 % d;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function gcd(a, b) {\r\n\r\n    if (!a)\r\n      return b;\r\n    if (!b)\r\n      return a;\r\n\r\n    while (1) {\r\n      a %= b;\r\n      if (!a)\r\n        return b;\r\n      b %= a;\r\n      if (!b)\r\n        return a;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Module constructor\r\n   *\r\n   * @constructor\r\n   * @param {number|Fraction=} a\r\n   * @param {number=} b\r\n   */\r\n  function Fraction(a, b) {\r\n\r\n    if (!(this instanceof Fraction)) {\r\n      return new Fraction(a, b);\r\n    }\r\n\r\n    parse(a, b);\r\n\r\n    if (Fraction['REDUCE']) {\r\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\r\n    } else {\r\n      a = 1;\r\n    }\r\n\r\n    this[\"s\"] = P[\"s\"];\r\n    this[\"n\"] = P[\"n\"] / a;\r\n    this[\"d\"] = P[\"d\"] / a;\r\n  }\r\n\r\n  /**\r\n   * Boolean global variable to be able to disable automatic reduction of the fraction\r\n   *\r\n   */\r\n  Fraction['REDUCE'] = 1;\r\n\r\n  Fraction.prototype = {\r\n\r\n    \"s\": 1,\r\n    \"n\": 0,\r\n    \"d\": 1,\r\n\r\n    /**\r\n     * Calculates the absolute value\r\n     *\r\n     * Ex: new Fraction(-4).abs() => 4\r\n     **/\r\n    \"abs\": function() {\r\n\r\n      return new Fraction(this[\"n\"], this[\"d\"]);\r\n    },\r\n\r\n    /**\r\n     * Inverts the sign of the current fraction\r\n     *\r\n     * Ex: new Fraction(-4).neg() => 4\r\n     **/\r\n    \"neg\": function() {\r\n\r\n      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\r\n    },\r\n\r\n    /**\r\n     * Adds two rational numbers\r\n     *\r\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\r\n     **/\r\n    \"add\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return new Fraction(\r\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\r\n        this[\"d\"] * P[\"d\"]\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Subtracts two rational numbers\r\n     *\r\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\r\n     **/\r\n    \"sub\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return new Fraction(\r\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\r\n        this[\"d\"] * P[\"d\"]\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Multiplies two rational numbers\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\r\n     **/\r\n    \"mul\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return new Fraction(\r\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\r\n        this[\"d\"] * P[\"d\"]\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Divides two rational numbers\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\r\n     **/\r\n    \"div\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return new Fraction(\r\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\r\n        this[\"d\"] * P[\"n\"]\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Clones the actual object\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").clone()\r\n     **/\r\n    \"clone\": function() {\r\n      return new Fraction(this);\r\n    },\r\n\r\n    /**\r\n     * Calculates the modulo of two rational numbers - a more precise fmod\r\n     *\r\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\r\n     **/\r\n    \"mod\": function(a, b) {\r\n\r\n      if (isNaN(this['n']) || isNaN(this['d'])) {\r\n        return new Fraction(NaN);\r\n      }\r\n\r\n      if (a === undefined) {\r\n        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\r\n      }\r\n\r\n      parse(a, b);\r\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\r\n        Fraction(0, 0); // Throw DivisionByZero\r\n      }\r\n\r\n      /*\r\n       * First silly attempt, kinda slow\r\n       *\r\n       return that[\"sub\"]({\r\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\r\n       \"d\": num[\"d\"],\r\n       \"s\": this[\"s\"]\r\n       });*/\r\n\r\n      /*\r\n       * New attempt: a1 / b1 = a2 / b2 * q + r\r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\r\n       */\r\n      return new Fraction(\r\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\r\n        P[\"d\"] * this[\"d\"]\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Calculates the fractional gcd of two rational numbers\r\n     *\r\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\r\n     */\r\n    \"gcd\": function(a, b) {\r\n\r\n      parse(a, b);\r\n\r\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\r\n\r\n      return new Fraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\r\n    },\r\n\r\n    /**\r\n     * Calculates the fractional lcm of two rational numbers\r\n     *\r\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\r\n     */\r\n    \"lcm\": function(a, b) {\r\n\r\n      parse(a, b);\r\n\r\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\r\n\r\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\r\n        return new Fraction;\r\n      }\r\n      return new Fraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\r\n    },\r\n\r\n    /**\r\n     * Calculates the ceil of a rational number\r\n     *\r\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\r\n     **/\r\n    \"ceil\": function(places) {\r\n\r\n      places = Math.pow(10, places || 0);\r\n\r\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\r\n        return new Fraction(NaN);\r\n      }\r\n      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\r\n    },\r\n\r\n    /**\r\n     * Calculates the floor of a rational number\r\n     *\r\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\r\n     **/\r\n    \"floor\": function(places) {\r\n\r\n      places = Math.pow(10, places || 0);\r\n\r\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\r\n        return new Fraction(NaN);\r\n      }\r\n      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\r\n    },\r\n\r\n    /**\r\n     * Rounds a rational numbers\r\n     *\r\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\r\n     **/\r\n    \"round\": function(places) {\r\n\r\n      places = Math.pow(10, places || 0);\r\n\r\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\r\n        return new Fraction(NaN);\r\n      }\r\n      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\r\n    },\r\n\r\n    /**\r\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\r\n     *\r\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\r\n     **/\r\n    \"inverse\": function() {\r\n\r\n      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\r\n    },\r\n\r\n    /**\r\n     * Calculates the fraction to some integer exponent\r\n     *\r\n     * Ex: new Fraction(-1,2).pow(-3) => -8\r\n     */\r\n    \"pow\": function(m) {\r\n\r\n      if (m < 0) {\r\n        return new Fraction(Math.pow(this['s'] * this[\"d\"], -m), Math.pow(this[\"n\"], -m));\r\n      } else {\r\n        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Check if two rational numbers are the same\r\n     *\r\n     * Ex: new Fraction(19.6).equals([98, 5]);\r\n     **/\r\n    \"equals\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\r\n    },\r\n\r\n    /**\r\n     * Check if two rational numbers are the same\r\n     *\r\n     * Ex: new Fraction(19.6).equals([98, 5]);\r\n     **/\r\n    \"compare\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\r\n      return (0 < t) - (t < 0);\r\n    },\r\n\r\n    \"simplify\": function(eps) {\r\n\r\n      // First naive implementation, needs improvement\r\n\r\n      if (isNaN(this['n']) || isNaN(this['d'])) {\r\n        return this;\r\n      }\r\n\r\n      var cont = this['abs']()['toContinued']();\r\n\r\n      eps = eps || 0.001;\r\n\r\n      function rec(a) {\r\n        if (a.length === 1)\r\n          return new Fraction(a[0]);\r\n        return rec(a.slice(1))['inverse']()['add'](a[0]);\r\n      }\r\n\r\n      for (var i = 0; i < cont.length; i++) {\r\n        var tmp = rec(cont.slice(0, i + 1));\r\n        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\r\n          return tmp['mul'](this['s']);\r\n        }\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Check if two rational numbers are divisible\r\n     *\r\n     * Ex: new Fraction(19.6).divisible(1.5);\r\n     */\r\n    \"divisible\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\r\n    },\r\n\r\n    /**\r\n     * Returns a decimal representation of the fraction\r\n     *\r\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\r\n     **/\r\n    'valueOf': function() {\r\n\r\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\r\n    },\r\n\r\n    /**\r\n     * Returns a string-fraction representation of a Fraction object\r\n     *\r\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\r\n     **/\r\n    'toFraction': function(excludeWhole) {\r\n\r\n      var whole, str = \"\";\r\n      var n = this[\"n\"];\r\n      var d = this[\"d\"];\r\n      if (this[\"s\"] < 0) {\r\n        str += '-';\r\n      }\r\n\r\n      if (d === 1) {\r\n        str += n;\r\n      } else {\r\n\r\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\r\n          str += whole;\r\n          str += \" \";\r\n          n %= d;\r\n        }\r\n\r\n        str += n;\r\n        str += '/';\r\n        str += d;\r\n      }\r\n      return str;\r\n    },\r\n\r\n    /**\r\n     * Returns a latex representation of a Fraction object\r\n     *\r\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\r\n     **/\r\n    'toLatex': function(excludeWhole) {\r\n\r\n      var whole, str = \"\";\r\n      var n = this[\"n\"];\r\n      var d = this[\"d\"];\r\n      if (this[\"s\"] < 0) {\r\n        str += '-';\r\n      }\r\n\r\n      if (d === 1) {\r\n        str += n;\r\n      } else {\r\n\r\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\r\n          str += whole;\r\n          n %= d;\r\n        }\r\n\r\n        str += \"\\\\frac{\";\r\n        str += n;\r\n        str += '}{';\r\n        str += d;\r\n        str += '}';\r\n      }\r\n      return str;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of continued fraction elements\r\n     *\r\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\r\n     */\r\n    'toContinued': function() {\r\n\r\n      var t;\r\n      var a = this['n'];\r\n      var b = this['d'];\r\n      var res = [];\r\n\r\n      if (isNaN(a) || isNaN(b)) {\r\n        return res;\r\n      }\r\n\r\n      do {\r\n        res.push(Math.floor(a / b));\r\n        t = a % b;\r\n        a = b;\r\n        b = t;\r\n      } while (a !== 1);\r\n\r\n      return res;\r\n    },\r\n\r\n    /**\r\n     * Creates a string representation of a fraction with all digits\r\n     *\r\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\r\n     **/\r\n    'toString': function(dec) {\r\n\r\n      var g;\r\n      var N = this[\"n\"];\r\n      var D = this[\"d\"];\r\n\r\n      if (isNaN(N) || isNaN(D)) {\r\n        return \"NaN\";\r\n      }\r\n\r\n      if (!Fraction['REDUCE']) {\r\n        g = gcd(N, D);\r\n        N /= g;\r\n        D /= g;\r\n      }\r\n\r\n      dec = dec || 15; // 15 = decimal places when no repitation\r\n\r\n      var cycLen = cycleLen(N, D); // Cycle length\r\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\r\n\r\n      var str = this['s'] === -1 ? \"-\" : \"\";\r\n\r\n      str += N / D | 0;\r\n\r\n      N %= D;\r\n      N *= 10;\r\n\r\n      if (N)\r\n        str += \".\";\r\n\r\n      if (cycLen) {\r\n\r\n        for (var i = cycOff; i--;) {\r\n          str += N / D | 0;\r\n          N %= D;\r\n          N *= 10;\r\n        }\r\n        str += \"(\";\r\n        for (var i = cycLen; i--;) {\r\n          str += N / D | 0;\r\n          N %= D;\r\n          N *= 10;\r\n        }\r\n        str += \")\";\r\n      } else {\r\n        for (var i = dec; N && i--;) {\r\n          str += N / D | 0;\r\n          N %= D;\r\n          N *= 10;\r\n        }\r\n      }\r\n      return str;\r\n    }\r\n  };\r\n\r\n  if (typeof define === \"function\" && define[\"amd\"]) {\r\n    define([], function() {\r\n      return Fraction;\r\n    });\r\n  } else if (typeof exports === \"object\") {\r\n    Object.defineProperty(Fraction, \"__esModule\", { 'value': true });\r\n    Fraction['default'] = Fraction;\r\n    Fraction['Fraction'] = Fraction;\r\n    module['exports'] = Fraction;\r\n  } else {\r\n    root['Fraction'] = Fraction;\r\n  }\r\n\r\n})(this);\r\n"]},"metadata":{},"sourceType":"script"}