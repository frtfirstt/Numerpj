{"ast":null,"code":"import { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    matrix,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  var assign = assignFactory({\n    subset,\n    matrix\n  });\n  /**\r\n   * @constructor AssignmentNode\r\n   * @extends {Node}\r\n   *\r\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\r\n   * replace a subset of a matrix like `A[2,2]=42`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     new AssignmentNode(symbol, value)\r\n   *     new AssignmentNode(object, index, value)\r\n   *\r\n   * Usage:\r\n   *\r\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\r\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\r\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\r\n   *\r\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\r\n   * @param {IndexNode} [index=null]            Index, property name or matrix\r\n   *                                            index. Optional. If not provided\r\n   *                                            and `object` is a SymbolNode,\r\n   *                                            the property is assigned to the\r\n   *                                            global scope.\r\n   * @param {Node} value                        The value to be assigned\r\n   */\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!isSymbolNode(object) && !isAccessorNode(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n\n    if (isSymbolNode(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n\n    if (this.index && !isIndexNode(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n\n    if (!isNode(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\r\n   * Compile a node into a JavaScript function.\r\n   * This basically pre-calculates as much as possible and only leaves open\r\n   * calculations which depend on a dynamic scope with variables.\r\n   * @param {Object} math     Math.js namespace with functions and constants.\r\n   * @param {Object} argNames An object with argument names as key and `true`\r\n   *                          as value. Used in the SymbolNode to optimize\r\n   *                          for arguments from user assigned functions\r\n   *                          (see FunctionAssignmentNode) or special symbols\r\n   *                          like `end` (see IndexNode).\r\n   * @return {function} Returns a function which can be called like:\r\n   *                        evalNode(scope: Object, args: Object, context: *)\r\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n    var evalValue = this.value._compile(math, argNames);\n\n    var name = this.object.name;\n\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!isSymbolNode(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return function evalAssignmentNode(scope, args, context) {\n        return setSafeProperty(scope, name, evalValue(scope, args, context));\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        return setSafeProperty(object, prop, value);\n      };\n    } else if (isSymbolNode(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        setSafeProperty(scope, name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = getSafeProperty(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          setSafeProperty(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\r\n   * Execute a callback for each of the child nodes of this node\r\n   * @param {function(child: Node, path: string, parent: Node)} callback\r\n   */\n\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n\n    callback(this.value, 'value', this);\n  };\n  /**\r\n   * Create a new AssignmentNode having it's childs be the results of calling\r\n   * the provided callback function for each of the childs of the original node.\r\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\r\n   * @returns {AssignmentNode} Returns a transformed copy of the node\r\n   */\n\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n  /**\r\n   * Create a clone of this node, a shallow copy\r\n   * @return {AssignmentNode}\r\n   */\n\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\r\n   * Is parenthesis needed?\r\n   * @param {node} node\r\n   * @param {string} [parenthesis='keep']\r\n   * @private\r\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = getPrecedence(node, parenthesis);\n    var exprPrecedence = getPrecedence(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\r\n   * Get string representation\r\n   * @param {Object} options\r\n   * @return {string}\r\n   */\n\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n  /**\r\n   * Get a JSON representation of the node\r\n   * @returns {Object}\r\n   */\n\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\r\n   * Instantiate an AssignmentNode from its JSON representation\r\n   * @param {Object} json  An object structured like\r\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\r\n   *                       where mathjs is optional\r\n   * @returns {AssignmentNode}\r\n   */\n\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\r\n   * Get HTML representation\r\n   * @param {Object} options\r\n   * @return {string}\r\n   */\n\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\r\n   * Get LaTeX representation\r\n   * @param {Object} options\r\n   * @return {string}\r\n   */\n\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"sources":["C:/Users/big49/Desktop/clone2/Numerpj/node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js"],"names":["isAccessorNode","isIndexNode","isNode","isSymbolNode","getSafeProperty","setSafeProperty","factory","accessFactory","assignFactory","getPrecedence","name","dependencies","createAssignmentNode","_ref","subset","matrix","Node","access","assign","AssignmentNode","object","index","value","SyntaxError","TypeError","Error","Object","defineProperty","get","isObjectProperty","getObjectProperty","bind","set","prototype","type","isAssignmentNode","_compile","math","argNames","evalObject","evalIndex","evalValue","evalAssignmentNode","scope","args","context","prop","childObject","evalParentObject","parentProp","parent","evalParentIndex","parentIndex","forEach","callback","map","_ifNode","clone","needParenthesis","node","parenthesis","precedence","exprPrecedence","_toString","options","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","concat","isClass"],"mappings":"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","sourcesContent":["import { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\r\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { accessFactory } from './utils/access.js';\r\nimport { assignFactory } from './utils/assign.js';\r\nimport { getPrecedence } from '../operators.js';\r\nvar name = 'AssignmentNode';\r\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\r\n'Node'];\r\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    subset,\r\n    matrix,\r\n    Node\r\n  } = _ref;\r\n  var access = accessFactory({\r\n    subset\r\n  });\r\n  var assign = assignFactory({\r\n    subset,\r\n    matrix\r\n  });\r\n  /**\r\n   * @constructor AssignmentNode\r\n   * @extends {Node}\r\n   *\r\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\r\n   * replace a subset of a matrix like `A[2,2]=42`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     new AssignmentNode(symbol, value)\r\n   *     new AssignmentNode(object, index, value)\r\n   *\r\n   * Usage:\r\n   *\r\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\r\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\r\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\r\n   *\r\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\r\n   * @param {IndexNode} [index=null]            Index, property name or matrix\r\n   *                                            index. Optional. If not provided\r\n   *                                            and `object` is a SymbolNode,\r\n   *                                            the property is assigned to the\r\n   *                                            global scope.\r\n   * @param {Node} value                        The value to be assigned\r\n   */\r\n\r\n  function AssignmentNode(object, index, value) {\r\n    if (!(this instanceof AssignmentNode)) {\r\n      throw new SyntaxError('Constructor must be called with the new operator');\r\n    }\r\n\r\n    this.object = object;\r\n    this.index = value ? index : null;\r\n    this.value = value || index; // validate input\r\n\r\n    if (!isSymbolNode(object) && !isAccessorNode(object)) {\r\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\r\n    }\r\n\r\n    if (isSymbolNode(object) && object.name === 'end') {\r\n      throw new Error('Cannot assign to symbol \"end\"');\r\n    }\r\n\r\n    if (this.index && !isIndexNode(this.index)) {\r\n      // index is optional\r\n      throw new TypeError('IndexNode expected as \"index\"');\r\n    }\r\n\r\n    if (!isNode(this.value)) {\r\n      throw new TypeError('Node expected as \"value\"');\r\n    } // readonly property name\r\n\r\n\r\n    Object.defineProperty(this, 'name', {\r\n      get: function () {\r\n        if (this.index) {\r\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\r\n        } else {\r\n          return this.object.name || '';\r\n        }\r\n      }.bind(this),\r\n      set: function set() {\r\n        throw new Error('Cannot assign a new name, name is read-only');\r\n      }\r\n    });\r\n  }\r\n\r\n  AssignmentNode.prototype = new Node();\r\n  AssignmentNode.prototype.type = 'AssignmentNode';\r\n  AssignmentNode.prototype.isAssignmentNode = true;\r\n  /**\r\n   * Compile a node into a JavaScript function.\r\n   * This basically pre-calculates as much as possible and only leaves open\r\n   * calculations which depend on a dynamic scope with variables.\r\n   * @param {Object} math     Math.js namespace with functions and constants.\r\n   * @param {Object} argNames An object with argument names as key and `true`\r\n   *                          as value. Used in the SymbolNode to optimize\r\n   *                          for arguments from user assigned functions\r\n   *                          (see FunctionAssignmentNode) or special symbols\r\n   *                          like `end` (see IndexNode).\r\n   * @return {function} Returns a function which can be called like:\r\n   *                        evalNode(scope: Object, args: Object, context: *)\r\n   */\r\n\r\n  AssignmentNode.prototype._compile = function (math, argNames) {\r\n    var evalObject = this.object._compile(math, argNames);\r\n\r\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\r\n\r\n    var evalValue = this.value._compile(math, argNames);\r\n\r\n    var name = this.object.name;\r\n\r\n    if (!this.index) {\r\n      // apply a variable to the scope, for example `a=2`\r\n      if (!isSymbolNode(this.object)) {\r\n        throw new TypeError('SymbolNode expected as object');\r\n      }\r\n\r\n      return function evalAssignmentNode(scope, args, context) {\r\n        return setSafeProperty(scope, name, evalValue(scope, args, context));\r\n      };\r\n    } else if (this.index.isObjectProperty()) {\r\n      // apply an object property for example `a.b=2`\r\n      var prop = this.index.getObjectProperty();\r\n      return function evalAssignmentNode(scope, args, context) {\r\n        var object = evalObject(scope, args, context);\r\n        var value = evalValue(scope, args, context);\r\n        return setSafeProperty(object, prop, value);\r\n      };\r\n    } else if (isSymbolNode(this.object)) {\r\n      // update a matrix subset, for example `a[2]=3`\r\n      return function evalAssignmentNode(scope, args, context) {\r\n        var childObject = evalObject(scope, args, context);\r\n        var value = evalValue(scope, args, context);\r\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\r\n\r\n        setSafeProperty(scope, name, assign(childObject, index, value));\r\n        return value;\r\n      };\r\n    } else {\r\n      // isAccessorNode(node.object) === true\r\n      // update a matrix subset, for example `a.b[2]=3`\r\n      // we will not use the compile function of the AccessorNode, but compile it\r\n      // ourselves here as we need the parent object of the AccessorNode:\r\n      // wee need to apply the updated object to parent object\r\n      var evalParentObject = this.object.object._compile(math, argNames);\r\n\r\n      if (this.object.index.isObjectProperty()) {\r\n        var parentProp = this.object.index.getObjectProperty();\r\n        return function evalAssignmentNode(scope, args, context) {\r\n          var parent = evalParentObject(scope, args, context);\r\n          var childObject = getSafeProperty(parent, parentProp);\r\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\r\n\r\n          var value = evalValue(scope, args, context);\r\n          setSafeProperty(parent, parentProp, assign(childObject, index, value));\r\n          return value;\r\n        };\r\n      } else {\r\n        // if some parameters use the 'end' parameter, we need to calculate the size\r\n        var evalParentIndex = this.object.index._compile(math, argNames);\r\n\r\n        return function evalAssignmentNode(scope, args, context) {\r\n          var parent = evalParentObject(scope, args, context);\r\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\r\n\r\n          var childObject = access(parent, parentIndex);\r\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\r\n\r\n          var value = evalValue(scope, args, context);\r\n          assign(parent, parentIndex, assign(childObject, index, value));\r\n          return value;\r\n        };\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Execute a callback for each of the child nodes of this node\r\n   * @param {function(child: Node, path: string, parent: Node)} callback\r\n   */\r\n\r\n\r\n  AssignmentNode.prototype.forEach = function (callback) {\r\n    callback(this.object, 'object', this);\r\n\r\n    if (this.index) {\r\n      callback(this.index, 'index', this);\r\n    }\r\n\r\n    callback(this.value, 'value', this);\r\n  };\r\n  /**\r\n   * Create a new AssignmentNode having it's childs be the results of calling\r\n   * the provided callback function for each of the childs of the original node.\r\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\r\n   * @returns {AssignmentNode} Returns a transformed copy of the node\r\n   */\r\n\r\n\r\n  AssignmentNode.prototype.map = function (callback) {\r\n    var object = this._ifNode(callback(this.object, 'object', this));\r\n\r\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\r\n\r\n    var value = this._ifNode(callback(this.value, 'value', this));\r\n\r\n    return new AssignmentNode(object, index, value);\r\n  };\r\n  /**\r\n   * Create a clone of this node, a shallow copy\r\n   * @return {AssignmentNode}\r\n   */\r\n\r\n\r\n  AssignmentNode.prototype.clone = function () {\r\n    return new AssignmentNode(this.object, this.index, this.value);\r\n  };\r\n  /*\r\n   * Is parenthesis needed?\r\n   * @param {node} node\r\n   * @param {string} [parenthesis='keep']\r\n   * @private\r\n   */\r\n\r\n\r\n  function needParenthesis(node, parenthesis) {\r\n    if (!parenthesis) {\r\n      parenthesis = 'keep';\r\n    }\r\n\r\n    var precedence = getPrecedence(node, parenthesis);\r\n    var exprPrecedence = getPrecedence(node.value, parenthesis);\r\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\r\n  }\r\n  /**\r\n   * Get string representation\r\n   * @param {Object} options\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  AssignmentNode.prototype._toString = function (options) {\r\n    var object = this.object.toString(options);\r\n    var index = this.index ? this.index.toString(options) : '';\r\n    var value = this.value.toString(options);\r\n\r\n    if (needParenthesis(this, options && options.parenthesis)) {\r\n      value = '(' + value + ')';\r\n    }\r\n\r\n    return object + index + ' = ' + value;\r\n  };\r\n  /**\r\n   * Get a JSON representation of the node\r\n   * @returns {Object}\r\n   */\r\n\r\n\r\n  AssignmentNode.prototype.toJSON = function () {\r\n    return {\r\n      mathjs: 'AssignmentNode',\r\n      object: this.object,\r\n      index: this.index,\r\n      value: this.value\r\n    };\r\n  };\r\n  /**\r\n   * Instantiate an AssignmentNode from its JSON representation\r\n   * @param {Object} json  An object structured like\r\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\r\n   *                       where mathjs is optional\r\n   * @returns {AssignmentNode}\r\n   */\r\n\r\n\r\n  AssignmentNode.fromJSON = function (json) {\r\n    return new AssignmentNode(json.object, json.index, json.value);\r\n  };\r\n  /**\r\n   * Get HTML representation\r\n   * @param {Object} options\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  AssignmentNode.prototype.toHTML = function (options) {\r\n    var object = this.object.toHTML(options);\r\n    var index = this.index ? this.index.toHTML(options) : '';\r\n    var value = this.value.toHTML(options);\r\n\r\n    if (needParenthesis(this, options && options.parenthesis)) {\r\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\r\n    }\r\n\r\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\r\n  };\r\n  /**\r\n   * Get LaTeX representation\r\n   * @param {Object} options\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  AssignmentNode.prototype._toTex = function (options) {\r\n    var object = this.object.toTex(options);\r\n    var index = this.index ? this.index.toTex(options) : '';\r\n    var value = this.value.toTex(options);\r\n\r\n    if (needParenthesis(this, options && options.parenthesis)) {\r\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\r\n    }\r\n\r\n    return object + index + ':=' + value;\r\n  };\r\n\r\n  return AssignmentNode;\r\n}, {\r\n  isClass: true,\r\n  isNode: true\r\n});"]},"metadata":{},"sourceType":"module"}