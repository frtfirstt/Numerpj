{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'usolve';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createUsolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n  /**\r\n   * Finds one solution of a linear equation system by backward substitution. Matrix must be an upper triangular matrix. Throws an error if there's no solution.\r\n   *\r\n   * `U * x = b`\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.usolve(U, b)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = [[-2, 3], [2, 1]]\r\n   *    const b = [11, 9]\r\n   *    const x = usolve(a, b)  // [[8], [9]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    usolveAll, lup, slu, usolve, lusolve\r\n   *\r\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\r\n   * @param {Matrix, Array} b       A column vector with the b values\r\n   *\r\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\r\n   */\n\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseBackwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseBackwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n\n      var r = _denseBackwardSubstitution(m, b);\n\n      return r.valueOf();\n    }\n  });\n\n  function _denseBackwardSubstitution(m, b) {\n    // make b into a column vector\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1]; // result\n\n    var x = [];\n    var mdata = m._data; // loop columns backwards\n\n    for (var j = columns - 1; j >= 0; j--) {\n      // b[j]\n      var bj = bdata[j][0] || 0; // x[j]\n\n      var xj = void 0;\n\n      if (!equalScalar(bj, 0)) {\n        // value at [j, j]\n        var vjj = mdata[j][j];\n\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n\n        xj = divideScalar(bj, vjj); // loop rows\n\n        for (var i = j - 1; i >= 0; i--) {\n          // update copy of b\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];\n        }\n      } else {\n        // zero value at j\n        xj = 0;\n      } // update x\n\n\n      x[j] = [xj];\n    }\n\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n\n  function _sparseBackwardSubstitution(m, b) {\n    // make b into a column vector\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // result\n\n    var x = []; // loop columns backwards\n\n    for (var j = columns - 1; j >= 0; j--) {\n      var bj = bdata[j][0] || 0;\n\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n        var vjj = 0; // upper triangular matrix values & index (column j)\n\n        var jValues = [];\n        var jIndices = []; // first & last indeces in column\n\n        var firstIndex = ptr[j];\n        var lastIndex = ptr[j + 1]; // values in column, find value at [j, j], loop backwards\n\n        for (var k = lastIndex - 1; k >= firstIndex; k--) {\n          var i = index[k]; // check row (rows are not sorted!)\n\n          if (i === j) {\n            vjj = values[k];\n          } else if (i < j) {\n            // store upper triangular\n            jValues.push(values[k]);\n            jIndices.push(i);\n          }\n        } // at this point we must have a value in vjj\n\n\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n\n        var xj = divideScalar(bj, vjj);\n\n        for (var _k = 0, _lastIndex = jIndices.length; _k < _lastIndex; _k++) {\n          var _i = jIndices[_k];\n          bdata[_i] = [subtract(bdata[_i][0], multiplyScalar(xj, jValues[_k]))];\n        }\n\n        x[j] = [xj];\n      } else {\n        // degenerate row, we can choose any value\n        x[j] = [0];\n      }\n    }\n\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/first/Desktop/numer/Numerpj/node_modules/mathjs/lib/esm/function/algebra/solver/usolve.js"],"names":["factory","createSolveValidation","name","dependencies","createUsolve","_ref","typed","matrix","divideScalar","multiplyScalar","subtract","equalScalar","DenseMatrix","solveValidation","SparseMatrixArrayMatrix","m","b","_sparseBackwardSubstitution","DenseMatrixArrayMatrix","_denseBackwardSubstitution","ArrayArrayMatrix","a","r","valueOf","bdata","_data","rows","_size","columns","x","mdata","j","bj","xj","vjj","Error","i","data","size","values","_values","index","_index","ptr","_ptr","jValues","jIndices","firstIndex","lastIndex","k","push","_k","_lastIndex","length","_i"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nimport { createSolveValidation } from './utils/solveValidation.js';\r\nvar name = 'usolve';\r\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\r\nexport var createUsolve = /* #__PURE__ */factory(name, dependencies, (_ref) => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    divideScalar,\r\n    multiplyScalar,\r\n    subtract,\r\n    equalScalar,\r\n    DenseMatrix\r\n  } = _ref;\r\n  var solveValidation = createSolveValidation({\r\n    DenseMatrix\r\n  });\r\n  /**\r\n   * Finds one solution of a linear equation system by backward substitution. Matrix must be an upper triangular matrix. Throws an error if there's no solution.\r\n   *\r\n   * `U * x = b`\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.usolve(U, b)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = [[-2, 3], [2, 1]]\r\n   *    const b = [11, 9]\r\n   *    const x = usolve(a, b)  // [[8], [9]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    usolveAll, lup, slu, usolve, lusolve\r\n   *\r\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\r\n   * @param {Matrix, Array} b       A column vector with the b values\r\n   *\r\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\r\n   */\r\n\r\n  return typed(name, {\r\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\r\n      return _sparseBackwardSubstitution(m, b);\r\n    },\r\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\r\n      return _denseBackwardSubstitution(m, b);\r\n    },\r\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\r\n      var m = matrix(a);\r\n\r\n      var r = _denseBackwardSubstitution(m, b);\r\n\r\n      return r.valueOf();\r\n    }\r\n  });\r\n\r\n  function _denseBackwardSubstitution(m, b) {\r\n    // make b into a column vector\r\n    b = solveValidation(m, b, true);\r\n    var bdata = b._data;\r\n    var rows = m._size[0];\r\n    var columns = m._size[1]; // result\r\n\r\n    var x = [];\r\n    var mdata = m._data; // loop columns backwards\r\n\r\n    for (var j = columns - 1; j >= 0; j--) {\r\n      // b[j]\r\n      var bj = bdata[j][0] || 0; // x[j]\r\n\r\n      var xj = void 0;\r\n\r\n      if (!equalScalar(bj, 0)) {\r\n        // value at [j, j]\r\n        var vjj = mdata[j][j];\r\n\r\n        if (equalScalar(vjj, 0)) {\r\n          // system cannot be solved\r\n          throw new Error('Linear system cannot be solved since matrix is singular');\r\n        }\r\n\r\n        xj = divideScalar(bj, vjj); // loop rows\r\n\r\n        for (var i = j - 1; i >= 0; i--) {\r\n          // update copy of b\r\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];\r\n        }\r\n      } else {\r\n        // zero value at j\r\n        xj = 0;\r\n      } // update x\r\n\r\n\r\n      x[j] = [xj];\r\n    }\r\n\r\n    return new DenseMatrix({\r\n      data: x,\r\n      size: [rows, 1]\r\n    });\r\n  }\r\n\r\n  function _sparseBackwardSubstitution(m, b) {\r\n    // make b into a column vector\r\n    b = solveValidation(m, b, true);\r\n    var bdata = b._data;\r\n    var rows = m._size[0];\r\n    var columns = m._size[1];\r\n    var values = m._values;\r\n    var index = m._index;\r\n    var ptr = m._ptr; // result\r\n\r\n    var x = []; // loop columns backwards\r\n\r\n    for (var j = columns - 1; j >= 0; j--) {\r\n      var bj = bdata[j][0] || 0;\r\n\r\n      if (!equalScalar(bj, 0)) {\r\n        // non-degenerate row, find solution\r\n        var vjj = 0; // upper triangular matrix values & index (column j)\r\n\r\n        var jValues = [];\r\n        var jIndices = []; // first & last indeces in column\r\n\r\n        var firstIndex = ptr[j];\r\n        var lastIndex = ptr[j + 1]; // values in column, find value at [j, j], loop backwards\r\n\r\n        for (var k = lastIndex - 1; k >= firstIndex; k--) {\r\n          var i = index[k]; // check row (rows are not sorted!)\r\n\r\n          if (i === j) {\r\n            vjj = values[k];\r\n          } else if (i < j) {\r\n            // store upper triangular\r\n            jValues.push(values[k]);\r\n            jIndices.push(i);\r\n          }\r\n        } // at this point we must have a value in vjj\r\n\r\n\r\n        if (equalScalar(vjj, 0)) {\r\n          throw new Error('Linear system cannot be solved since matrix is singular');\r\n        }\r\n\r\n        var xj = divideScalar(bj, vjj);\r\n\r\n        for (var _k = 0, _lastIndex = jIndices.length; _k < _lastIndex; _k++) {\r\n          var _i = jIndices[_k];\r\n          bdata[_i] = [subtract(bdata[_i][0], multiplyScalar(xj, jValues[_k]))];\r\n        }\r\n\r\n        x[j] = [xj];\r\n      } else {\r\n        // degenerate row, we can choose any value\r\n        x[j] = [0];\r\n      }\r\n    }\r\n\r\n    return new DenseMatrix({\r\n      data: x,\r\n      size: [rows, 1]\r\n    });\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}